{
  "address": "0xABA78E2AF5574faD41A2DD30d952aFD225755BB2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "EtherReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "TOKEN",
          "type": "address"
        }
      ],
      "name": "MainTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_resiToken",
          "type": "address"
        }
      ],
      "name": "ResiVaultInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "TOKEN",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TokenReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RESI_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESI_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SERIE_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getCurrentExitQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMainToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_resiToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resiRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setMainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb526efa9668cbf36c6a8332253b26d536612cc2b46decb8b6f949fc84b3d9fbc",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0xABA78E2AF5574faD41A2DD30d952aFD225755BB2",
    "transactionIndex": 4,
    "gasUsed": "2225753",
    "logsBloom": "0x
    "blockHash": "0xa241d6155fab7bbff641e4cc11f4b80a127cac7fd1cf1b822e1022f685e6e33e",
    "transactionHash": "0xb526efa9668cbf36c6a8332253b26d536612cc2b46decb8b6f949fc84b3d9fbc",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 38003612,
        "transactionHash": "0xb526efa9668cbf36c6a8332253b26d536612cc2b46decb8b6f949fc84b3d9fbc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000153073310327caa6abb76f735d115e5c8ba1617b",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000edbc6ede09a700000000000000000000000000000000000000000000000001814be373cd2a72b0000000000000000000000000000000000000000000020d19e0cef95a2de54850000000000000000000000000000000000000000000000001805e2704ef20cbb0000000000000000000000000000000000000000000020d19e1bcb5c90beeef5",
        "logIndex": 12,
        "blockHash": "0xa241d6155fab7bbff641e4cc11f4b80a127cac7fd1cf1b822e1022f685e6e33e"
      }
    ],
    "blockNumber": 38003612,
    "cumulativeGasUsed": "3493376",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "072c24d1c97d8046f61296ee3e4bc405",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"TOKEN\",\"type\":\"address\"}],\"name\":\"MainTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_resiToken\",\"type\":\"address\"}],\"name\":\"ResiVaultInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"TOKEN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RESI_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESI_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERIE_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCurrentExitQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_resiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resiRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setMainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addToken(address,bytes32)\":{\"details\":\"add new token\",\"params\":{\"_name\":\"token name\",\"_token\":\"token address\"}},\"balance()\":{\"details\":\"Get Vault native balance\",\"returns\":{\"_0\":\"native contract balance\"}},\"getCurrentExitQuote(uint256)\":{\"details\":\"Get current exit quote given amount of tokens\",\"params\":{\"_amount\":\"amount of tokens held by an user\"},\"returns\":{\"_0\":\"exit quote\"}},\"getMainToken()\":{\"details\":\"Get main token\",\"returns\":{\"_0\":\"Main token address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"release(uint256)\":{\"details\":\"Transfer vault funds to ResiRegistry\",\"params\":{\"_amount\":\"amount to transfer\"}},\"removeToken(bytes32)\":{\"details\":\"remove token\",\"params\":{\"_name\":\"token name\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMainToken(address)\":{\"details\":\"Set Main Token address\",\"params\":{\"_token\":\"token address\"}},\"tokenBalance(bytes32)\":{\"details\":\"Get specific token Vault balance\",\"params\":{\"_name\":\"token name\"},\"returns\":{\"_0\":\"Contract token balance\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"RESI_REGISTRY\":{\"details\":\"RESI Registry adddress\"},\"RESI_TOKEN\":{\"details\":\"RESI TOKEN address\"},\"SERIE_ID\":{\"details\":\"SERIE ID linked to Vault\"},\"TOKEN\":{\"details\":\"Main token address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ResiVault.sol\":\"ResiVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/ResiVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IResiVault.sol\\\";\\nimport \\\"./interfaces/IResiRegistry.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ResiVault is IResiVault, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    ///@dev Main token address\\n    address public TOKEN;\\n    ///@dev RESI TOKEN address\\n    address public RESI_TOKEN;\\n    ///@dev RESI Registry adddress\\n    address public RESI_REGISTRY;\\n    ///@dev SERIE ID linked to Vault\\n    uint256 public SERIE_ID;\\n\\n    mapping(bytes32 => address) public tokens;\\n\\n    using SafeERC20 for IERC20;\\n\\n    function initialize(\\n        uint256 _serieId,\\n        address _resiToken,\\n        address _token,\\n        address _resiRegistry\\n    ) public initializer {\\n        require(_resiToken != address(0), \\\"ResiVault: INVALID RESI TOKEN ADDRESS\\\");\\n        require(_resiRegistry != address(0), \\\"ResiVault: INVALID RESI REGISTRY ADDRESS\\\");\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        SERIE_ID = _serieId;\\n        TOKEN = _token;\\n        RESI_TOKEN = _resiToken;\\n        RESI_REGISTRY = _resiRegistry;\\n        emit ResiVaultInitialized(_serieId, _resiToken, _resiRegistry);\\n    }\\n\\n    /**************************** GETTERS  ****************************/\\n\\n    /**\\n     * @dev Get specific token Vault balance\\n     * @param _name token name\\n     * @return Contract token balance\\n     */\\n    function tokenBalance(bytes32 _name) external view returns (uint256) {\\n        require(tokens[_name] != address(0), \\\"ResiVault: INVALID TOKEN NAME\\\");\\n        return IERC20(tokens[_name]).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Get Vault native balance\\n     * @return native contract balance\\n     */\\n    function balance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Get main token\\n     * @return Main token address\\n     */\\n    function getMainToken() external view returns (address) {\\n        return TOKEN;\\n    }\\n\\n    /**\\n     * @dev Get current exit quote given amount of tokens\\n     * @param _amount amount of tokens held by an user\\n     * @return exit quote\\n     */\\n    function getCurrentExitQuote(uint256 _amount) external view returns (uint256) {\\n        return _amount * _getExitQuote();\\n    }\\n\\n    /**************************** INTERFACE  ****************************/\\n\\n    /**\\n     *  @dev Set Main Token address\\n     * @param _token token address\\n     */\\n    function setMainToken(address _token) external onlyOwner {\\n        require(_token != address(0), \\\"ResiVault: INVALID TOKEN ADDRESS\\\");\\n        address oldToken = TOKEN;\\n        TOKEN = _token;\\n        emit MainTokenUpdated(oldToken, TOKEN);\\n    }\\n\\n    /**\\n     *  @dev add new token\\n     * @param _token token address\\n     * @param _name token name\\n     */\\n    function addToken(address _token, bytes32 _name) external onlyOwner {\\n        require(_token != address(0), \\\"ResiVault: INVALID TOKEN ADDRESS\\\");\\n        require(_name != bytes32(0), \\\"ResiVault: INVALID TOKEN NAME\\\");\\n        require(tokens[_name] == address(0), \\\"ResiVault: TOKEN ALREADY SET\\\");\\n        tokens[_name] = _token;\\n        emit TokenAdded(_name, _token);\\n    }\\n\\n    /**\\n     *  @dev remove token\\n     * @param _name token name\\n     */\\n    function removeToken(bytes32 _name) external onlyOwner {\\n        require(tokens[_name] != address(0), \\\"ResiVault: INVALID TOKEN NAME\\\");\\n        address _token = tokens[_name];\\n        tokens[_name] = address(0);\\n        emit TokenRemoved(_name, _token);\\n    }\\n\\n    /**\\n     * @dev Transfer vault funds to ResiRegistry\\n     * @param _amount amount to transfer\\n     */\\n    function release(uint256 _amount) external onlyResiRegistry {\\n        require(_amount > 0, \\\"INVALID AMOUNT\\\");\\n        require(IERC20(TOKEN).balanceOf(address(this)) >= _amount, \\\"ResiVault: INVALID AMOUNT TO RELEASE\\\");\\n\\n        uint256 quote = _getExitQuote();\\n        require(quote > 0, \\\"ResiVault: Invalid quote\\\");\\n\\n        IERC20(TOKEN).safeTransfer(RESI_REGISTRY, quote * _amount);\\n\\n        emit TokenReleased(TOKEN, _amount);\\n    }\\n\\n    /**************************** INTERNALS  ****************************/\\n\\n    /**\\n     * @dev Internal function to view current exit quote\\n     */\\n    function _getExitQuote() internal view returns (uint256) {\\n        uint256 serieSupply = IResiRegistry(RESI_REGISTRY).getSerieSupply(SERIE_ID);\\n        require(serieSupply > 0, \\\"ResiVault: SERIE WITH NO MINTED SUPPLY\\\");\\n        uint256 currentBalance = IERC20(TOKEN).balanceOf(address(this));\\n        uint256 quote = currentBalance / serieSupply;\\n        return quote;\\n    }\\n\\n    /**\\n     * @dev recieve eth function\\n     */\\n    receive() external payable {\\n        emit EtherReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev check msg sender is ResiRegistry\\n     */\\n    modifier onlyResiRegistry() {\\n        require(_msgSender() == RESI_REGISTRY);\\n        _;\\n    }\\n\\n    // Leave a gap betweeen inherited contracts variables in order\\n    // to be able to add more variables in them later.\\n    uint256[20] private upgradeGap;\\n}\\n\",\"keccak256\":\"0x2a2b2100243b7f715eebde57aa0c6e31865ef47483c7390666156bf81006be0d\",\"license\":\"MIT\"},\"contracts/interfaces/IResiRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiRegistry {\\n    struct Serie {\\n        bool active;\\n        bool created;\\n        uint256 id;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 currentProjects;\\n        uint256 numberOfProjects;\\n        uint256 currentSupply;\\n        uint256 maxSupply;\\n        address vault;\\n    }\\n\\n    struct Project {\\n        uint256 serie;\\n        bool active;\\n    }\\n\\n    function createSerie(\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address _vault\\n    ) external;\\n\\n    function addProject(bytes32 _name) external;\\n\\n    function addProjects(bytes32[] memory names) external;\\n\\n    function disableProject(bytes32 _name) external;\\n\\n    function increaseSerieSupply(uint256 _serieId, uint256 _amount) external;\\n\\n    function decreaseSerieSupply(uint256 _serieId, uint256 _amount) external;\\n\\n    function closeSerie() external;\\n\\n    function activeSerie() external view returns (uint256 id);\\n\\n    function isValidProject(uint256 _serie, bytes32 _project) external view returns (bool);\\n\\n    function isValidProject(bytes32 _project) external view returns (bool);\\n\\n    function getSBTSerie() external view returns (address);\\n\\n    function getSerieState(uint256 _serieId) external view returns (bool, uint256);\\n\\n    function getSerieSupply(uint256 _serieId) external view returns (uint256);\\n\\n    function getSBTSerie(uint256 _serieId) external view returns (address);\\n\\n    function getTreasuryVault() external view returns (address);\\n\\n    function withdrawFromVault(uint256 _serieId, uint256 _amount, address _to) external;\\n\\n    /// @notice Emitted when the Registry is initialized.\\n    event RegistryInitialized();\\n\\n    /// @notice Emitted when Resi Token Contract is set on Contract\\n    /// @param _resiToken Resi Token address\\n    event ResiTokenSet(address indexed _resiToken);\\n\\n    /// @notice Emitted when Treasury Vault address is set on Contract\\n    /// @param _treasuryVault Treasury Vault address\\n    event TreasuryVaultSet(address indexed _treasuryVault);\\n\\n    event SerieSBTSet(uint256 activeSerieId, address indexed _sbt);\\n\\n    event SerieCreated(\\n        uint256 _id,\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address indexed _vault\\n    );\\n\\n    event SerieSupplyUpdated(uint256 oldSupply, uint256 newSupply);\\n\\n    event SerieClosed(uint256 _id);\\n\\n    event ProjectAdded(bytes32 _name, uint256 serieId);\\n\\n    event ProjectDisabled(bytes32 _name);\\n\\n    event WithdrawFromVault(uint256 _serieId, uint256 _amount, address indexed _to);\\n}\\n\",\"keccak256\":\"0x6660a3032d41f2b28a0256ef1d7bc5fa469766fb0490d33e6b9c976e8fe7baea\",\"license\":\"MIT\"},\"contracts/interfaces/IResiVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiVault {\\n    function getMainToken() external view returns (address);\\n\\n    function release(uint256 _amount) external;\\n\\n    event ResiVaultInitialized(uint256 _serieId, address indexed _token, address indexed _resiToken);\\n    event MainTokenUpdated(address indexed oldToken, address indexed TOKEN);\\n    event TokenAdded(bytes32 _name, address indexed _token);\\n    event TokenRemoved(bytes32 _name, address indexed _token);\\n    event EtherReceived(address indexed _from, uint256 _value);\\n    event TokenReleased(address indexed TOKEN, uint256 _amount);\\n}\\n\",\"keccak256\":\"0xa8efb7b165468f65cbe31dfc16dbdf4ebc38a539676129b388febcf1eb1c76ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612783806100206000396000f3fe6080604052600436106101025760003560e01c80637e8625fd11610095578063afaa629311610064578063afaa62931461035d578063b69ef8a81461039a578063c0c1eebc146103c5578063d80fac41146103ee578063f2fde38b1461042b5761015e565b80637e8625fd1461029f57806382bfefc8146102ca5780638da5cb5b146102f5578063904194a3146103205761015e565b8063687a2b1e116100d1578063687a2b1e14610209578063715018a614610234578063754d1d541461024b5780637b9c8169146102745761015e565b8063224e74621461016357806327ce464e1461018c57806337bdc99b146101b55780634de046d5146101de5761015e565b3661015e5761010f610454565b73ffffffffffffffffffffffffffffffffffffffff167f1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b3460405161015491906119b7565b60405180910390a2005b600080fd5b34801561016f57600080fd5b5061018a60048036038101906101859190611a0d565b61045c565b005b34801561019857600080fd5b506101b360048036038101906101ae9190611a98565b6105e3565b005b3480156101c157600080fd5b506101dc60048036038101906101d79190611af1565b610742565b005b3480156101ea57600080fd5b506101f3610a01565b6040516102009190611b2d565b60405180910390f35b34801561021557600080fd5b5061021e610a2b565b60405161022b91906119b7565b60405180910390f35b34801561024057600080fd5b50610249610a31565b005b34801561025757600080fd5b50610272600480360381019061026d9190611b48565b610a45565b005b34801561028057600080fd5b50610289610da4565b6040516102969190611b2d565b60405180910390f35b3480156102ab57600080fd5b506102b4610dca565b6040516102c19190611b2d565b60405180910390f35b3480156102d657600080fd5b506102df610df0565b6040516102ec9190611b2d565b60405180910390f35b34801561030157600080fd5b5061030a610e16565b6040516103179190611b2d565b60405180910390f35b34801561032c57600080fd5b5061034760048036038101906103429190611a0d565b610e40565b6040516103549190611b2d565b60405180910390f35b34801561036957600080fd5b50610384600480360381019061037f9190611af1565b610e73565b60405161039191906119b7565b60405180910390f35b3480156103a657600080fd5b506103af610e8f565b6040516103bc91906119b7565b60405180910390f35b3480156103d157600080fd5b506103ec60048036038101906103e79190611baf565b610e97565b005b3480156103fa57600080fd5b5061041560048036038101906104109190611a0d565b611099565b60405161042291906119b7565b60405180910390f35b34801561043757600080fd5b50610452600480360381019061044d9190611a98565b6111f0565b005b600033905090565b610464611273565b600073ffffffffffffffffffffffffffffffffffffffff16609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd90611c4c565b60405180910390fd5b6000609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000609b600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f3afbc119e23990903d2ef3fdf9210a7b06b5f6f85438b0edfcfbf630ad594fcc836040516105d79190611c7b565b60405180910390a25050565b6105eb611273565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065190611ce2565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f1d77ee8e57fb5bec56c33790e5808931f795d7c1365f6d1e926ac6a4c297a64460405160405180910390a35050565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610783610454565b73ffffffffffffffffffffffffffffffffffffffff16146107a357600080fd5b600081116107e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dd90611d4e565b60405180910390fd5b80609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108429190611b2d565b602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190611d83565b10156108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb90611e22565b60405180910390fd5b60006108ce6112f1565b905060008111610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90611e8e565b60405180910390fd5b61098d609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683836109459190611edd565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114909092919063ffffffff16565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9cf9e3ab58b33f06d81842ea0ad850b6640c6430d6396973312e1715792e7a91836040516109f591906119b7565b60405180910390a25050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609a5481565b610a39611273565b610a436000611516565b565b60008060019054906101000a900460ff16159050808015610a765750600160008054906101000a900460ff1660ff16105b80610aa35750610a85306115dc565b158015610aa25750600160008054906101000a900460ff1660ff16145b5b610ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad990611f91565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b1f576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8590612023565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf4906120b5565b60405180910390fd5b610c056115ff565b610c0d611650565b610c156116b1565b84609a8190555082609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f6d49e9ba2167749f64ed7e82d71e18234f9977d171f27b6c3ffdda4c73fffc9d87604051610d3c91906119b7565b60405180910390a38015610d9d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d949190612127565b60405180910390a15b5050505050565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e7d6112f1565b82610e889190611edd565b9050919050565b600047905090565b610e9f611273565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0590611ce2565b60405180910390fd5b6000801b8103610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90611c4c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fec9061218e565b60405180910390fd5b81609b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f662cc3305b9b4ea3a5fd06717cdaece79b6ac0a7734fd44eabe0f37951dc587c8260405161108d9190611c7b565b60405180910390a25050565b60008073ffffffffffffffffffffffffffffffffffffffff16609b600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361113c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113390611c4c565b60405180910390fd5b609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111a89190611b2d565b602060405180830381865afa1580156111c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e99190611d83565b9050919050565b6111f8611273565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e90612220565b60405180910390fd5b61127081611516565b50565b61127b610454565b73ffffffffffffffffffffffffffffffffffffffff16611299610e16565b73ffffffffffffffffffffffffffffffffffffffff16146112ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e69061228c565b60405180910390fd5b565b600080609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317d87a95609a546040518263ffffffff1660e01b815260040161135191906119b7565b602060405180830381865afa15801561136e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113929190611d83565b9050600081116113d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ce9061231e565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114349190611b2d565b602060405180830381865afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114759190611d83565b905060008282611485919061236d565b905080935050505090565b6115118363a9059cbb60e01b84846040516024016114af92919061239e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061170a565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661164e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164590612439565b60405180910390fd5b565b600060019054906101000a900460ff1661169f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169690612439565b60405180910390fd5b6116af6116aa610454565b611516565b565b600060019054906101000a900460ff16611700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f790612439565b60405180910390fd5b6001606581905550565b600061176c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117d19092919063ffffffff16565b90506000815111156117cc578080602001905181019061178c9190612491565b6117cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c290612530565b60405180910390fd5b5b505050565b60606117e084846000856117e9565b90509392505050565b60608247101561182e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611825906125c2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516118579190612653565b60006040518083038185875af1925050503d8060008114611894576040519150601f19603f3d011682016040523d82523d6000602084013e611899565b606091505b50915091506118aa878383876118b6565b92505050949350505050565b60608315611918576000835103611910576118d08561192b565b61190f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611906906126b6565b60405180910390fd5b5b829050611923565b611922838361194e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156119615781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611995919061272b565b60405180910390fd5b6000819050919050565b6119b18161199e565b82525050565b60006020820190506119cc60008301846119a8565b92915050565b600080fd5b6000819050919050565b6119ea816119d7565b81146119f557600080fd5b50565b600081359050611a07816119e1565b92915050565b600060208284031215611a2357611a226119d2565b5b6000611a31848285016119f8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a6582611a3a565b9050919050565b611a7581611a5a565b8114611a8057600080fd5b50565b600081359050611a9281611a6c565b92915050565b600060208284031215611aae57611aad6119d2565b5b6000611abc84828501611a83565b91505092915050565b611ace8161199e565b8114611ad957600080fd5b50565b600081359050611aeb81611ac5565b92915050565b600060208284031215611b0757611b066119d2565b5b6000611b1584828501611adc565b91505092915050565b611b2781611a5a565b82525050565b6000602082019050611b426000830184611b1e565b92915050565b60008060008060808587031215611b6257611b616119d2565b5b6000611b7087828801611adc565b9450506020611b8187828801611a83565b9350506040611b9287828801611a83565b9250506060611ba387828801611a83565b91505092959194509250565b60008060408385031215611bc657611bc56119d2565b5b6000611bd485828601611a83565b9250506020611be5858286016119f8565b9150509250929050565b600082825260208201905092915050565b7f526573695661756c743a20494e56414c494420544f4b454e204e414d45000000600082015250565b6000611c36601d83611bef565b9150611c4182611c00565b602082019050919050565b60006020820190508181036000830152611c6581611c29565b9050919050565b611c75816119d7565b82525050565b6000602082019050611c906000830184611c6c565b92915050565b7f526573695661756c743a20494e56414c494420544f4b454e2041444452455353600082015250565b6000611ccc602083611bef565b9150611cd782611c96565b602082019050919050565b60006020820190508181036000830152611cfb81611cbf565b9050919050565b7f494e56414c494420414d4f554e54000000000000000000000000000000000000600082015250565b6000611d38600e83611bef565b9150611d4382611d02565b602082019050919050565b60006020820190508181036000830152611d6781611d2b565b9050919050565b600081519050611d7d81611ac5565b92915050565b600060208284031215611d9957611d986119d2565b5b6000611da784828501611d6e565b91505092915050565b7f526573695661756c743a20494e56414c494420414d4f554e5420544f2052454c60008201527f4541534500000000000000000000000000000000000000000000000000000000602082015250565b6000611e0c602483611bef565b9150611e1782611db0565b604082019050919050565b60006020820190508181036000830152611e3b81611dff565b9050919050565b7f526573695661756c743a20496e76616c69642071756f74650000000000000000600082015250565b6000611e78601883611bef565b9150611e8382611e42565b602082019050919050565b60006020820190508181036000830152611ea781611e6b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ee88261199e565b9150611ef38361199e565b9250828202611f018161199e565b91508282048414831517611f1857611f17611eae565b5b5092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611f7b602e83611bef565b9150611f8682611f1f565b604082019050919050565b60006020820190508181036000830152611faa81611f6e565b9050919050565b7f526573695661756c743a20494e56414c4944205245534920544f4b454e20414460008201527f4452455353000000000000000000000000000000000000000000000000000000602082015250565b600061200d602583611bef565b915061201882611fb1565b604082019050919050565b6000602082019050818103600083015261203c81612000565b9050919050565b7f526573695661756c743a20494e56414c4944205245534920524547495354525960008201527f2041444452455353000000000000000000000000000000000000000000000000602082015250565b600061209f602883611bef565b91506120aa82612043565b604082019050919050565b600060208201905081810360008301526120ce81612092565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061211161210c612107846120d5565b6120ec565b6120df565b9050919050565b612121816120f6565b82525050565b600060208201905061213c6000830184612118565b92915050565b7f526573695661756c743a20544f4b454e20414c52454144592053455400000000600082015250565b6000612178601c83611bef565b915061218382612142565b602082019050919050565b600060208201905081810360008301526121a78161216b565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061220a602683611bef565b9150612215826121ae565b604082019050919050565b60006020820190508181036000830152612239816121fd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612276602083611bef565b915061228182612240565b602082019050919050565b600060208201905081810360008301526122a581612269565b9050919050565b7f526573695661756c743a2053455249452057495448204e4f204d494e5445442060008201527f535550504c590000000000000000000000000000000000000000000000000000602082015250565b6000612308602683611bef565b9150612313826122ac565b604082019050919050565b60006020820190508181036000830152612337816122fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123788261199e565b91506123838361199e565b9250826123935761239261233e565b5b828204905092915050565b60006040820190506123b36000830185611b1e565b6123c060208301846119a8565b9392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612423602b83611bef565b915061242e826123c7565b604082019050919050565b6000602082019050818103600083015261245281612416565b9050919050565b60008115159050919050565b61246e81612459565b811461247957600080fd5b50565b60008151905061248b81612465565b92915050565b6000602082840312156124a7576124a66119d2565b5b60006124b58482850161247c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061251a602a83611bef565b9150612525826124be565b604082019050919050565b600060208201905081810360008301526125498161250d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006125ac602683611bef565b91506125b782612550565b604082019050919050565b600060208201905081810360008301526125db8161259f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156126165780820151818401526020810190506125fb565b60008484015250505050565b600061262d826125e2565b61263781856125ed565b93506126478185602086016125f8565b80840191505092915050565b600061265f8284612622565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126a0601d83611bef565b91506126ab8261266a565b602082019050919050565b600060208201905081810360008301526126cf81612693565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006126fd826126d6565b6127078185611bef565b93506127178185602086016125f8565b612720816126e1565b840191505092915050565b6000602082019050818103600083015261274581846126f2565b90509291505056fea2646970667358221220faac2f39b680d19c8e060eaac06b7abb5cbebd110c27802f4f485f12ff0c890264736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c80637e8625fd11610095578063afaa629311610064578063afaa62931461035d578063b69ef8a81461039a578063c0c1eebc146103c5578063d80fac41146103ee578063f2fde38b1461042b5761015e565b80637e8625fd1461029f57806382bfefc8146102ca5780638da5cb5b146102f5578063904194a3146103205761015e565b8063687a2b1e116100d1578063687a2b1e14610209578063715018a614610234578063754d1d541461024b5780637b9c8169146102745761015e565b8063224e74621461016357806327ce464e1461018c57806337bdc99b146101b55780634de046d5146101de5761015e565b3661015e5761010f610454565b73ffffffffffffffffffffffffffffffffffffffff167f1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b3460405161015491906119b7565b60405180910390a2005b600080fd5b34801561016f57600080fd5b5061018a60048036038101906101859190611a0d565b61045c565b005b34801561019857600080fd5b506101b360048036038101906101ae9190611a98565b6105e3565b005b3480156101c157600080fd5b506101dc60048036038101906101d79190611af1565b610742565b005b3480156101ea57600080fd5b506101f3610a01565b6040516102009190611b2d565b60405180910390f35b34801561021557600080fd5b5061021e610a2b565b60405161022b91906119b7565b60405180910390f35b34801561024057600080fd5b50610249610a31565b005b34801561025757600080fd5b50610272600480360381019061026d9190611b48565b610a45565b005b34801561028057600080fd5b50610289610da4565b6040516102969190611b2d565b60405180910390f35b3480156102ab57600080fd5b506102b4610dca565b6040516102c19190611b2d565b60405180910390f35b3480156102d657600080fd5b506102df610df0565b6040516102ec9190611b2d565b60405180910390f35b34801561030157600080fd5b5061030a610e16565b6040516103179190611b2d565b60405180910390f35b34801561032c57600080fd5b5061034760048036038101906103429190611a0d565b610e40565b6040516103549190611b2d565b60405180910390f35b34801561036957600080fd5b50610384600480360381019061037f9190611af1565b610e73565b60405161039191906119b7565b60405180910390f35b3480156103a657600080fd5b506103af610e8f565b6040516103bc91906119b7565b60405180910390f35b3480156103d157600080fd5b506103ec60048036038101906103e79190611baf565b610e97565b005b3480156103fa57600080fd5b5061041560048036038101906104109190611a0d565b611099565b60405161042291906119b7565b60405180910390f35b34801561043757600080fd5b50610452600480360381019061044d9190611a98565b6111f0565b005b600033905090565b610464611273565b600073ffffffffffffffffffffffffffffffffffffffff16609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd90611c4c565b60405180910390fd5b6000609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000609b600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f3afbc119e23990903d2ef3fdf9210a7b06b5f6f85438b0edfcfbf630ad594fcc836040516105d79190611c7b565b60405180910390a25050565b6105eb611273565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065190611ce2565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f1d77ee8e57fb5bec56c33790e5808931f795d7c1365f6d1e926ac6a4c297a64460405160405180910390a35050565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610783610454565b73ffffffffffffffffffffffffffffffffffffffff16146107a357600080fd5b600081116107e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dd90611d4e565b60405180910390fd5b80609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108429190611b2d565b602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190611d83565b10156108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb90611e22565b60405180910390fd5b60006108ce6112f1565b905060008111610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90611e8e565b60405180910390fd5b61098d609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683836109459190611edd565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114909092919063ffffffff16565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9cf9e3ab58b33f06d81842ea0ad850b6640c6430d6396973312e1715792e7a91836040516109f591906119b7565b60405180910390a25050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609a5481565b610a39611273565b610a436000611516565b565b60008060019054906101000a900460ff16159050808015610a765750600160008054906101000a900460ff1660ff16105b80610aa35750610a85306115dc565b158015610aa25750600160008054906101000a900460ff1660ff16145b5b610ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad990611f91565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b1f576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8590612023565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf4906120b5565b60405180910390fd5b610c056115ff565b610c0d611650565b610c156116b1565b84609a8190555082609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f6d49e9ba2167749f64ed7e82d71e18234f9977d171f27b6c3ffdda4c73fffc9d87604051610d3c91906119b7565b60405180910390a38015610d9d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d949190612127565b60405180910390a15b5050505050565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e7d6112f1565b82610e889190611edd565b9050919050565b600047905090565b610e9f611273565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0590611ce2565b60405180910390fd5b6000801b8103610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90611c4c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fec9061218e565b60405180910390fd5b81609b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f662cc3305b9b4ea3a5fd06717cdaece79b6ac0a7734fd44eabe0f37951dc587c8260405161108d9190611c7b565b60405180910390a25050565b60008073ffffffffffffffffffffffffffffffffffffffff16609b600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361113c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113390611c4c565b60405180910390fd5b609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111a89190611b2d565b602060405180830381865afa1580156111c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e99190611d83565b9050919050565b6111f8611273565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e90612220565b60405180910390fd5b61127081611516565b50565b61127b610454565b73ffffffffffffffffffffffffffffffffffffffff16611299610e16565b73ffffffffffffffffffffffffffffffffffffffff16146112ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e69061228c565b60405180910390fd5b565b600080609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317d87a95609a546040518263ffffffff1660e01b815260040161135191906119b7565b602060405180830381865afa15801561136e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113929190611d83565b9050600081116113d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ce9061231e565b60405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114349190611b2d565b602060405180830381865afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114759190611d83565b905060008282611485919061236d565b905080935050505090565b6115118363a9059cbb60e01b84846040516024016114af92919061239e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061170a565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661164e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164590612439565b60405180910390fd5b565b600060019054906101000a900460ff1661169f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169690612439565b60405180910390fd5b6116af6116aa610454565b611516565b565b600060019054906101000a900460ff16611700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f790612439565b60405180910390fd5b6001606581905550565b600061176c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117d19092919063ffffffff16565b90506000815111156117cc578080602001905181019061178c9190612491565b6117cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c290612530565b60405180910390fd5b5b505050565b60606117e084846000856117e9565b90509392505050565b60608247101561182e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611825906125c2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516118579190612653565b60006040518083038185875af1925050503d8060008114611894576040519150601f19603f3d011682016040523d82523d6000602084013e611899565b606091505b50915091506118aa878383876118b6565b92505050949350505050565b60608315611918576000835103611910576118d08561192b565b61190f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611906906126b6565b60405180910390fd5b5b829050611923565b611922838361194e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156119615781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611995919061272b565b60405180910390fd5b6000819050919050565b6119b18161199e565b82525050565b60006020820190506119cc60008301846119a8565b92915050565b600080fd5b6000819050919050565b6119ea816119d7565b81146119f557600080fd5b50565b600081359050611a07816119e1565b92915050565b600060208284031215611a2357611a226119d2565b5b6000611a31848285016119f8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a6582611a3a565b9050919050565b611a7581611a5a565b8114611a8057600080fd5b50565b600081359050611a9281611a6c565b92915050565b600060208284031215611aae57611aad6119d2565b5b6000611abc84828501611a83565b91505092915050565b611ace8161199e565b8114611ad957600080fd5b50565b600081359050611aeb81611ac5565b92915050565b600060208284031215611b0757611b066119d2565b5b6000611b1584828501611adc565b91505092915050565b611b2781611a5a565b82525050565b6000602082019050611b426000830184611b1e565b92915050565b60008060008060808587031215611b6257611b616119d2565b5b6000611b7087828801611adc565b9450506020611b8187828801611a83565b9350506040611b9287828801611a83565b9250506060611ba387828801611a83565b91505092959194509250565b60008060408385031215611bc657611bc56119d2565b5b6000611bd485828601611a83565b9250506020611be5858286016119f8565b9150509250929050565b600082825260208201905092915050565b7f526573695661756c743a20494e56414c494420544f4b454e204e414d45000000600082015250565b6000611c36601d83611bef565b9150611c4182611c00565b602082019050919050565b60006020820190508181036000830152611c6581611c29565b9050919050565b611c75816119d7565b82525050565b6000602082019050611c906000830184611c6c565b92915050565b7f526573695661756c743a20494e56414c494420544f4b454e2041444452455353600082015250565b6000611ccc602083611bef565b9150611cd782611c96565b602082019050919050565b60006020820190508181036000830152611cfb81611cbf565b9050919050565b7f494e56414c494420414d4f554e54000000000000000000000000000000000000600082015250565b6000611d38600e83611bef565b9150611d4382611d02565b602082019050919050565b60006020820190508181036000830152611d6781611d2b565b9050919050565b600081519050611d7d81611ac5565b92915050565b600060208284031215611d9957611d986119d2565b5b6000611da784828501611d6e565b91505092915050565b7f526573695661756c743a20494e56414c494420414d4f554e5420544f2052454c60008201527f4541534500000000000000000000000000000000000000000000000000000000602082015250565b6000611e0c602483611bef565b9150611e1782611db0565b604082019050919050565b60006020820190508181036000830152611e3b81611dff565b9050919050565b7f526573695661756c743a20496e76616c69642071756f74650000000000000000600082015250565b6000611e78601883611bef565b9150611e8382611e42565b602082019050919050565b60006020820190508181036000830152611ea781611e6b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ee88261199e565b9150611ef38361199e565b9250828202611f018161199e565b91508282048414831517611f1857611f17611eae565b5b5092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611f7b602e83611bef565b9150611f8682611f1f565b604082019050919050565b60006020820190508181036000830152611faa81611f6e565b9050919050565b7f526573695661756c743a20494e56414c4944205245534920544f4b454e20414460008201527f4452455353000000000000000000000000000000000000000000000000000000602082015250565b600061200d602583611bef565b915061201882611fb1565b604082019050919050565b6000602082019050818103600083015261203c81612000565b9050919050565b7f526573695661756c743a20494e56414c4944205245534920524547495354525960008201527f2041444452455353000000000000000000000000000000000000000000000000602082015250565b600061209f602883611bef565b91506120aa82612043565b604082019050919050565b600060208201905081810360008301526120ce81612092565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061211161210c612107846120d5565b6120ec565b6120df565b9050919050565b612121816120f6565b82525050565b600060208201905061213c6000830184612118565b92915050565b7f526573695661756c743a20544f4b454e20414c52454144592053455400000000600082015250565b6000612178601c83611bef565b915061218382612142565b602082019050919050565b600060208201905081810360008301526121a78161216b565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061220a602683611bef565b9150612215826121ae565b604082019050919050565b60006020820190508181036000830152612239816121fd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612276602083611bef565b915061228182612240565b602082019050919050565b600060208201905081810360008301526122a581612269565b9050919050565b7f526573695661756c743a2053455249452057495448204e4f204d494e5445442060008201527f535550504c590000000000000000000000000000000000000000000000000000602082015250565b6000612308602683611bef565b9150612313826122ac565b604082019050919050565b60006020820190508181036000830152612337816122fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123788261199e565b91506123838361199e565b9250826123935761239261233e565b5b828204905092915050565b60006040820190506123b36000830185611b1e565b6123c060208301846119a8565b9392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612423602b83611bef565b915061242e826123c7565b604082019050919050565b6000602082019050818103600083015261245281612416565b9050919050565b60008115159050919050565b61246e81612459565b811461247957600080fd5b50565b60008151905061248b81612465565b92915050565b6000602082840312156124a7576124a66119d2565b5b60006124b58482850161247c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061251a602a83611bef565b9150612525826124be565b604082019050919050565b600060208201905081810360008301526125498161250d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006125ac602683611bef565b91506125b782612550565b604082019050919050565b600060208201905081810360008301526125db8161259f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156126165780820151818401526020810190506125fb565b60008484015250505050565b600061262d826125e2565b61263781856125ed565b93506126478185602086016125f8565b80840191505092915050565b600061265f8284612622565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126a0601d83611bef565b91506126ab8261266a565b602082019050919050565b600060208201905081810360008301526126cf81612693565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006126fd826126d6565b6127078185611bef565b93506127178185602086016125f8565b612720816126e1565b840191505092915050565b6000602082019050818103600083015261274581846126f2565b90509291505056fea2646970667358221220faac2f39b680d19c8e060eaac06b7abb5cbebd110c27802f4f485f12ff0c890264736f6c63430008120033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addToken(address,bytes32)": {
        "details": "add new token",
        "params": {
          "_name": "token name",
          "_token": "token address"
        }
      },
      "balance()": {
        "details": "Get Vault native balance",
        "returns": {
          "_0": "native contract balance"
        }
      },
      "getCurrentExitQuote(uint256)": {
        "details": "Get current exit quote given amount of tokens",
        "params": {
          "_amount": "amount of tokens held by an user"
        },
        "returns": {
          "_0": "exit quote"
        }
      },
      "getMainToken()": {
        "details": "Get main token",
        "returns": {
          "_0": "Main token address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "release(uint256)": {
        "details": "Transfer vault funds to ResiRegistry",
        "params": {
          "_amount": "amount to transfer"
        }
      },
      "removeToken(bytes32)": {
        "details": "remove token",
        "params": {
          "_name": "token name"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMainToken(address)": {
        "details": "Set Main Token address",
        "params": {
          "_token": "token address"
        }
      },
      "tokenBalance(bytes32)": {
        "details": "Get specific token Vault balance",
        "params": {
          "_name": "token name"
        },
        "returns": {
          "_0": "Contract token balance"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "RESI_REGISTRY": {
        "details": "RESI Registry adddress"
      },
      "RESI_TOKEN": {
        "details": "RESI TOKEN address"
      },
      "SERIE_ID": {
        "details": "SERIE ID linked to Vault"
      },
      "TOKEN": {
        "details": "Main token address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 720,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3501,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 589,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 709,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1020,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1078,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9125,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "TOKEN",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 9128,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "RESI_TOKEN",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 9131,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "RESI_REGISTRY",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 9134,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "SERIE_ID",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 9138,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "tokens",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 9532,
        "contract": "contracts/ResiVault.sol:ResiVault",
        "label": "upgradeGap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)20_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}