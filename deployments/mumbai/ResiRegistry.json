{
  "address": "0x3a61443A9667DEdF9f56B105a59aa208fccf1F2a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        }
      ],
      "name": "ProjectAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "ProjectDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RegistryInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_resiToken",
          "type": "address"
        }
      ],
      "name": "ResiTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "SerieClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_numberOfProjects",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "SerieCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeSerieId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sbt",
          "type": "address"
        }
      ],
      "name": "SerieSBTSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "SerieSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_treasuryVault",
          "type": "address"
        }
      ],
      "name": "TreasuryVaultSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "WithdrawFromVault",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RESI_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeSerie",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "addProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "names",
          "type": "bytes32[]"
        }
      ],
      "name": "addProjects",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeSerie",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfProjects",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "createSerie",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseSerieSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "disableProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "getSBTSerie",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSBTSerie",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "getSerieState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "getSerieSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseSerieSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serie",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_project",
          "type": "bytes32"
        }
      ],
      "name": "isValidProject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_project",
          "type": "bytes32"
        }
      ],
      "name": "isValidProject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "serie",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sbt",
          "type": "address"
        }
      ],
      "name": "registerSerieSBT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "series",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "created",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentProjects",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfProjects",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seriesSBTs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resiToken",
          "type": "address"
        }
      ],
      "name": "setResiToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryVault",
          "type": "address"
        }
      ],
      "name": "setTreasuryVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x659dbb06279f66e6da785a60099f5e5ca1474b04fba34e2dd9ba3a08a1ac2211",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0x3a61443A9667DEdF9f56B105a59aa208fccf1F2a",
    "transactionIndex": 6,
    "gasUsed": "3571943",
    "logsBloom": "0x
    "blockHash": "0x7bbc71a7fc82588826732f8424a2225926f9ede5beab34f9164017500126eb10",
    "transactionHash": "0x659dbb06279f66e6da785a60099f5e5ca1474b04fba34e2dd9ba3a08a1ac2211",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 38003556,
        "transactionHash": "0x659dbb06279f66e6da785a60099f5e5ca1474b04fba34e2dd9ba3a08a1ac2211",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000153073310327caa6abb76f735d115e5c8ba1617b",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001308feae826900000000000000000000000000000000000000000000000000187b8b2130ab5801000000000000000000000000000000000000000000000ff900eec5242e9bdcca000000000000000000000000000000000000000000000000186882228228ef01000000000000000000000000000000000000000000000ff90101ce22dd1e45ca",
        "logIndex": 18,
        "blockHash": "0x7bbc71a7fc82588826732f8424a2225926f9ede5beab34f9164017500126eb10"
      }
    ],
    "blockNumber": 38003556,
    "cumulativeGasUsed": "4654911",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "072c24d1c97d8046f61296ee3e4bc405",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"}],\"name\":\"ProjectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"ProjectDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RegistryInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_resiToken\",\"type\":\"address\"}],\"name\":\"ResiTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"SerieClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numberOfProjects\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"SerieCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeSerieId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sbt\",\"type\":\"address\"}],\"name\":\"SerieSBTSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"SerieSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasuryVault\",\"type\":\"address\"}],\"name\":\"TreasuryVaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawFromVault\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RESI_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSerie\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"addProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"addProjects\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSerie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfProjects\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"createSerie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseSerieSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"disableProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"getSBTSerie\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSBTSerie\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"getSerieState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"getSerieSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseSerieSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serie\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_project\",\"type\":\"bytes32\"}],\"name\":\"isValidProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_project\",\"type\":\"bytes32\"}],\"name\":\"isValidProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"serie\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sbt\",\"type\":\"address\"}],\"name\":\"registerSerieSBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"series\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentProjects\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfProjects\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seriesSBTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resiToken\",\"type\":\"address\"}],\"name\":\"setResiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryVault\",\"type\":\"address\"}],\"name\":\"setTreasuryVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alejo Lovallo\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ResiTokenSet(address)\":{\"params\":{\"_resiToken\":\"Resi Token address\"}},\"TreasuryVaultSet(address)\":{\"params\":{\"_treasuryVault\":\"Treasury Vault address\"}}},\"kind\":\"dev\",\"methods\":{\"activeSerie()\":{\"details\":\"Get current active serie\",\"returns\":{\"id\":\"id\"}},\"addProject(bytes32)\":{\"details\":\"Add project to current serie\",\"params\":{\"_name\":\"name of the project\"}},\"addProjects(bytes32[])\":{\"details\":\"Add projects to current serie\",\"params\":{\"names\":\"projects names\"}},\"closeSerie()\":{\"details\":\"Close serie. This will mean all kind of operations to a serie could not be done anymore.\"},\"createSerie(uint256,uint256,uint256,uint256,address)\":{\"details\":\"Create New Serie. Cannot be created if another serie is running\",\"params\":{\"_endDate\":\"timestamp when serie ends\",\"_maxSupply\":\"max supply to mint during serie\",\"_numberOfProjects\":\"amount of projects\",\"_startDate\":\"timestamp when serie starts\",\"_vault\":\"address of the serie vault\"}},\"decreaseSerieSupply(uint256,uint256)\":{\"details\":\"Decrease serie supply. Only performed by ResiToken\",\"params\":{\"_amount\":\"amount to decrease\",\"_serieId\":\"serie id\"}},\"disableProject(bytes32)\":{\"details\":\"Disable project (no matter if serie not active)\",\"params\":{\"_name\":\"project name\"}},\"getSBTSerie()\":{\"details\":\"Get active serie sbt token\",\"returns\":{\"_0\":\"sbt address\"}},\"getSBTSerie(uint256)\":{\"details\":\"Get serie SBT token for a specific serie\",\"params\":{\"_serieId\":\"serie id to get sbt\"},\"returns\":{\"_0\":\"sbt address\"}},\"getSerieState(uint256)\":{\"details\":\"Get serie active state and current supply emitted\",\"params\":{\"_serieId\":\"serie id to get state\"},\"returns\":{\"_0\":\"wether serie is active\",\"_1\":\"currenty serie supply emitted\"}},\"getSerieSupply(uint256)\":{\"details\":\"Get current serie supply minted\",\"params\":{\"_serieId\":\"serie id to get current supply\"},\"returns\":{\"_0\":\"supply minted\"}},\"getTreasuryVault()\":{\"details\":\"Get Treasury vault address\",\"returns\":{\"_0\":\"treasury addresss\"}},\"increaseSerieSupply(uint256,uint256)\":{\"details\":\"Increase serie supply. Only performed by ResiToken\",\"params\":{\"_amount\":\"amount to increase\",\"_serieId\":\"serie id\"}},\"isValidProject(bytes32)\":{\"details\":\"Know if a project in an active serie is valid\",\"params\":{\"_project\":\"project name\"},\"returns\":{\"_0\":\"if valid\"}},\"isValidProject(uint256,bytes32)\":{\"details\":\"Know if a project is valid from a specific serie\",\"params\":{\"_project\":\"project name\",\"_serie\":\"serie id\"},\"returns\":{\"_0\":\"if valid\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerSerieSBT(address)\":{\"details\":\"Set SBT for current serie\",\"params\":{\"_sbt\":\"address of the SBT token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setResiToken(address)\":{\"details\":\"Set Resi token for Registry\",\"params\":{\"_resiToken\":\"address of the token\"}},\"setTreasuryVault(address)\":{\"details\":\"Set Treasury Vault for Registry\",\"params\":{\"_treasuryVault\":\"treasury vault address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFromVault(uint256,uint256,address)\":{\"details\":\"@param _serieId serie id\",\"params\":{\"_amount\":\"amount to withdrawn from vault\",\"_to\":\"address who will receive the assets\"}}},\"stateVariables\":{\"RESI_TOKEN\":{\"details\":\"Resi token address\"},\"TREASURY_VAULT\":{\"details\":\"Global Treasury vault address handled by admin protocol\"},\"activeSerieId\":{\"details\":\"current serie running\"},\"projects\":{\"details\":\"project name => Project info\"},\"series\":{\"details\":\"serieId => Serie info\"},\"seriesSBTs\":{\"details\":\"serieId => SBT\"},\"upgradeGap\":{\"details\":\"Leave a gap betweeen inherited contracts variables in orderto be able to add more variables in them later.\"}},\"title\":\"Resi Registry Contract\",\"version\":1},\"userdoc\":{\"events\":{\"RegistryInitialized()\":{\"notice\":\"Emitted when the Registry is initialized.\"},\"ResiTokenSet(address)\":{\"notice\":\"Emitted when Resi Token Contract is set on Contract\"},\"TreasuryVaultSet(address)\":{\"notice\":\"Emitted when Treasury Vault address is set on Contract\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Registry holding information of series and projects\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ResiRegistry.sol\":\"ResiRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/ResiRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IResiRegistry.sol\\\";\\nimport \\\"./interfaces/IResiVault.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Resi Registry Contract\\n/// @author Alejo Lovallo\\n/// @notice Registry holding information of series and projects\\ncontract ResiRegistry is IResiRegistry, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    /// @dev Resi token address\\n    address public RESI_TOKEN;\\n\\n    /// @dev Global Treasury vault address handled by admin protocol\\n    address private TREASURY_VAULT;\\n\\n    /// @dev current serie running\\n    uint256 private activeSerieId;\\n\\n    /// @dev serieId => Serie info\\n    mapping(uint256 => Serie) public series;\\n    /// @dev serieId => SBT\\n    mapping(uint256 => address) public seriesSBTs;\\n    /// @dev project name => Project info\\n    mapping(bytes32 => Project) public projects;\\n\\n    using SafeERC20 for IERC20;\\n\\n    function initialize() public initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        emit RegistryInitialized();\\n    }\\n\\n    /**************************** GETTERS  ****************************/\\n\\n    /**\\n     * @dev Get current active serie\\n     * @return id\\n     */\\n    function activeSerie() external view returns (uint256 id) {\\n        id = activeSerieId;\\n    }\\n\\n    /**\\n     * @dev Know if a project is valid from a specific serie\\n     * @param _serie serie id\\n     * @param _project project name\\n     * @return if valid\\n     */\\n    function isValidProject(uint256 _serie, bytes32 _project) external view returns (bool) {\\n        if (_serie == activeSerieId && projects[_project].serie == activeSerieId && projects[_project].active) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Know if a project in an active serie is valid\\n     * @param _project project name\\n     * @return if valid\\n     */\\n    function isValidProject(bytes32 _project) external view returns (bool) {\\n        Project memory proj = projects[_project];\\n        if (proj.serie == activeSerieId && proj.active == true) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Get active serie sbt token\\n     * @return sbt address\\n     */\\n    function getSBTSerie() external view returns (address) {\\n        return seriesSBTs[activeSerieId];\\n    }\\n\\n    /**\\n     * @dev Get serie SBT token for a specific serie\\n     * @param _serieId serie id to get sbt\\n     * @return sbt address\\n     */\\n    function getSBTSerie(uint256 _serieId) external view returns (address) {\\n        return seriesSBTs[_serieId];\\n    }\\n\\n    /**\\n     * @dev Get serie active state and current supply emitted\\n     * @param _serieId serie id to get state\\n     * @return wether serie is active\\n     * @return currenty serie supply emitted\\n     */\\n    function getSerieState(uint256 _serieId) external view returns (bool, uint256) {\\n        bool isActive = series[_serieId].active;\\n        uint256 currentSupply = series[_serieId].currentSupply;\\n        return (isActive, currentSupply);\\n    }\\n\\n    /**\\n     * @dev Get current serie supply minted\\n     * @param _serieId serie id to get current supply\\n     * @return supply minted\\n     */\\n    function getSerieSupply(uint256 _serieId) external view returns (uint256) {\\n        return series[_serieId].currentSupply;\\n    }\\n\\n    /**\\n     * @dev Get Treasury vault address\\n     * @return treasury addresss\\n     */\\n    function getTreasuryVault() external view returns (address) {\\n        return TREASURY_VAULT;\\n    }\\n\\n    /**************************** INTERFACE  ****************************/\\n\\n    /**\\n     * @dev Set Resi token for Registry\\n     * @param _resiToken address of the token\\n     */\\n    function setResiToken(address _resiToken) external onlyOwner {\\n        require(_resiToken != address(0), \\\"ResiRegistry: INVALID TOKEN ADDRESS\\\");\\n        RESI_TOKEN = _resiToken;\\n        emit ResiTokenSet(_resiToken);\\n    }\\n\\n    /**\\n     * @dev Set Treasury Vault for Registry\\n     * @param _treasuryVault treasury vault address\\n     */\\n    function setTreasuryVault(address _treasuryVault) external onlyOwner {\\n        require(_treasuryVault != address(0), \\\"ResiRegistry: INVALID VAULT ADDRESS\\\");\\n        TREASURY_VAULT = _treasuryVault;\\n        emit TreasuryVaultSet(_treasuryVault);\\n    }\\n\\n    /**\\n     * @dev Create New Serie. Cannot be created if another serie is running\\n     * @param _startDate timestamp when serie starts\\n     * @param _endDate timestamp when serie ends\\n     * @param _numberOfProjects amount of projects\\n     * @param _maxSupply max supply to mint during serie\\n     * @param _vault address of the serie vault\\n     */\\n    function createSerie(\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address _vault\\n    ) external onlyOwner {\\n        _checkSerie(_startDate, _endDate, _numberOfProjects, _maxSupply, _vault);\\n        activeSerieId += 1;\\n        Serie memory newSerie = Serie({\\n            id: activeSerieId,\\n            startDate: _startDate,\\n            endDate: _endDate,\\n            numberOfProjects: _numberOfProjects,\\n            currentProjects: 0,\\n            currentSupply: 0,\\n            maxSupply: _maxSupply,\\n            vault: _vault,\\n            active: true,\\n            created: true\\n        });\\n        series[activeSerieId] = newSerie;\\n        emit SerieCreated(activeSerieId, _startDate, _endDate, _numberOfProjects, _maxSupply, _vault);\\n    }\\n\\n    /**\\n     * @dev Add project to current serie\\n     * @param _name name of the project\\n     */\\n    function addProject(bytes32 _name) external onlyOwner {\\n        _addProject(_name);\\n    }\\n\\n    /**\\n     * @dev Add projects to current serie\\n     * @param names projects names\\n     */\\n    function addProjects(bytes32[] memory names) external onlyOwner {\\n        for (uint256 i = 0; i < names.length; i++) {\\n            _addProject(names[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Disable project (no matter if serie not active)\\n     * @param _name project name\\n     */\\n    function disableProject(bytes32 _name) external onlyOwner {\\n        projects[_name].active = false;\\n        emit ProjectDisabled(_name);\\n    }\\n\\n    /**\\n     * @dev Set SBT for current serie\\n     * @param _sbt address of the SBT token\\n     */\\n    function registerSerieSBT(address _sbt) external onlyOwner {\\n        require(series[activeSerieId].active, \\\"ResiRegistry: SERIE NOT ACTIVE\\\");\\n        require(_sbt != address(0), \\\"ResiRegistry: INVALID SBT ADDRESS\\\");\\n        seriesSBTs[activeSerieId] = _sbt;\\n        emit SerieSBTSet(activeSerieId, _sbt);\\n    }\\n\\n    /**\\n     * @dev Increase serie supply. Only performed by ResiToken\\n     * @param _serieId serie id\\n     * @param _amount amount to increase\\n     */\\n    function increaseSerieSupply(uint256 _serieId, uint256 _amount) external onlyRESIToken nonReentrant {\\n        _increaseSerieSupply(_serieId, _amount);\\n    }\\n\\n    /**\\n     *\\n     * @dev Decrease serie supply. Only performed by ResiToken\\n     * @param _serieId serie id\\n     * @param _amount amount to decrease\\n     */\\n    function decreaseSerieSupply(uint256 _serieId, uint256 _amount) external onlyRESIToken nonReentrant {\\n        _decreaseSerieSupply(_serieId, _amount);\\n    }\\n\\n    /**\\n     * @dev Close serie. This will mean all kind of operations to a serie could not be done anymore.\\n     */\\n    function closeSerie() external onlyOwner {\\n        require(series[activeSerieId].created, \\\"ResiRegistry: SERIE NOT CREATED YET\\\");\\n        require(block.timestamp >= series[activeSerieId].endDate, \\\"ResiRegistry: SERIE STILL ACTIVE\\\");\\n        series[activeSerieId].active = false;\\n        emit SerieClosed(activeSerieId);\\n    }\\n\\n    /**\\n     * @dev\\n     * @param _serieId serie id\\n     * @param _amount amount to withdrawn from vault\\n     * @param _to address who will receive the assets\\n     */\\n    function withdrawFromVault(uint256 _serieId, uint256 _amount, address _to) external onlyRESIToken {\\n        require(!series[_serieId].active, \\\"ResiRegistry: SERIE STILL ACTIVE\\\");\\n        require(_amount > 0, \\\"ResiRegistry: INVALID AMOUNT\\\");\\n        require(_to != address(0), \\\"ResiRegistry: INVALID RECEIVER\\\");\\n        require(series[_serieId].currentSupply > 0, \\\"ResiRegistry: NO MORE SUPPLY TO WITHDRAW\\\");\\n        require(series[_serieId].currentSupply - _amount > 0, \\\"ResiRegistry: INVALID WITHDRAW AMOUNT\\\");\\n\\n        address vaultToken = IResiVault(series[_serieId].vault).getMainToken();\\n\\n        uint256 beforeBalance = IERC20(vaultToken).balanceOf(address(this));\\n        IResiVault(series[_serieId].vault).release(_amount);\\n        uint256 afterBalance = IERC20(vaultToken).balanceOf(address(this));\\n\\n        require(afterBalance > beforeBalance, \\\"ResiRegistry: SOMETHING WENT WRONG WITHDRAWING FROM VAULT\\\");\\n\\n        IERC20(vaultToken).safeTransfer(_to, afterBalance);\\n\\n        emit WithdrawFromVault(_serieId, _amount, _to);\\n    }\\n\\n    /**************************** INTERNALS  ****************************/\\n\\n    /**\\n     * @dev performs security check before adding a new serie\\n     * @param _startDate timestamp serie will start\\n     * @param _endDate tiemstamp serie will end\\n     * @param _numberOfProjects number of projects allowed to be in the serie\\n     * @param _maxSupply max supply to emit through serie\\n     * @param _vault vault address\\n     */\\n    function _checkSerie(\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address _vault\\n    ) internal view onlyOwner {\\n        require(!(series[activeSerieId].active), \\\"ResiRegistry: CURRENT SERIE IS NOT CLOSED YET\\\");\\n        require(_startDate >= block.timestamp, \\\"ResiRegistry: INVALID START DATE\\\");\\n        require(_endDate >= _startDate, \\\"ResiRegistry: INVALID END DATE\\\");\\n        require(_numberOfProjects > 0, \\\"ResiRegistry: PROJECTS MUST BE MORE THAN ZERO\\\");\\n        require(_maxSupply > 0, \\\"ResiRegistry: MAX SUPPLY TO EMIT MSUT BE GREATER THAN ZERO\\\");\\n        require(_vault != address(0), \\\"ResiRegistry: INVALID VAULT CONTRACT\\\");\\n        // TODO: review here require(isContract(_vault), \\\"VAULT MUST BE CONTRACT\\\");\\n    }\\n\\n    /**\\n     * @dev internal function for addProject\\n     * @param _name project name\\n     */\\n    function _addProject(bytes32 _name) internal onlyOwner {\\n        require(series[activeSerieId].created, \\\"ResiRegistry: SERIE INACTIVE\\\");\\n        require(_name != bytes32(0), \\\"ResiRegistry: INVALID NAME\\\");\\n        require(\\n            series[activeSerieId].currentProjects < series[activeSerieId].numberOfProjects,\\n            \\\"ResiRegistry: MAX PROJECTS SERIES REACHED\\\"\\n        );\\n        series[activeSerieId].currentProjects++;\\n        Project memory newProject = Project({serie: activeSerieId, active: true});\\n        projects[_name] = newProject;\\n        emit ProjectAdded(_name, activeSerieId);\\n    }\\n\\n    /**\\n     * @dev private function for increaseSerieSupply\\n     * @param _serieId serie id\\n     * @param _amount amount to increase\\n     */\\n    function _increaseSerieSupply(uint256 _serieId, uint256 _amount) private {\\n        require(series[_serieId].created, \\\"ResiRegistry: INVALID SERIE\\\");\\n        require(series[_serieId].active, \\\"ResiRegistry: SERIE INACTIVE\\\");\\n        require(_amount > 0, \\\"ResiRegistry: INVALID AMOUNT\\\");\\n        require(\\n            series[_serieId].currentSupply + _amount <= series[_serieId].maxSupply,\\n            \\\"ResiRegistry: Amount will exceed serie max supply\\\"\\n        );\\n        uint256 oldSupply = series[_serieId].currentSupply;\\n        series[_serieId].currentSupply += _amount;\\n        emit SerieSupplyUpdated(oldSupply, series[_serieId].currentSupply);\\n    }\\n\\n    /**\\n     * @dev private function for decreaseSerieSupply\\n     * @param _serieId serie id\\n     * @param _amount amount to decrease\\n     */\\n    function _decreaseSerieSupply(uint256 _serieId, uint256 _amount) private {\\n        require(series[_serieId].created, \\\"ResiRegistry: INVALID SERIE\\\");\\n        require(_amount > 0, \\\"ResiRegistry: INVALID AMOUNT\\\");\\n        uint256 oldSupply = series[_serieId].currentSupply;\\n        series[_serieId].currentSupply -= _amount;\\n        emit SerieSupplyUpdated(oldSupply, series[_serieId].currentSupply);\\n    }\\n\\n    /**\\n     * @dev Modifier to perform actions only by ResiToken contract\\n     */\\n    modifier onlyRESIToken() {\\n        require(_msgSender() == RESI_TOKEN, \\\"ResiRegistry: ONLY RESI TOKEN\\\");\\n        _;\\n    }\\n\\n    /// @dev Leave a gap betweeen inherited contracts variables in order\\n    /// @dev to be able to add more variables in them later.\\n    uint256[20] private upgradeGap;\\n}\\n\",\"keccak256\":\"0xf077983c437a77913ec4320d52ee0a17a16647b48d4e4edfad2748e9188524fb\",\"license\":\"MIT\"},\"contracts/interfaces/IResiRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiRegistry {\\n    struct Serie {\\n        bool active;\\n        bool created;\\n        uint256 id;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 currentProjects;\\n        uint256 numberOfProjects;\\n        uint256 currentSupply;\\n        uint256 maxSupply;\\n        address vault;\\n    }\\n\\n    struct Project {\\n        uint256 serie;\\n        bool active;\\n    }\\n\\n    function createSerie(\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address _vault\\n    ) external;\\n\\n    function addProject(bytes32 _name) external;\\n\\n    function addProjects(bytes32[] memory names) external;\\n\\n    function disableProject(bytes32 _name) external;\\n\\n    function increaseSerieSupply(uint256 _serieId, uint256 _amount) external;\\n\\n    function decreaseSerieSupply(uint256 _serieId, uint256 _amount) external;\\n\\n    function closeSerie() external;\\n\\n    function activeSerie() external view returns (uint256 id);\\n\\n    function isValidProject(uint256 _serie, bytes32 _project) external view returns (bool);\\n\\n    function isValidProject(bytes32 _project) external view returns (bool);\\n\\n    function getSBTSerie() external view returns (address);\\n\\n    function getSerieState(uint256 _serieId) external view returns (bool, uint256);\\n\\n    function getSerieSupply(uint256 _serieId) external view returns (uint256);\\n\\n    function getSBTSerie(uint256 _serieId) external view returns (address);\\n\\n    function getTreasuryVault() external view returns (address);\\n\\n    function withdrawFromVault(uint256 _serieId, uint256 _amount, address _to) external;\\n\\n    /// @notice Emitted when the Registry is initialized.\\n    event RegistryInitialized();\\n\\n    /// @notice Emitted when Resi Token Contract is set on Contract\\n    /// @param _resiToken Resi Token address\\n    event ResiTokenSet(address indexed _resiToken);\\n\\n    /// @notice Emitted when Treasury Vault address is set on Contract\\n    /// @param _treasuryVault Treasury Vault address\\n    event TreasuryVaultSet(address indexed _treasuryVault);\\n\\n    event SerieSBTSet(uint256 activeSerieId, address indexed _sbt);\\n\\n    event SerieCreated(\\n        uint256 _id,\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address indexed _vault\\n    );\\n\\n    event SerieSupplyUpdated(uint256 oldSupply, uint256 newSupply);\\n\\n    event SerieClosed(uint256 _id);\\n\\n    event ProjectAdded(bytes32 _name, uint256 serieId);\\n\\n    event ProjectDisabled(bytes32 _name);\\n\\n    event WithdrawFromVault(uint256 _serieId, uint256 _amount, address indexed _to);\\n}\\n\",\"keccak256\":\"0x6660a3032d41f2b28a0256ef1d7bc5fa469766fb0490d33e6b9c976e8fe7baea\",\"license\":\"MIT\"},\"contracts/interfaces/IResiVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiVault {\\n    function getMainToken() external view returns (address);\\n\\n    function release(uint256 _amount) external;\\n\\n    event ResiVaultInitialized(uint256 _serieId, address indexed _token, address indexed _resiToken);\\n    event MainTokenUpdated(address indexed oldToken, address indexed TOKEN);\\n    event TokenAdded(bytes32 _name, address indexed _token);\\n    event TokenRemoved(bytes32 _name, address indexed _token);\\n    event EtherReceived(address indexed _from, uint256 _value);\\n    event TokenReleased(address indexed TOKEN, uint256 _amount);\\n}\\n\",\"keccak256\":\"0xa8efb7b165468f65cbe31dfc16dbdf4ebc38a539676129b388febcf1eb1c76ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614009806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806391f87116116100f9578063d5f80c3411610097578063dc22cb6a11610071578063dc22cb6a1461047f578063e7f7dbef146104b8578063ef3b0b07146104d4578063f2fde38b14610505576101a9565b8063d5f80c3414610429578063d67ed2fa14610445578063dafda8dd14610461576101a9565b8063a9c3381b116100d3578063a9c3381b1461038c578063b3c299bb146103aa578063b96ea12d146103da578063be71e4261461040b576101a9565b806391f871161461034a578063a00377dd14610366578063a09a153914610370576101a9565b80634e45eb59116101665780637e8625fd116101405780637e8625fd146102e85780638129fc1c146103065780638da5cb5b146103105780638ebd81961461032e576101a9565b80634e45eb59146102a657806350733a39146102c2578063715018a6146102de576101a9565b806303f47d0e146101ae5780630cb5af6f146101ca57806317d87a95146101e65780632ae202c1146102165780632bf8a771146102465780634407220614610276575b600080fd5b6101c860048036038101906101c39190612641565b610521565b005b6101e460048036038101906101df91906126cc565b610535565b005b61020060048036038101906101fb919061272f565b6106b8565b60405161020d919061276b565b60405180910390f35b610230600480360381019061022b919061272f565b6106d8565b60405161023d9190612795565b60405180910390f35b610260600480360381019061025b919061272f565b610715565b60405161026d9190612795565b60405180910390f35b610290600480360381019061028b91906127b0565b610748565b60405161029d919061280b565b60405180910390f35b6102c060048036038101906102bb919061297f565b6107b7565b005b6102dc60048036038101906102d791906129c8565b610805565b005b6102e66108ba565b005b6102f06108ce565b6040516102fd9190612795565b60405180910390f35b61030e6108f4565b005b610318610a6e565b6040516103259190612795565b60405180910390f35b61034860048036038101906103439190612641565b610a98565b005b610364600480360381019061035f9190612a08565b610b09565b005b61036e61107e565b005b61038a60048036038101906103859190612a5b565b6111b2565b005b610394611393565b6040516103a19190612795565b60405180910390f35b6103c460048036038101906103bf9190612641565b6113bd565b6040516103d1919061280b565b60405180910390f35b6103f460048036038101906103ef9190612641565b61143c565b604051610402929190612ad6565b60405180910390f35b61041361146d565b604051610420919061276b565b60405180910390f35b610443600480360381019061043e91906126cc565b611477565b005b61045f600480360381019061045a91906126cc565b611575565b005b610469611673565b6040516104769190612795565b60405180910390f35b6104996004803603810190610494919061272f565b6116b0565b6040516104af9a99989796959493929190612aff565b60405180910390f35b6104d260048036038101906104cd91906129c8565b61173e565b005b6104ee60048036038101906104e9919061272f565b6117f3565b6040516104fc929190612b9b565b60405180910390f35b61051f600480360381019061051a91906126cc565b611846565b005b6105296118c9565b61053281611947565b50565b61053d6118c9565b609a6000609954815260200190815260200160002060000160009054906101000a900460ff166105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059990612c21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890612cb3565b60405180910390fd5b80609b6000609954815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167ff5f4129add61a597ce7d00a6669a49e53babe41a7d6f376a3ac3a805dde652ee6099546040516106ad919061276b565b60405180910390a250565b6000609a6000838152602001908152602001600020600601549050919050565b6000609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b609b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609954831480156107725750609954609c600084815260200190815260200160002060000154145b801561079e5750609c600083815260200190815260200160002060010160009054906101000a900460ff165b156107ac57600190506107b1565b600090505b92915050565b6107bf6118c9565b60005b8151811015610801576107ee8282815181106107e1576107e0612cd3565b5b6020026020010151611947565b80806107f990612d31565b9150506107c2565b5050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610846611b37565b73ffffffffffffffffffffffffffffffffffffffff161461089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390612dc5565b60405180910390fd5b6108a4611b3f565b6108ae8282611b8e565b6108b6611cd0565b5050565b6108c26118c9565b6108cc6000611cda565b565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156109255750600160008054906101000a900460ff1660ff16105b80610952575061093430611da0565b1580156109515750600160008054906101000a900460ff1660ff16145b5b610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098890612e57565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156109ce576001600060016101000a81548160ff0219169083151502179055505b6109d6611dc3565b6109de611e14565b6109e6611e75565b7f03594a053bbc6713aeed4f116d60f3aacfe2ae4c44914b326871679b08b7b88760405160405180910390a18015610a6b5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610a629190612ec9565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610aa06118c9565b6000609c600083815260200190815260200160002060010160006101000a81548160ff0219169083151502179055507ffa5a404bce018059f49e319ea7e00c665503f623982474810d83c4376ba3180381604051610afe9190612ef3565b60405180910390a150565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b4a611b37565b73ffffffffffffffffffffffffffffffffffffffff1614610ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9790612dc5565b60405180910390fd5b609a600084815260200190815260200160002060000160009054906101000a900460ff1615610c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfb90612f5a565b60405180910390fd5b60008211610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90612fc6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cad90613032565b60405180910390fd5b6000609a60008581526020019081526020016000206006015411610d0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d06906130c4565b60405180910390fd5b600082609a600086815260200190815260200160002060060154610d3391906130e4565b11610d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6a9061318a565b60405180910390fd5b6000609a600085815260200190815260200160002060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634de046d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1a91906131bf565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e579190612795565b602060405180830381865afa158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190613201565b9050609a600086815260200190815260200160002060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337bdc99b856040518263ffffffff1660e01b8152600401610f09919061276b565b600060405180830381600087803b158015610f2357600080fd5b505af1158015610f37573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f769190612795565b602060405180830381865afa158015610f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb79190613201565b9050818111610ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff2906132a0565b60405180910390fd5b61102684828573ffffffffffffffffffffffffffffffffffffffff16611ece9092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff167f7f25e6c4bc5a1d2851c4bdf3fd8766c9066854588cac2e90c585df016add0bdd878760405161106e9291906132c0565b60405180910390a2505050505050565b6110866118c9565b609a6000609954815260200190815260200160002060000160019054906101000a900460ff166110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e29061335b565b60405180910390fd5b609a6000609954815260200190815260200160002060030154421015611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113d90612f5a565b60405180910390fd5b6000609a6000609954815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507f0a6473c23ecdd8cee7cddb864d39b3a53701824e759a37e6dcf9e1b6507ff94b6099546040516111a8919061276b565b60405180910390a1565b6111ba6118c9565b6111c78585858585611f54565b6001609960008282546111da919061337b565b925050819055506000604051806101400160405280600115158152602001600115158152602001609954815260200187815260200186815260200160008152602001858152602001600081526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815250905080609a6000609954815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010155606082015181600201556080820151816003015560a0820151816004015560c0820151816005015560e0820151816006015561010082015181600701556101208201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508173ffffffffffffffffffffffffffffffffffffffff167fbbc767dc9cc223260ba001b91870d842067de873462ecc9938251d03ad96979c609954888888886040516113839594939291906133af565b60405180910390a2505050505050565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080609c6000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900460ff1615151515815250509050609954816000015114801561142257506001151581602001511515145b15611431576001915050611437565b60009150505b919050565b609c6020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b6000609954905090565b61147f6118c9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e590613474565b60405180910390fd5b80609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f7b23bd31f405e09a43804fe266d4b6c17f4f4369ff5f43f71452c76aa43620ac60405160405180910390a250565b61157d6118c9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e390613506565b60405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f4880e5564048c2c1ac9ad54babcacdde9139609bf41d987be32cc7e3e25ec24260405160405180910390a250565b6000609b6000609954815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609a6020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508a565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661177f611b37565b73ffffffffffffffffffffffffffffffffffffffff16146117d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cc90612dc5565b60405180910390fd5b6117dd611b3f565b6117e78282612144565b6117ef611cd0565b5050565b6000806000609a600085815260200190815260200160002060000160009054906101000a900460ff1690506000609a60008681526020019081526020016000206006015490508181935093505050915091565b61184e6118c9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b490613598565b60405180910390fd5b6118c681611cda565b50565b6118d1611b37565b73ffffffffffffffffffffffffffffffffffffffff166118ef610a6e565b73ffffffffffffffffffffffffffffffffffffffff1614611945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193c90613604565b60405180910390fd5b565b61194f6118c9565b609a6000609954815260200190815260200160002060000160019054906101000a900460ff166119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ab90613670565b60405180910390fd5b6000801b81036119f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f0906136dc565b60405180910390fd5b609a6000609954815260200190815260200160002060050154609a600060995481526020019081526020016000206004015410611a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a629061376e565b60405180910390fd5b609a600060995481526020019081526020016000206004016000815480929190611a9490612d31565b919050555060006040518060400160405280609954815260200160011515815250905080609c60008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050507f2026eb4ead935b1ec4705eec3a3e0bba66677a04106e89d219299ba5a530f90982609954604051611b2b92919061378e565b60405180910390a15050565b600033905090565b600260655403611b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7b90613803565b60405180910390fd5b6002606581905550565b609a600083815260200190815260200160002060000160019054906101000a900460ff16611bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be89061386f565b60405180910390fd5b60008111611c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2b90612fc6565b60405180910390fd5b6000609a600084815260200190815260200160002060060154905081609a60008581526020019081526020016000206006016000828254611c7591906130e4565b925050819055507f2947177019328ce12f84dcb1f5ea7f24cd1656071817fab6f62eea726d1b171b81609a600086815260200190815260200160002060060154604051611cc39291906132c0565b60405180910390a1505050565b6001606581905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0990613901565b60405180910390fd5b565b600060019054906101000a900460ff16611e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5a90613901565b60405180910390fd5b611e73611e6e611b37565b611cda565b565b600060019054906101000a900460ff16611ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebb90613901565b60405180910390fd5b6001606581905550565b611f4f8363a9059cbb60e01b8484604051602401611eed929190613921565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612363565b505050565b611f5c6118c9565b609a6000609954815260200190815260200160002060000160009054906101000a900460ff1615611fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb9906139bc565b60405180910390fd5b42851015612005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffc90613a28565b60405180910390fd5b84841015612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203f90613a94565b60405180910390fd5b6000831161208b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208290613b26565b60405180910390fd5b600082116120ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c590613bb8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361213d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213490613c4a565b60405180910390fd5b5050505050565b609a600083815260200190815260200160002060000160019054906101000a900460ff166121a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219e9061386f565b60405180910390fd5b609a600083815260200190815260200160002060000160009054906101000a900460ff1661220a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220190613670565b60405180910390fd5b6000811161224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224490612fc6565b60405180910390fd5b609a60008381526020019081526020016000206007015481609a600085815260200190815260200160002060060154612286919061337b565b11156122c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122be90613cdc565b60405180910390fd5b6000609a600084815260200190815260200160002060060154905081609a60008581526020019081526020016000206006016000828254612308919061337b565b925050819055507f2947177019328ce12f84dcb1f5ea7f24cd1656071817fab6f62eea726d1b171b81609a6000868152602001908152602001600020600601546040516123569291906132c0565b60405180910390a1505050565b60006123c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661242a9092919063ffffffff16565b905060008151111561242557808060200190518101906123e59190613d28565b612424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241b90613dc7565b60405180910390fd5b5b505050565b60606124398484600085612442565b90509392505050565b606082471015612487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247e90613e59565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124b09190613eea565b60006040518083038185875af1925050503d80600081146124ed576040519150601f19603f3d011682016040523d82523d6000602084013e6124f2565b606091505b50915091506125038783838761250f565b92505050949350505050565b606083156125715760008351036125695761252985612584565b612568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255f90613f4d565b60405180910390fd5b5b82905061257c565b61257b83836125a7565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156125ba5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ee9190613fb1565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61261e8161260b565b811461262957600080fd5b50565b60008135905061263b81612615565b92915050565b60006020828403121561265757612656612601565b5b60006126658482850161262c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126998261266e565b9050919050565b6126a98161268e565b81146126b457600080fd5b50565b6000813590506126c6816126a0565b92915050565b6000602082840312156126e2576126e1612601565b5b60006126f0848285016126b7565b91505092915050565b6000819050919050565b61270c816126f9565b811461271757600080fd5b50565b60008135905061272981612703565b92915050565b60006020828403121561274557612744612601565b5b60006127538482850161271a565b91505092915050565b612765816126f9565b82525050565b6000602082019050612780600083018461275c565b92915050565b61278f8161268e565b82525050565b60006020820190506127aa6000830184612786565b92915050565b600080604083850312156127c7576127c6612601565b5b60006127d58582860161271a565b92505060206127e68582860161262c565b9150509250929050565b60008115159050919050565b612805816127f0565b82525050565b600060208201905061282060008301846127fc565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128748261282b565b810181811067ffffffffffffffff821117156128935761289261283c565b5b80604052505050565b60006128a66125f7565b90506128b2828261286b565b919050565b600067ffffffffffffffff8211156128d2576128d161283c565b5b602082029050602081019050919050565b600080fd5b60006128fb6128f6846128b7565b61289c565b9050808382526020820190506020840283018581111561291e5761291d6128e3565b5b835b818110156129475780612933888261262c565b845260208401935050602081019050612920565b5050509392505050565b600082601f83011261296657612965612826565b5b81356129768482602086016128e8565b91505092915050565b60006020828403121561299557612994612601565b5b600082013567ffffffffffffffff8111156129b3576129b2612606565b5b6129bf84828501612951565b91505092915050565b600080604083850312156129df576129de612601565b5b60006129ed8582860161271a565b92505060206129fe8582860161271a565b9150509250929050565b600080600060608486031215612a2157612a20612601565b5b6000612a2f8682870161271a565b9350506020612a408682870161271a565b9250506040612a51868287016126b7565b9150509250925092565b600080600080600060a08688031215612a7757612a76612601565b5b6000612a858882890161271a565b9550506020612a968882890161271a565b9450506040612aa78882890161271a565b9350506060612ab88882890161271a565b9250506080612ac9888289016126b7565b9150509295509295909350565b6000604082019050612aeb600083018561275c565b612af860208301846127fc565b9392505050565b600061014082019050612b15600083018d6127fc565b612b22602083018c6127fc565b612b2f604083018b61275c565b612b3c606083018a61275c565b612b49608083018961275c565b612b5660a083018861275c565b612b6360c083018761275c565b612b7060e083018661275c565b612b7e61010083018561275c565b612b8c610120830184612786565b9b9a5050505050505050505050565b6000604082019050612bb060008301856127fc565b612bbd602083018461275c565b9392505050565b600082825260208201905092915050565b7f5265736952656769737472793a205345524945204e4f54204143544956450000600082015250565b6000612c0b601e83612bc4565b9150612c1682612bd5565b602082019050919050565b60006020820190508181036000830152612c3a81612bfe565b9050919050565b7f5265736952656769737472793a20494e56414c4944205342542041444452455360008201527f5300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c9d602183612bc4565b9150612ca882612c41565b604082019050919050565b60006020820190508181036000830152612ccc81612c90565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d3c826126f9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d6e57612d6d612d02565b5b600182019050919050565b7f5265736952656769737472793a204f4e4c59205245534920544f4b454e000000600082015250565b6000612daf601d83612bc4565b9150612dba82612d79565b602082019050919050565b60006020820190508181036000830152612dde81612da2565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612e41602e83612bc4565b9150612e4c82612de5565b604082019050919050565b60006020820190508181036000830152612e7081612e34565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612eb3612eae612ea984612e77565b612e8e565b612e81565b9050919050565b612ec381612e98565b82525050565b6000602082019050612ede6000830184612eba565b92915050565b612eed8161260b565b82525050565b6000602082019050612f086000830184612ee4565b92915050565b7f5265736952656769737472793a205345524945205354494c4c20414354495645600082015250565b6000612f44602083612bc4565b9150612f4f82612f0e565b602082019050919050565b60006020820190508181036000830152612f7381612f37565b9050919050565b7f5265736952656769737472793a20494e56414c494420414d4f554e5400000000600082015250565b6000612fb0601c83612bc4565b9150612fbb82612f7a565b602082019050919050565b60006020820190508181036000830152612fdf81612fa3565b9050919050565b7f5265736952656769737472793a20494e56414c49442052454345495645520000600082015250565b600061301c601e83612bc4565b915061302782612fe6565b602082019050919050565b6000602082019050818103600083015261304b8161300f565b9050919050565b7f5265736952656769737472793a204e4f204d4f524520535550504c5920544f2060008201527f5749544844524157000000000000000000000000000000000000000000000000602082015250565b60006130ae602883612bc4565b91506130b982613052565b604082019050919050565b600060208201905081810360008301526130dd816130a1565b9050919050565b60006130ef826126f9565b91506130fa836126f9565b925082820390508181111561311257613111612d02565b5b92915050565b7f5265736952656769737472793a20494e56414c4944205749544844524157204160008201527f4d4f554e54000000000000000000000000000000000000000000000000000000602082015250565b6000613174602583612bc4565b915061317f82613118565b604082019050919050565b600060208201905081810360008301526131a381613167565b9050919050565b6000815190506131b9816126a0565b92915050565b6000602082840312156131d5576131d4612601565b5b60006131e3848285016131aa565b91505092915050565b6000815190506131fb81612703565b92915050565b60006020828403121561321757613216612601565b5b6000613225848285016131ec565b91505092915050565b7f5265736952656769737472793a20534f4d455448494e472057454e542057524f60008201527f4e47205749544844524157494e472046524f4d205641554c5400000000000000602082015250565b600061328a603983612bc4565b91506132958261322e565b604082019050919050565b600060208201905081810360008301526132b98161327d565b9050919050565b60006040820190506132d5600083018561275c565b6132e2602083018461275c565b9392505050565b7f5265736952656769737472793a205345524945204e4f5420435245415445442060008201527f5945540000000000000000000000000000000000000000000000000000000000602082015250565b6000613345602383612bc4565b9150613350826132e9565b604082019050919050565b6000602082019050818103600083015261337481613338565b9050919050565b6000613386826126f9565b9150613391836126f9565b92508282019050808211156133a9576133a8612d02565b5b92915050565b600060a0820190506133c4600083018861275c565b6133d1602083018761275c565b6133de604083018661275c565b6133eb606083018561275c565b6133f8608083018461275c565b9695505050505050565b7f5265736952656769737472793a20494e56414c4944205641554c54204144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b600061345e602383612bc4565b915061346982613402565b604082019050919050565b6000602082019050818103600083015261348d81613451565b9050919050565b7f5265736952656769737472793a20494e56414c494420544f4b454e204144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b60006134f0602383612bc4565b91506134fb82613494565b604082019050919050565b6000602082019050818103600083015261351f816134e3565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613582602683612bc4565b915061358d82613526565b604082019050919050565b600060208201905081810360008301526135b181613575565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006135ee602083612bc4565b91506135f9826135b8565b602082019050919050565b6000602082019050818103600083015261361d816135e1565b9050919050565b7f5265736952656769737472793a20534552494520494e41435449564500000000600082015250565b600061365a601c83612bc4565b915061366582613624565b602082019050919050565b600060208201905081810360008301526136898161364d565b9050919050565b7f5265736952656769737472793a20494e56414c4944204e414d45000000000000600082015250565b60006136c6601a83612bc4565b91506136d182613690565b602082019050919050565b600060208201905081810360008301526136f5816136b9565b9050919050565b7f5265736952656769737472793a204d41582050524f4a4543545320534552494560008201527f5320524541434845440000000000000000000000000000000000000000000000602082015250565b6000613758602983612bc4565b9150613763826136fc565b604082019050919050565b600060208201905081810360008301526137878161374b565b9050919050565b60006040820190506137a36000830185612ee4565b6137b0602083018461275c565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006137ed601f83612bc4565b91506137f8826137b7565b602082019050919050565b6000602082019050818103600083015261381c816137e0565b9050919050565b7f5265736952656769737472793a20494e56414c49442053455249450000000000600082015250565b6000613859601b83612bc4565b915061386482613823565b602082019050919050565b600060208201905081810360008301526138888161384c565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006138eb602b83612bc4565b91506138f68261388f565b604082019050919050565b6000602082019050818103600083015261391a816138de565b9050919050565b60006040820190506139366000830185612786565b613943602083018461275c565b9392505050565b7f5265736952656769737472793a2043555252454e54205345524945204953204e60008201527f4f5420434c4f5345442059455400000000000000000000000000000000000000602082015250565b60006139a6602d83612bc4565b91506139b18261394a565b604082019050919050565b600060208201905081810360008301526139d581613999565b9050919050565b7f5265736952656769737472793a20494e56414c49442053544152542044415445600082015250565b6000613a12602083612bc4565b9150613a1d826139dc565b602082019050919050565b60006020820190508181036000830152613a4181613a05565b9050919050565b7f5265736952656769737472793a20494e56414c494420454e4420444154450000600082015250565b6000613a7e601e83612bc4565b9150613a8982613a48565b602082019050919050565b60006020820190508181036000830152613aad81613a71565b9050919050565b7f5265736952656769737472793a2050524f4a45435453204d555354204245204d60008201527f4f5245205448414e205a45524f00000000000000000000000000000000000000602082015250565b6000613b10602d83612bc4565b9150613b1b82613ab4565b604082019050919050565b60006020820190508181036000830152613b3f81613b03565b9050919050565b7f5265736952656769737472793a204d415820535550504c5920544f20454d495460008201527f204d5355542042452047524541544552205448414e205a45524f000000000000602082015250565b6000613ba2603a83612bc4565b9150613bad82613b46565b604082019050919050565b60006020820190508181036000830152613bd181613b95565b9050919050565b7f5265736952656769737472793a20494e56414c4944205641554c5420434f4e5460008201527f5241435400000000000000000000000000000000000000000000000000000000602082015250565b6000613c34602483612bc4565b9150613c3f82613bd8565b604082019050919050565b60006020820190508181036000830152613c6381613c27565b9050919050565b7f5265736952656769737472793a20416d6f756e742077696c6c2065786365656460008201527f207365726965206d617820737570706c79000000000000000000000000000000602082015250565b6000613cc6603183612bc4565b9150613cd182613c6a565b604082019050919050565b60006020820190508181036000830152613cf581613cb9565b9050919050565b613d05816127f0565b8114613d1057600080fd5b50565b600081519050613d2281613cfc565b92915050565b600060208284031215613d3e57613d3d612601565b5b6000613d4c84828501613d13565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613db1602a83612bc4565b9150613dbc82613d55565b604082019050919050565b60006020820190508181036000830152613de081613da4565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613e43602683612bc4565b9150613e4e82613de7565b604082019050919050565b60006020820190508181036000830152613e7281613e36565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015613ead578082015181840152602081019050613e92565b60008484015250505050565b6000613ec482613e79565b613ece8185613e84565b9350613ede818560208601613e8f565b80840191505092915050565b6000613ef68284613eb9565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613f37601d83612bc4565b9150613f4282613f01565b602082019050919050565b60006020820190508181036000830152613f6681613f2a565b9050919050565b600081519050919050565b6000613f8382613f6d565b613f8d8185612bc4565b9350613f9d818560208601613e8f565b613fa68161282b565b840191505092915050565b60006020820190508181036000830152613fcb8184613f78565b90509291505056fea26469706673582212200f1df02bcbb58acb2fe2ab9e565eddbc5a8f786ba0be229d880676a789c53ef764736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806391f87116116100f9578063d5f80c3411610097578063dc22cb6a11610071578063dc22cb6a1461047f578063e7f7dbef146104b8578063ef3b0b07146104d4578063f2fde38b14610505576101a9565b8063d5f80c3414610429578063d67ed2fa14610445578063dafda8dd14610461576101a9565b8063a9c3381b116100d3578063a9c3381b1461038c578063b3c299bb146103aa578063b96ea12d146103da578063be71e4261461040b576101a9565b806391f871161461034a578063a00377dd14610366578063a09a153914610370576101a9565b80634e45eb59116101665780637e8625fd116101405780637e8625fd146102e85780638129fc1c146103065780638da5cb5b146103105780638ebd81961461032e576101a9565b80634e45eb59146102a657806350733a39146102c2578063715018a6146102de576101a9565b806303f47d0e146101ae5780630cb5af6f146101ca57806317d87a95146101e65780632ae202c1146102165780632bf8a771146102465780634407220614610276575b600080fd5b6101c860048036038101906101c39190612641565b610521565b005b6101e460048036038101906101df91906126cc565b610535565b005b61020060048036038101906101fb919061272f565b6106b8565b60405161020d919061276b565b60405180910390f35b610230600480360381019061022b919061272f565b6106d8565b60405161023d9190612795565b60405180910390f35b610260600480360381019061025b919061272f565b610715565b60405161026d9190612795565b60405180910390f35b610290600480360381019061028b91906127b0565b610748565b60405161029d919061280b565b60405180910390f35b6102c060048036038101906102bb919061297f565b6107b7565b005b6102dc60048036038101906102d791906129c8565b610805565b005b6102e66108ba565b005b6102f06108ce565b6040516102fd9190612795565b60405180910390f35b61030e6108f4565b005b610318610a6e565b6040516103259190612795565b60405180910390f35b61034860048036038101906103439190612641565b610a98565b005b610364600480360381019061035f9190612a08565b610b09565b005b61036e61107e565b005b61038a60048036038101906103859190612a5b565b6111b2565b005b610394611393565b6040516103a19190612795565b60405180910390f35b6103c460048036038101906103bf9190612641565b6113bd565b6040516103d1919061280b565b60405180910390f35b6103f460048036038101906103ef9190612641565b61143c565b604051610402929190612ad6565b60405180910390f35b61041361146d565b604051610420919061276b565b60405180910390f35b610443600480360381019061043e91906126cc565b611477565b005b61045f600480360381019061045a91906126cc565b611575565b005b610469611673565b6040516104769190612795565b60405180910390f35b6104996004803603810190610494919061272f565b6116b0565b6040516104af9a99989796959493929190612aff565b60405180910390f35b6104d260048036038101906104cd91906129c8565b61173e565b005b6104ee60048036038101906104e9919061272f565b6117f3565b6040516104fc929190612b9b565b60405180910390f35b61051f600480360381019061051a91906126cc565b611846565b005b6105296118c9565b61053281611947565b50565b61053d6118c9565b609a6000609954815260200190815260200160002060000160009054906101000a900460ff166105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059990612c21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890612cb3565b60405180910390fd5b80609b6000609954815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167ff5f4129add61a597ce7d00a6669a49e53babe41a7d6f376a3ac3a805dde652ee6099546040516106ad919061276b565b60405180910390a250565b6000609a6000838152602001908152602001600020600601549050919050565b6000609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b609b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609954831480156107725750609954609c600084815260200190815260200160002060000154145b801561079e5750609c600083815260200190815260200160002060010160009054906101000a900460ff165b156107ac57600190506107b1565b600090505b92915050565b6107bf6118c9565b60005b8151811015610801576107ee8282815181106107e1576107e0612cd3565b5b6020026020010151611947565b80806107f990612d31565b9150506107c2565b5050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610846611b37565b73ffffffffffffffffffffffffffffffffffffffff161461089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390612dc5565b60405180910390fd5b6108a4611b3f565b6108ae8282611b8e565b6108b6611cd0565b5050565b6108c26118c9565b6108cc6000611cda565b565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156109255750600160008054906101000a900460ff1660ff16105b80610952575061093430611da0565b1580156109515750600160008054906101000a900460ff1660ff16145b5b610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098890612e57565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156109ce576001600060016101000a81548160ff0219169083151502179055505b6109d6611dc3565b6109de611e14565b6109e6611e75565b7f03594a053bbc6713aeed4f116d60f3aacfe2ae4c44914b326871679b08b7b88760405160405180910390a18015610a6b5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610a629190612ec9565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610aa06118c9565b6000609c600083815260200190815260200160002060010160006101000a81548160ff0219169083151502179055507ffa5a404bce018059f49e319ea7e00c665503f623982474810d83c4376ba3180381604051610afe9190612ef3565b60405180910390a150565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b4a611b37565b73ffffffffffffffffffffffffffffffffffffffff1614610ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9790612dc5565b60405180910390fd5b609a600084815260200190815260200160002060000160009054906101000a900460ff1615610c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfb90612f5a565b60405180910390fd5b60008211610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90612fc6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cad90613032565b60405180910390fd5b6000609a60008581526020019081526020016000206006015411610d0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d06906130c4565b60405180910390fd5b600082609a600086815260200190815260200160002060060154610d3391906130e4565b11610d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6a9061318a565b60405180910390fd5b6000609a600085815260200190815260200160002060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634de046d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1a91906131bf565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e579190612795565b602060405180830381865afa158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190613201565b9050609a600086815260200190815260200160002060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337bdc99b856040518263ffffffff1660e01b8152600401610f09919061276b565b600060405180830381600087803b158015610f2357600080fd5b505af1158015610f37573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f769190612795565b602060405180830381865afa158015610f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb79190613201565b9050818111610ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff2906132a0565b60405180910390fd5b61102684828573ffffffffffffffffffffffffffffffffffffffff16611ece9092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff167f7f25e6c4bc5a1d2851c4bdf3fd8766c9066854588cac2e90c585df016add0bdd878760405161106e9291906132c0565b60405180910390a2505050505050565b6110866118c9565b609a6000609954815260200190815260200160002060000160019054906101000a900460ff166110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e29061335b565b60405180910390fd5b609a6000609954815260200190815260200160002060030154421015611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113d90612f5a565b60405180910390fd5b6000609a6000609954815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507f0a6473c23ecdd8cee7cddb864d39b3a53701824e759a37e6dcf9e1b6507ff94b6099546040516111a8919061276b565b60405180910390a1565b6111ba6118c9565b6111c78585858585611f54565b6001609960008282546111da919061337b565b925050819055506000604051806101400160405280600115158152602001600115158152602001609954815260200187815260200186815260200160008152602001858152602001600081526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815250905080609a6000609954815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010155606082015181600201556080820151816003015560a0820151816004015560c0820151816005015560e0820151816006015561010082015181600701556101208201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508173ffffffffffffffffffffffffffffffffffffffff167fbbc767dc9cc223260ba001b91870d842067de873462ecc9938251d03ad96979c609954888888886040516113839594939291906133af565b60405180910390a2505050505050565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080609c6000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900460ff1615151515815250509050609954816000015114801561142257506001151581602001511515145b15611431576001915050611437565b60009150505b919050565b609c6020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b6000609954905090565b61147f6118c9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e590613474565b60405180910390fd5b80609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f7b23bd31f405e09a43804fe266d4b6c17f4f4369ff5f43f71452c76aa43620ac60405160405180910390a250565b61157d6118c9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e390613506565b60405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f4880e5564048c2c1ac9ad54babcacdde9139609bf41d987be32cc7e3e25ec24260405160405180910390a250565b6000609b6000609954815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609a6020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508a565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661177f611b37565b73ffffffffffffffffffffffffffffffffffffffff16146117d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cc90612dc5565b60405180910390fd5b6117dd611b3f565b6117e78282612144565b6117ef611cd0565b5050565b6000806000609a600085815260200190815260200160002060000160009054906101000a900460ff1690506000609a60008681526020019081526020016000206006015490508181935093505050915091565b61184e6118c9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b490613598565b60405180910390fd5b6118c681611cda565b50565b6118d1611b37565b73ffffffffffffffffffffffffffffffffffffffff166118ef610a6e565b73ffffffffffffffffffffffffffffffffffffffff1614611945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193c90613604565b60405180910390fd5b565b61194f6118c9565b609a6000609954815260200190815260200160002060000160019054906101000a900460ff166119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ab90613670565b60405180910390fd5b6000801b81036119f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f0906136dc565b60405180910390fd5b609a6000609954815260200190815260200160002060050154609a600060995481526020019081526020016000206004015410611a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a629061376e565b60405180910390fd5b609a600060995481526020019081526020016000206004016000815480929190611a9490612d31565b919050555060006040518060400160405280609954815260200160011515815250905080609c60008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050507f2026eb4ead935b1ec4705eec3a3e0bba66677a04106e89d219299ba5a530f90982609954604051611b2b92919061378e565b60405180910390a15050565b600033905090565b600260655403611b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7b90613803565b60405180910390fd5b6002606581905550565b609a600083815260200190815260200160002060000160019054906101000a900460ff16611bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be89061386f565b60405180910390fd5b60008111611c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2b90612fc6565b60405180910390fd5b6000609a600084815260200190815260200160002060060154905081609a60008581526020019081526020016000206006016000828254611c7591906130e4565b925050819055507f2947177019328ce12f84dcb1f5ea7f24cd1656071817fab6f62eea726d1b171b81609a600086815260200190815260200160002060060154604051611cc39291906132c0565b60405180910390a1505050565b6001606581905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0990613901565b60405180910390fd5b565b600060019054906101000a900460ff16611e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5a90613901565b60405180910390fd5b611e73611e6e611b37565b611cda565b565b600060019054906101000a900460ff16611ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebb90613901565b60405180910390fd5b6001606581905550565b611f4f8363a9059cbb60e01b8484604051602401611eed929190613921565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612363565b505050565b611f5c6118c9565b609a6000609954815260200190815260200160002060000160009054906101000a900460ff1615611fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb9906139bc565b60405180910390fd5b42851015612005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffc90613a28565b60405180910390fd5b84841015612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203f90613a94565b60405180910390fd5b6000831161208b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208290613b26565b60405180910390fd5b600082116120ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c590613bb8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361213d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213490613c4a565b60405180910390fd5b5050505050565b609a600083815260200190815260200160002060000160019054906101000a900460ff166121a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219e9061386f565b60405180910390fd5b609a600083815260200190815260200160002060000160009054906101000a900460ff1661220a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220190613670565b60405180910390fd5b6000811161224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224490612fc6565b60405180910390fd5b609a60008381526020019081526020016000206007015481609a600085815260200190815260200160002060060154612286919061337b565b11156122c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122be90613cdc565b60405180910390fd5b6000609a600084815260200190815260200160002060060154905081609a60008581526020019081526020016000206006016000828254612308919061337b565b925050819055507f2947177019328ce12f84dcb1f5ea7f24cd1656071817fab6f62eea726d1b171b81609a6000868152602001908152602001600020600601546040516123569291906132c0565b60405180910390a1505050565b60006123c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661242a9092919063ffffffff16565b905060008151111561242557808060200190518101906123e59190613d28565b612424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241b90613dc7565b60405180910390fd5b5b505050565b60606124398484600085612442565b90509392505050565b606082471015612487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247e90613e59565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124b09190613eea565b60006040518083038185875af1925050503d80600081146124ed576040519150601f19603f3d011682016040523d82523d6000602084013e6124f2565b606091505b50915091506125038783838761250f565b92505050949350505050565b606083156125715760008351036125695761252985612584565b612568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255f90613f4d565b60405180910390fd5b5b82905061257c565b61257b83836125a7565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156125ba5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ee9190613fb1565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61261e8161260b565b811461262957600080fd5b50565b60008135905061263b81612615565b92915050565b60006020828403121561265757612656612601565b5b60006126658482850161262c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126998261266e565b9050919050565b6126a98161268e565b81146126b457600080fd5b50565b6000813590506126c6816126a0565b92915050565b6000602082840312156126e2576126e1612601565b5b60006126f0848285016126b7565b91505092915050565b6000819050919050565b61270c816126f9565b811461271757600080fd5b50565b60008135905061272981612703565b92915050565b60006020828403121561274557612744612601565b5b60006127538482850161271a565b91505092915050565b612765816126f9565b82525050565b6000602082019050612780600083018461275c565b92915050565b61278f8161268e565b82525050565b60006020820190506127aa6000830184612786565b92915050565b600080604083850312156127c7576127c6612601565b5b60006127d58582860161271a565b92505060206127e68582860161262c565b9150509250929050565b60008115159050919050565b612805816127f0565b82525050565b600060208201905061282060008301846127fc565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128748261282b565b810181811067ffffffffffffffff821117156128935761289261283c565b5b80604052505050565b60006128a66125f7565b90506128b2828261286b565b919050565b600067ffffffffffffffff8211156128d2576128d161283c565b5b602082029050602081019050919050565b600080fd5b60006128fb6128f6846128b7565b61289c565b9050808382526020820190506020840283018581111561291e5761291d6128e3565b5b835b818110156129475780612933888261262c565b845260208401935050602081019050612920565b5050509392505050565b600082601f83011261296657612965612826565b5b81356129768482602086016128e8565b91505092915050565b60006020828403121561299557612994612601565b5b600082013567ffffffffffffffff8111156129b3576129b2612606565b5b6129bf84828501612951565b91505092915050565b600080604083850312156129df576129de612601565b5b60006129ed8582860161271a565b92505060206129fe8582860161271a565b9150509250929050565b600080600060608486031215612a2157612a20612601565b5b6000612a2f8682870161271a565b9350506020612a408682870161271a565b9250506040612a51868287016126b7565b9150509250925092565b600080600080600060a08688031215612a7757612a76612601565b5b6000612a858882890161271a565b9550506020612a968882890161271a565b9450506040612aa78882890161271a565b9350506060612ab88882890161271a565b9250506080612ac9888289016126b7565b9150509295509295909350565b6000604082019050612aeb600083018561275c565b612af860208301846127fc565b9392505050565b600061014082019050612b15600083018d6127fc565b612b22602083018c6127fc565b612b2f604083018b61275c565b612b3c606083018a61275c565b612b49608083018961275c565b612b5660a083018861275c565b612b6360c083018761275c565b612b7060e083018661275c565b612b7e61010083018561275c565b612b8c610120830184612786565b9b9a5050505050505050505050565b6000604082019050612bb060008301856127fc565b612bbd602083018461275c565b9392505050565b600082825260208201905092915050565b7f5265736952656769737472793a205345524945204e4f54204143544956450000600082015250565b6000612c0b601e83612bc4565b9150612c1682612bd5565b602082019050919050565b60006020820190508181036000830152612c3a81612bfe565b9050919050565b7f5265736952656769737472793a20494e56414c4944205342542041444452455360008201527f5300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c9d602183612bc4565b9150612ca882612c41565b604082019050919050565b60006020820190508181036000830152612ccc81612c90565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d3c826126f9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d6e57612d6d612d02565b5b600182019050919050565b7f5265736952656769737472793a204f4e4c59205245534920544f4b454e000000600082015250565b6000612daf601d83612bc4565b9150612dba82612d79565b602082019050919050565b60006020820190508181036000830152612dde81612da2565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612e41602e83612bc4565b9150612e4c82612de5565b604082019050919050565b60006020820190508181036000830152612e7081612e34565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612eb3612eae612ea984612e77565b612e8e565b612e81565b9050919050565b612ec381612e98565b82525050565b6000602082019050612ede6000830184612eba565b92915050565b612eed8161260b565b82525050565b6000602082019050612f086000830184612ee4565b92915050565b7f5265736952656769737472793a205345524945205354494c4c20414354495645600082015250565b6000612f44602083612bc4565b9150612f4f82612f0e565b602082019050919050565b60006020820190508181036000830152612f7381612f37565b9050919050565b7f5265736952656769737472793a20494e56414c494420414d4f554e5400000000600082015250565b6000612fb0601c83612bc4565b9150612fbb82612f7a565b602082019050919050565b60006020820190508181036000830152612fdf81612fa3565b9050919050565b7f5265736952656769737472793a20494e56414c49442052454345495645520000600082015250565b600061301c601e83612bc4565b915061302782612fe6565b602082019050919050565b6000602082019050818103600083015261304b8161300f565b9050919050565b7f5265736952656769737472793a204e4f204d4f524520535550504c5920544f2060008201527f5749544844524157000000000000000000000000000000000000000000000000602082015250565b60006130ae602883612bc4565b91506130b982613052565b604082019050919050565b600060208201905081810360008301526130dd816130a1565b9050919050565b60006130ef826126f9565b91506130fa836126f9565b925082820390508181111561311257613111612d02565b5b92915050565b7f5265736952656769737472793a20494e56414c4944205749544844524157204160008201527f4d4f554e54000000000000000000000000000000000000000000000000000000602082015250565b6000613174602583612bc4565b915061317f82613118565b604082019050919050565b600060208201905081810360008301526131a381613167565b9050919050565b6000815190506131b9816126a0565b92915050565b6000602082840312156131d5576131d4612601565b5b60006131e3848285016131aa565b91505092915050565b6000815190506131fb81612703565b92915050565b60006020828403121561321757613216612601565b5b6000613225848285016131ec565b91505092915050565b7f5265736952656769737472793a20534f4d455448494e472057454e542057524f60008201527f4e47205749544844524157494e472046524f4d205641554c5400000000000000602082015250565b600061328a603983612bc4565b91506132958261322e565b604082019050919050565b600060208201905081810360008301526132b98161327d565b9050919050565b60006040820190506132d5600083018561275c565b6132e2602083018461275c565b9392505050565b7f5265736952656769737472793a205345524945204e4f5420435245415445442060008201527f5945540000000000000000000000000000000000000000000000000000000000602082015250565b6000613345602383612bc4565b9150613350826132e9565b604082019050919050565b6000602082019050818103600083015261337481613338565b9050919050565b6000613386826126f9565b9150613391836126f9565b92508282019050808211156133a9576133a8612d02565b5b92915050565b600060a0820190506133c4600083018861275c565b6133d1602083018761275c565b6133de604083018661275c565b6133eb606083018561275c565b6133f8608083018461275c565b9695505050505050565b7f5265736952656769737472793a20494e56414c4944205641554c54204144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b600061345e602383612bc4565b915061346982613402565b604082019050919050565b6000602082019050818103600083015261348d81613451565b9050919050565b7f5265736952656769737472793a20494e56414c494420544f4b454e204144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b60006134f0602383612bc4565b91506134fb82613494565b604082019050919050565b6000602082019050818103600083015261351f816134e3565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613582602683612bc4565b915061358d82613526565b604082019050919050565b600060208201905081810360008301526135b181613575565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006135ee602083612bc4565b91506135f9826135b8565b602082019050919050565b6000602082019050818103600083015261361d816135e1565b9050919050565b7f5265736952656769737472793a20534552494520494e41435449564500000000600082015250565b600061365a601c83612bc4565b915061366582613624565b602082019050919050565b600060208201905081810360008301526136898161364d565b9050919050565b7f5265736952656769737472793a20494e56414c4944204e414d45000000000000600082015250565b60006136c6601a83612bc4565b91506136d182613690565b602082019050919050565b600060208201905081810360008301526136f5816136b9565b9050919050565b7f5265736952656769737472793a204d41582050524f4a4543545320534552494560008201527f5320524541434845440000000000000000000000000000000000000000000000602082015250565b6000613758602983612bc4565b9150613763826136fc565b604082019050919050565b600060208201905081810360008301526137878161374b565b9050919050565b60006040820190506137a36000830185612ee4565b6137b0602083018461275c565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006137ed601f83612bc4565b91506137f8826137b7565b602082019050919050565b6000602082019050818103600083015261381c816137e0565b9050919050565b7f5265736952656769737472793a20494e56414c49442053455249450000000000600082015250565b6000613859601b83612bc4565b915061386482613823565b602082019050919050565b600060208201905081810360008301526138888161384c565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006138eb602b83612bc4565b91506138f68261388f565b604082019050919050565b6000602082019050818103600083015261391a816138de565b9050919050565b60006040820190506139366000830185612786565b613943602083018461275c565b9392505050565b7f5265736952656769737472793a2043555252454e54205345524945204953204e60008201527f4f5420434c4f5345442059455400000000000000000000000000000000000000602082015250565b60006139a6602d83612bc4565b91506139b18261394a565b604082019050919050565b600060208201905081810360008301526139d581613999565b9050919050565b7f5265736952656769737472793a20494e56414c49442053544152542044415445600082015250565b6000613a12602083612bc4565b9150613a1d826139dc565b602082019050919050565b60006020820190508181036000830152613a4181613a05565b9050919050565b7f5265736952656769737472793a20494e56414c494420454e4420444154450000600082015250565b6000613a7e601e83612bc4565b9150613a8982613a48565b602082019050919050565b60006020820190508181036000830152613aad81613a71565b9050919050565b7f5265736952656769737472793a2050524f4a45435453204d555354204245204d60008201527f4f5245205448414e205a45524f00000000000000000000000000000000000000602082015250565b6000613b10602d83612bc4565b9150613b1b82613ab4565b604082019050919050565b60006020820190508181036000830152613b3f81613b03565b9050919050565b7f5265736952656769737472793a204d415820535550504c5920544f20454d495460008201527f204d5355542042452047524541544552205448414e205a45524f000000000000602082015250565b6000613ba2603a83612bc4565b9150613bad82613b46565b604082019050919050565b60006020820190508181036000830152613bd181613b95565b9050919050565b7f5265736952656769737472793a20494e56414c4944205641554c5420434f4e5460008201527f5241435400000000000000000000000000000000000000000000000000000000602082015250565b6000613c34602483612bc4565b9150613c3f82613bd8565b604082019050919050565b60006020820190508181036000830152613c6381613c27565b9050919050565b7f5265736952656769737472793a20416d6f756e742077696c6c2065786365656460008201527f207365726965206d617820737570706c79000000000000000000000000000000602082015250565b6000613cc6603183612bc4565b9150613cd182613c6a565b604082019050919050565b60006020820190508181036000830152613cf581613cb9565b9050919050565b613d05816127f0565b8114613d1057600080fd5b50565b600081519050613d2281613cfc565b92915050565b600060208284031215613d3e57613d3d612601565b5b6000613d4c84828501613d13565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613db1602a83612bc4565b9150613dbc82613d55565b604082019050919050565b60006020820190508181036000830152613de081613da4565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613e43602683612bc4565b9150613e4e82613de7565b604082019050919050565b60006020820190508181036000830152613e7281613e36565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015613ead578082015181840152602081019050613e92565b60008484015250505050565b6000613ec482613e79565b613ece8185613e84565b9350613ede818560208601613e8f565b80840191505092915050565b6000613ef68284613eb9565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613f37601d83612bc4565b9150613f4282613f01565b602082019050919050565b60006020820190508181036000830152613f6681613f2a565b9050919050565b600081519050919050565b6000613f8382613f6d565b613f8d8185612bc4565b9350613f9d818560208601613e8f565b613fa68161282b565b840191505092915050565b60006020820190508181036000830152613fcb8184613f78565b90509291505056fea26469706673582212200f1df02bcbb58acb2fe2ab9e565eddbc5a8f786ba0be229d880676a789c53ef764736f6c63430008120033",
  "devdoc": {
    "author": "Alejo Lovallo",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ResiTokenSet(address)": {
        "params": {
          "_resiToken": "Resi Token address"
        }
      },
      "TreasuryVaultSet(address)": {
        "params": {
          "_treasuryVault": "Treasury Vault address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "activeSerie()": {
        "details": "Get current active serie",
        "returns": {
          "id": "id"
        }
      },
      "addProject(bytes32)": {
        "details": "Add project to current serie",
        "params": {
          "_name": "name of the project"
        }
      },
      "addProjects(bytes32[])": {
        "details": "Add projects to current serie",
        "params": {
          "names": "projects names"
        }
      },
      "closeSerie()": {
        "details": "Close serie. This will mean all kind of operations to a serie could not be done anymore."
      },
      "createSerie(uint256,uint256,uint256,uint256,address)": {
        "details": "Create New Serie. Cannot be created if another serie is running",
        "params": {
          "_endDate": "timestamp when serie ends",
          "_maxSupply": "max supply to mint during serie",
          "_numberOfProjects": "amount of projects",
          "_startDate": "timestamp when serie starts",
          "_vault": "address of the serie vault"
        }
      },
      "decreaseSerieSupply(uint256,uint256)": {
        "details": "Decrease serie supply. Only performed by ResiToken",
        "params": {
          "_amount": "amount to decrease",
          "_serieId": "serie id"
        }
      },
      "disableProject(bytes32)": {
        "details": "Disable project (no matter if serie not active)",
        "params": {
          "_name": "project name"
        }
      },
      "getSBTSerie()": {
        "details": "Get active serie sbt token",
        "returns": {
          "_0": "sbt address"
        }
      },
      "getSBTSerie(uint256)": {
        "details": "Get serie SBT token for a specific serie",
        "params": {
          "_serieId": "serie id to get sbt"
        },
        "returns": {
          "_0": "sbt address"
        }
      },
      "getSerieState(uint256)": {
        "details": "Get serie active state and current supply emitted",
        "params": {
          "_serieId": "serie id to get state"
        },
        "returns": {
          "_0": "wether serie is active",
          "_1": "currenty serie supply emitted"
        }
      },
      "getSerieSupply(uint256)": {
        "details": "Get current serie supply minted",
        "params": {
          "_serieId": "serie id to get current supply"
        },
        "returns": {
          "_0": "supply minted"
        }
      },
      "getTreasuryVault()": {
        "details": "Get Treasury vault address",
        "returns": {
          "_0": "treasury addresss"
        }
      },
      "increaseSerieSupply(uint256,uint256)": {
        "details": "Increase serie supply. Only performed by ResiToken",
        "params": {
          "_amount": "amount to increase",
          "_serieId": "serie id"
        }
      },
      "isValidProject(bytes32)": {
        "details": "Know if a project in an active serie is valid",
        "params": {
          "_project": "project name"
        },
        "returns": {
          "_0": "if valid"
        }
      },
      "isValidProject(uint256,bytes32)": {
        "details": "Know if a project is valid from a specific serie",
        "params": {
          "_project": "project name",
          "_serie": "serie id"
        },
        "returns": {
          "_0": "if valid"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerSerieSBT(address)": {
        "details": "Set SBT for current serie",
        "params": {
          "_sbt": "address of the SBT token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setResiToken(address)": {
        "details": "Set Resi token for Registry",
        "params": {
          "_resiToken": "address of the token"
        }
      },
      "setTreasuryVault(address)": {
        "details": "Set Treasury Vault for Registry",
        "params": {
          "_treasuryVault": "treasury vault address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFromVault(uint256,uint256,address)": {
        "details": "@param _serieId serie id",
        "params": {
          "_amount": "amount to withdrawn from vault",
          "_to": "address who will receive the assets"
        }
      }
    },
    "stateVariables": {
      "RESI_TOKEN": {
        "details": "Resi token address"
      },
      "TREASURY_VAULT": {
        "details": "Global Treasury vault address handled by admin protocol"
      },
      "activeSerieId": {
        "details": "current serie running"
      },
      "projects": {
        "details": "project name => Project info"
      },
      "series": {
        "details": "serieId => Serie info"
      },
      "seriesSBTs": {
        "details": "serieId => SBT"
      },
      "upgradeGap": {
        "details": "Leave a gap betweeen inherited contracts variables in orderto be able to add more variables in them later."
      }
    },
    "title": "Resi Registry Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RegistryInitialized()": {
        "notice": "Emitted when the Registry is initialized."
      },
      "ResiTokenSet(address)": {
        "notice": "Emitted when Resi Token Contract is set on Contract"
      },
      "TreasuryVaultSet(address)": {
        "notice": "Emitted when Treasury Vault address is set on Contract"
      }
    },
    "kind": "user",
    "methods": {},
    "notice": "Registry holding information of series and projects",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 720,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3501,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 589,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 709,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1020,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1078,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6663,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "RESI_TOKEN",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 6666,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "TREASURY_VAULT",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 6669,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "activeSerieId",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 6675,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "series",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_struct(Serie)9577_storage)"
      },
      {
        "astId": 6680,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "seriesSBTs",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6686,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "projects",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_bytes32,t_struct(Project)9582_storage)"
      },
      {
        "astId": 7536,
        "contract": "contracts/ResiRegistry.sol:ResiRegistry",
        "label": "upgradeGap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)20_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Project)9582_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IResiRegistry.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)9582_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Serie)9577_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IResiRegistry.Serie)",
        "numberOfBytes": "32",
        "value": "t_struct(Serie)9577_storage"
      },
      "t_struct(Project)9582_storage": {
        "encoding": "inplace",
        "label": "struct IResiRegistry.Project",
        "members": [
          {
            "astId": 9579,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "serie",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9581,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "active",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Serie)9577_storage": {
        "encoding": "inplace",
        "label": "struct IResiRegistry.Serie",
        "members": [
          {
            "astId": 9558,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9560,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "created",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9562,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9564,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "startDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9566,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "endDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9568,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "currentProjects",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9570,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "numberOfProjects",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9572,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "currentSupply",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9574,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "maxSupply",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9576,
            "contract": "contracts/ResiRegistry.sol:ResiRegistry",
            "label": "vault",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}