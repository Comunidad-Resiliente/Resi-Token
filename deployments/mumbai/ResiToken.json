{
  "address": "0x4a53AAD4fE18CC63DdDf3c2187f27Ce8A69d1E45",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "TransferForbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "TransferFromForbidden",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mentor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "project",
          "type": "bytes32"
        }
      ],
      "name": "MentorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "projectBuilder",
          "type": "address"
        }
      ],
      "name": "ProjectBuilderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "resiBuilder",
          "type": "address"
        }
      ],
      "name": "ResiBuilderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ResiBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ResiMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "ResiRoleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "TokenInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MENTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROJECT_BUILDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESI_BUILDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESI_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mentor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_project",
          "type": "bytes32"
        }
      ],
      "name": "addMentor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_project",
          "type": "bytes32"
        }
      ],
      "name": "addProjectBuilder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        }
      ],
      "name": "addResiBuilder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addRolesBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "award",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoleCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeUserRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x24ba8bd99d860e37305a63e9e3ac612978f55aa02a0734978088b63b86e5643d",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0x4a53AAD4fE18CC63DdDf3c2187f27Ce8A69d1E45",
    "transactionIndex": 2,
    "gasUsed": "5033843",
    "logsBloom": "0x
    "blockHash": "0x174c154435a98b592fc525ba39242934d96b8110769d75e4b7a6559229f2e72b",
    "transactionHash": "0x24ba8bd99d860e37305a63e9e3ac612978f55aa02a0734978088b63b86e5643d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 38003575,
        "transactionHash": "0x24ba8bd99d860e37305a63e9e3ac612978f55aa02a0734978088b63b86e5643d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000153073310327caa6abb76f735d115e5c8ba1617b",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002cb5a243acdb00000000000000000000000000000000000000000000000000186802ca7ab8b6910000000000000000000000000000000000000000000020d19c776a3fedd346d7000000000000000000000000000000000000000000000000183b4d28370bdb910000000000000000000000000000000000000000000020d19ca41fe2318021d7",
        "logIndex": 12,
        "blockHash": "0x174c154435a98b592fc525ba39242934d96b8110769d75e4b7a6559229f2e72b"
      }
    ],
    "blockNumber": 38003575,
    "cumulativeGasUsed": "5623042",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "072c24d1c97d8046f61296ee3e4bc405",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TransferForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TransferFromForbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mentor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"project\",\"type\":\"bytes32\"}],\"name\":\"MentorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"projectBuilder\",\"type\":\"address\"}],\"name\":\"ProjectBuilderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resiBuilder\",\"type\":\"address\"}],\"name\":\"ResiBuilderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ResiBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ResiMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ResiRoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"TokenInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MENTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_BUILDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESI_BUILDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESI_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mentor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_project\",\"type\":\"bytes32\"}],\"name\":\"addMentor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_project\",\"type\":\"bytes32\"}],\"name\":\"addProjectBuilder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"}],\"name\":\"addResiBuilder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addRolesBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"award\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeUserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alejo Lovallo\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addMentor(address,uint256,bytes32)\":{\"details\":\"assign MENTOR ROLE to user for specific project\",\"params\":{\"_mentor\":\"user address\",\"_project\":\"project name\",\"_serieId\":\"serie id\"}},\"addProjectBuilder(address,uint256,bytes32)\":{\"details\":\"assign PROJECT BUILDER role to a user for specific project\",\"params\":{\"_builder\":\"user address\",\"_project\":\"project name\",\"_serieId\":\"serie id\"}},\"addResiBuilder(address)\":{\"details\":\"assign RESI BUILDER role to user\",\"params\":{\"_builder\":\"user address\"}},\"addRolesBatch(bytes32,address[])\":{\"details\":\"assign specific role to more than one user\",\"params\":{\"_addresses\":\"users array\",\"_role\":\"role to assign\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"award(address,bytes32,uint256)\":{\"details\":\"Award user with ResiTokens\",\"params\":{\"_account\":\"user to award\",\"_amount\":\"amount to award\",\"_role\":\"user role\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burn(uint256,uint256)\":{\"details\":\"burn Resi Token\",\"params\":{\"_amount\":\"amount to burn\"}},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"exit(uint256,bytes32)\":{\"details\":\"Perform exit to receive serie funds\",\"params\":{\"_role\":\"user role\",\"_serieId\":\"serie id\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleCount()\":{\"details\":\"Get amount of roles\",\"returns\":{\"_0\":\"amount of roles\"}},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeUserRole(bytes32,address)\":{\"details\":\"unassign role for user\",\"params\":{\"_role\":\"role\",\"_user\":\"user address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"It is not allowed to transfer resi token\"},\"transferFrom(address,address,uint256)\":{\"details\":\"It is not allowed to transfer resi token\"}},\"stateVariables\":{\"ADMIN_ROLE\":{\"details\":\"ADMIN ROLE\"},\"MENTOR_ROLE\":{\"details\":\"MENTOR ROLE\"},\"PROJECT_BUILDER_ROLE\":{\"details\":\"PROJECT BUILDER ROLE\"},\"RESI_BUILDER_ROLE\":{\"details\":\"RESI BUILDER ROLE\"},\"RESI_REGISTRY\":{\"details\":\"Resi Registry contract\"},\"TREASURY_ROLE\":{\"details\":\"TREASURY ROLE\"}},\"title\":\"Resi Token Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"ERC20 Resi Token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ResiToken.sol\":\"ResiToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n */\\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\\n    function __ERC20Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6b4178004e187b483d0dc1d1219a800292075ac1f924bc7e5a843c5eef55ea24\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/ResiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IResiToken.sol\\\";\\nimport \\\"./interfaces/IResiRegistry.sol\\\";\\nimport \\\"./interfaces/IResiSBT.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Resi Token Contract\\n/// @author Alejo Lovallo\\n/// @notice ERC20 Resi Token\\ncontract ResiToken is\\n    IResiToken,\\n    AccessControlEnumerableUpgradeable,\\n    ERC20Upgradeable,\\n    ERC20BurnableUpgradeable,\\n    ERC20PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    ///@dev ADMIN ROLE\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    ///@dev MENTOR ROLE\\n    bytes32 public constant MENTOR_ROLE = keccak256(\\\"MENTOR_ROLE\\\");\\n    ///@dev TREASURY ROLE\\n    bytes32 public constant TREASURY_ROLE = keccak256(\\\"TREASURY_ROLE\\\");\\n    ///@dev PROJECT BUILDER ROLE\\n    bytes32 public constant PROJECT_BUILDER_ROLE = keccak256(\\\"PROJECT_BUILDER_ROLE\\\");\\n    ///@dev RESI BUILDER ROLE\\n    bytes32 public constant RESI_BUILDER_ROLE = keccak256(\\\"RESI_BUILDER_ROLE\\\");\\n\\n    /// @dev Resi Registry contract\\n    address public RESI_REGISTRY;\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\\n    EnumerableSetUpgradeable.Bytes32Set private _rolesSet;\\n\\n    function initialize(address _treasury, address _registry) public initializer {\\n        require(_treasury != address(0), \\\"INVALID TREASURY ADDRESS\\\");\\n        require(_registry != address(0), \\\"INVALID REGISTRY ADDRESS\\\");\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __ERC20_init_unchained(\\\"ResiToken\\\", \\\"RESI\\\");\\n        __ERC20Burnable_init_unchained();\\n        __ERC20Pausable_init_unchained();\\n\\n        ///@dev Add roles to the set of Roles for later tracking\\n        _rolesSet.add(MENTOR_ROLE);\\n        _rolesSet.add(PROJECT_BUILDER_ROLE);\\n        _rolesSet.add(RESI_BUILDER_ROLE);\\n\\n        _grantRole(ADMIN_ROLE, _msgSender());\\n        _grantRole(TREASURY_ROLE, _treasury);\\n\\n        ///@dev Admin role can add/remove admins in addition to add/remove all other roles\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(TREASURY_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(PROJECT_BUILDER_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(RESI_BUILDER_ROLE, ADMIN_ROLE);\\n\\n        RESI_REGISTRY = _registry;\\n\\n        emit TokenInitialized(_treasury, _registry);\\n    }\\n\\n    /**************************** GETTERS  ****************************/\\n\\n    /**\\n     * @dev Get amount of roles\\n     * @return amount of roles\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return _rolesSet.length();\\n    }\\n\\n    /**************************** INTERFACE  ****************************/\\n\\n    /**\\n     * @dev assign MENTOR ROLE to user for specific project\\n     * @param _mentor user address\\n     * @param _serieId serie id\\n     * @param _project project name\\n     */\\n    function addMentor(\\n        address _mentor,\\n        uint256 _serieId,\\n        bytes32 _project\\n    ) external isValidAddress(_mentor, \\\"ResiToken: INVALID MENTOR ADDRESS\\\") onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _checkSerieAndProject(_serieId, _project);\\n        _grantRole(MENTOR_ROLE, _mentor);\\n        emit MentorAdded(_mentor, _project);\\n    }\\n\\n    /**\\n     * @dev assign PROJECT BUILDER role to a user for specific project\\n     * @param _builder user address\\n     * @param _serieId serie id\\n     * @param _project project name\\n     */\\n    function addProjectBuilder(\\n        address _builder,\\n        uint256 _serieId,\\n        bytes32 _project\\n    ) external isValidAddress(_builder, \\\"ResiToken: INVALID BUILDER ADDRESS\\\") onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _checkSerieAndProject(_serieId, _project);\\n        _grantRole(PROJECT_BUILDER_ROLE, _builder);\\n        emit ProjectBuilderAdded(_builder);\\n    }\\n\\n    /**\\n     * @dev assign RESI BUILDER role to user\\n     * @param _builder user address\\n     */\\n    function addResiBuilder(\\n        address _builder\\n    ) external isValidAddress(_builder, \\\"ResiToken: INVALID BUILDER ADDRESS\\\") onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _grantRole(RESI_BUILDER_ROLE, _builder);\\n        emit ResiBuilderAdded(_builder);\\n    }\\n\\n    /**\\n     *  @dev assign specific role to more than one user\\n     * @param _role role to assign\\n     * @param _addresses users array\\n     */\\n    function addRolesBatch(bytes32 _role, address[] memory _addresses) external onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _addRolesBatch(_role, _addresses);\\n    }\\n\\n    /**\\n     *  @dev unassign role for user\\n     * @param _role role\\n     * @param _user user address to remove\\n     */\\n    function removeUserRole(\\n        bytes32 _role,\\n        address _user\\n    )\\n        external\\n        isValidAddress(_user, \\\"ResiToken: INVALID USER ADDRESS\\\")\\n        validRole(_role)\\n        onlyRole(ADMIN_ROLE)\\n        whenNotPaused\\n    {\\n        _revokeRole(_role, _user);\\n        emit ResiRoleRemoved(_role, _user);\\n    }\\n\\n    /**\\n     *  @dev internal function to check state of serie and project\\n     * @param _serieId serie id\\n     * @param _project project name\\n     */\\n    function _checkSerieAndProject(uint256 _serieId, bytes32 _project) internal view onlyRole(ADMIN_ROLE) {\\n        require(\\n            IResiRegistry(RESI_REGISTRY).isValidProject(_serieId, _project),\\n            \\\"ResiToken: INVALID OR INACTIVE SERIE OR PROJECT\\\"\\n        );\\n    }\\n\\n    /**\\n     *  @dev It is not allowed to transfer resi token\\n     */\\n    function transfer(address, uint256) public pure override(ERC20Upgradeable) returns (bool) {\\n        revert TransferForbidden(\\\"RESIToken: NO TRANSFER ALLOWED\\\");\\n    }\\n\\n    /**\\n     *\\u00a0@dev It is not allowed to transfer resi token\\n     */\\n    function transferFrom(address, address, uint256) public pure override(ERC20Upgradeable) returns (bool) {\\n        revert TransferFromForbidden(\\\"RESIToken: NO TRANSFER FROM ALLOWED\\\");\\n    }\\n\\n    /**\\n     *  @dev Award user with ResiTokens\\n     * @param _account user to award\\n     * @param _role user role\\n     * @param _amount amount to award\\n     */\\n    function award(\\n        address _account,\\n        bytes32 _role,\\n        uint256 _amount\\n    ) external isValidAddress(_account, \\\"ResiToken: INVALID RECEIVER ADDR\\\") onlyRole(ADMIN_ROLE) nonReentrant {\\n        require(hasRole(_role, _account), \\\"ResiToken: ACCOUNT HAS NOT VALID ROLE\\\");\\n        address SERIE_SBT = IResiRegistry(RESI_REGISTRY).getSBTSerie();\\n        if (IERC721Upgradeable(SERIE_SBT).balanceOf(_account) == 0) {\\n            IResiSBT(SERIE_SBT).mintByResiToken(_account, _role);\\n        }\\n        _mint(_account, _amount);\\n        uint256 activeSerie = IResiRegistry(RESI_REGISTRY).activeSerie();\\n        IResiSBT(SERIE_SBT).increaseResiTokenBalance(_account, _amount);\\n        IResiRegistry(RESI_REGISTRY).increaseSerieSupply(activeSerie, _amount);\\n        emit ResiMinted(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Perform exit to receive serie funds\\n     * @param _serieId serie id\\n     * @param _role user role\\n     */\\n    function exit(uint256 _serieId, bytes32 _role) external nonReentrant {\\n        _checkExit(_role);\\n        address SERIE_SBT = IResiRegistry(RESI_REGISTRY).getSBTSerie(_serieId);\\n        require(SERIE_SBT != address(0), \\\"ResiToken: NO SBT SERIE SET\\\");\\n        require(IERC20(SERIE_SBT).balanceOf(_msgSender()) == 1, \\\"ResiToken: USER HAS NO SBT\\\");\\n        uint256 resiSerieBalance = this.balanceOf(_msgSender());\\n\\n        IResiRegistry(RESI_REGISTRY).withdrawFromVault(_serieId, resiSerieBalance, _msgSender());\\n        IResiSBT(SERIE_SBT).decreaseResiTokenBalance(_msgSender(), resiSerieBalance);\\n        _transfer(_msgSender(), IResiRegistry(RESI_REGISTRY).getTreasuryVault(), resiSerieBalance);\\n\\n        emit Exit(_msgSender(), resiSerieBalance, _serieId);\\n    }\\n\\n    /**\\n     *  @dev burn Resi Token\\n     * @param _amount amount to burn\\n     */\\n    function burn(uint256 _amount, uint256 _serieId) external {\\n        require(hasRole(TREASURY_ROLE, _msgSender()) || hasRole(ADMIN_ROLE, _msgSender()), \\\"ResiToken: INVALID ROLE\\\");\\n        ERC20BurnableUpgradeable.burn(_amount);\\n        IResiRegistry(RESI_REGISTRY).decreaseSerieSupply(_serieId, _amount);\\n        emit ResiBurnt(_msgSender(), _amount);\\n    }\\n\\n    /**************************** INTERNALS  ****************************/\\n\\n    /**\\n     * @dev Internal function to add roles batch function\\n     * @param role role to add\\n     * @param _addresses users array\\n     */\\n    function _addRolesBatch(\\n        bytes32 role,\\n        address[] memory _addresses\\n    ) internal onlyRole(ADMIN_ROLE) validRole(role) whenNotPaused {\\n        for (uint8 i = 0; i < _addresses.length; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert InvalidAddress(_addresses[i]);\\n            }\\n            _grantRole(role, _addresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to perform valid exit\\n     * @param _role user role\\n     */\\n    function _checkExit(bytes32 _role) internal view {\\n        require(_role != TREASURY_ROLE && _role != ADMIN_ROLE, \\\"ResiToken: INVALID ACTION\\\");\\n        require(hasRole(_role, _msgSender()), \\\"ResiToken: ACCOUNT HAS NOT VALID ROLE\\\");\\n        require(balanceOf(_msgSender()) > 0, \\\"ResiToken: User HAS NO FUNDS TO EXIT\\\");\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev check address is not the zero address\\n     */\\n    modifier isValidAddress(address _addr, string memory message) {\\n        require(_addr != address(0), message);\\n        _;\\n    }\\n\\n    /**\\n     * @dev check user has valid role\\n     */\\n    modifier validRole(bytes32 _role) {\\n        require(\\n            _role == MENTOR_ROLE || _role == PROJECT_BUILDER_ROLE || _role == RESI_BUILDER_ROLE,\\n            \\\"ResiToken: INVALID ROLE\\\"\\n        );\\n        _;\\n    }\\n\\n    // Leave a gap betweeen inherited contracts variables in order\\n    // to be able to add more variables in them later.\\n    uint256[20] private upgradeGap;\\n}\\n\",\"keccak256\":\"0x6a0fe2c463943b1c445603d7c68d0b0c387c5d9d278ac90f273f16bf8fe9a40e\",\"license\":\"MIT\"},\"contracts/interfaces/IResiRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiRegistry {\\n    struct Serie {\\n        bool active;\\n        bool created;\\n        uint256 id;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 currentProjects;\\n        uint256 numberOfProjects;\\n        uint256 currentSupply;\\n        uint256 maxSupply;\\n        address vault;\\n    }\\n\\n    struct Project {\\n        uint256 serie;\\n        bool active;\\n    }\\n\\n    function createSerie(\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address _vault\\n    ) external;\\n\\n    function addProject(bytes32 _name) external;\\n\\n    function addProjects(bytes32[] memory names) external;\\n\\n    function disableProject(bytes32 _name) external;\\n\\n    function increaseSerieSupply(uint256 _serieId, uint256 _amount) external;\\n\\n    function decreaseSerieSupply(uint256 _serieId, uint256 _amount) external;\\n\\n    function closeSerie() external;\\n\\n    function activeSerie() external view returns (uint256 id);\\n\\n    function isValidProject(uint256 _serie, bytes32 _project) external view returns (bool);\\n\\n    function isValidProject(bytes32 _project) external view returns (bool);\\n\\n    function getSBTSerie() external view returns (address);\\n\\n    function getSerieState(uint256 _serieId) external view returns (bool, uint256);\\n\\n    function getSerieSupply(uint256 _serieId) external view returns (uint256);\\n\\n    function getSBTSerie(uint256 _serieId) external view returns (address);\\n\\n    function getTreasuryVault() external view returns (address);\\n\\n    function withdrawFromVault(uint256 _serieId, uint256 _amount, address _to) external;\\n\\n    /// @notice Emitted when the Registry is initialized.\\n    event RegistryInitialized();\\n\\n    /// @notice Emitted when Resi Token Contract is set on Contract\\n    /// @param _resiToken Resi Token address\\n    event ResiTokenSet(address indexed _resiToken);\\n\\n    /// @notice Emitted when Treasury Vault address is set on Contract\\n    /// @param _treasuryVault Treasury Vault address\\n    event TreasuryVaultSet(address indexed _treasuryVault);\\n\\n    event SerieSBTSet(uint256 activeSerieId, address indexed _sbt);\\n\\n    event SerieCreated(\\n        uint256 _id,\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address indexed _vault\\n    );\\n\\n    event SerieSupplyUpdated(uint256 oldSupply, uint256 newSupply);\\n\\n    event SerieClosed(uint256 _id);\\n\\n    event ProjectAdded(bytes32 _name, uint256 serieId);\\n\\n    event ProjectDisabled(bytes32 _name);\\n\\n    event WithdrawFromVault(uint256 _serieId, uint256 _amount, address indexed _to);\\n}\\n\",\"keccak256\":\"0x6660a3032d41f2b28a0256ef1d7bc5fa469766fb0490d33e6b9c976e8fe7baea\",\"license\":\"MIT\"},\"contracts/interfaces/IResiSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiSBT {\\n    event ResiSBTInitialized(\\n        string _name,\\n        string _symbol,\\n        uint256 _serieId,\\n        address indexed _registry,\\n        address indexed _resiToken\\n    );\\n\\n    function mintByResiToken(address _to, bytes32 _role) external;\\n\\n    function isSBTReceiver(address _account, bytes32 _role, uint256 _serieId) external view returns (bool);\\n    function increaseResiTokenBalance(address _to, uint256 _amount) external;\\n\\n    function decreaseResiTokenBalance(address _to, uint256 _amount) external;\\n\\n    event RegistrySet(address indexed _registry);\\n    event ContractURIUpdated(string contractUri);\\n    event MintSBT(address indexed _to, bytes32 _role, uint256 _tokenId);\\n    event DefaultRoleUriUpdated(string oldUri, string newUri);\\n    event SBTMintedByResiToken(address indexed _to, bytes32 _role, uint256 _tokenId);\\n    event IncreaseResiBalance(address indexed to, uint256 amount);\\n    event DecreaseResiBalance(address indexed to, uint256 amount);\\n    event NicknameUpdated(address indexed user, bytes32 nickname);\\n\\n    error TransferForbidden(string message);\\n}\\n\",\"keccak256\":\"0x44d2d49006b87e72471fc6803710d7aee22678431dea513c56c9e0d77c968d50\",\"license\":\"MIT\"},\"contracts/interfaces/IResiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiToken {\\n    function addMentor(address _mentor, uint256 _serieId, bytes32 _project) external;\\n\\n    function addProjectBuilder(address _builder, uint256 _serieId, bytes32 _project) external;\\n\\n    function addResiBuilder(address _builder) external;\\n\\n    function removeUserRole(bytes32 _role, address _user) external;\\n\\n    function getRoleCount() external view returns (uint256);\\n\\n    event TokenInitialized(address indexed treasury, address indexed registry);\\n    event MentorAdded(address indexed mentor, bytes32 project);\\n    event ProjectBuilderAdded(address indexed projectBuilder);\\n    event ResiBuilderAdded(address indexed resiBuilder);\\n    event ResiRoleRemoved(bytes32 _role, address indexed _user);\\n    event ResiMinted(address indexed account, uint256 amount);\\n    event ResiBurnt(address indexed account, uint256 amount);\\n    event Exit(address indexed account, uint256 _amount, uint256 _serieId);\\n\\n    error InvalidAddress(address);\\n    error TransferForbidden(string message);\\n    error TransferFromForbidden(string message);\\n}\\n\",\"keccak256\":\"0x1e280673e11caa316b371c2060b8d6a500eeca72fc77ef76324eac89047fe7e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a8b80620000216000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c806379cc67901161013b578063b390c0ab116100b8578063d11a57ec1161007c578063d11a57ec146106ee578063d547741f1461070c578063dd62ed3e14610728578063f0771d9d14610758578063f81eeb6e146107745761023d565b8063b390c0ab1461064c578063bde5590714610668578063c4dde20d14610686578063ca15c873146106a2578063cc4afdc0146106d25761023d565b806391d14854116100ff57806391d148541461058057806395d89b41146105b0578063a217fddf146105ce578063a457c2d7146105ec578063a9059cbb1461061c5761023d565b806379cc6790146104dc5780637b9c8169146104f857806383d33319146105165780638536d834146105345780639010d07c146105505761023d565b806336568abe116101c9578063485cc9551161018d578063485cc955146104365780635c975abb146104525780636ce158dd1461047057806370a082311461048e57806375b238fc146104be5761023d565b806336568abe1461039657806338bcf016146103b257806339509351146103ce5780633eaee76f146103fe57806342966c681461041a5761023d565b806323b872dd1161021057806323b872dd146102de578063248a9ca31461030e57806329e534d81461033e5780632f2ff15d1461035c578063313ce567146103785761023d565b806301ffc9a71461024257806306fdde0314610272578063095ea7b31461029057806318160ddd146102c0575b600080fd5b61025c60048036038101906102579190613d27565b610790565b6040516102699190613d6f565b60405180910390f35b61027a61080a565b6040516102879190613e1a565b60405180910390f35b6102aa60048036038101906102a59190613ed0565b61089c565b6040516102b79190613d6f565b60405180910390f35b6102c86108bf565b6040516102d59190613f1f565b60405180910390f35b6102f860048036038101906102f39190613f3a565b6108c9565b6040516103059190613d6f565b60405180910390f35b61032860048036038101906103239190613fc3565b610906565b6040516103359190613fff565b60405180910390f35b610346610926565b6040516103539190613fff565b60405180910390f35b6103766004803603810190610371919061401a565b61094a565b005b61038061096b565b60405161038d9190614076565b60405180910390f35b6103b060048036038101906103ab919061401a565b610974565b005b6103cc60048036038101906103c7919061401a565b6109f7565b005b6103e860048036038101906103e39190613ed0565b610beb565b6040516103f59190613d6f565b60405180910390f35b61041860048036038101906104139190614091565b610c22565b005b610434600480360381019061042f91906140d1565b6110a0565b005b610450600480360381019061044b91906140fe565b6110b4565b005b61045a611607565b6040516104679190613d6f565b60405180910390f35b61047861161f565b6040516104859190613fff565b60405180910390f35b6104a860048036038101906104a3919061413e565b611643565b6040516104b59190613f1f565b60405180910390f35b6104c661168c565b6040516104d39190613fff565b60405180910390f35b6104f660048036038101906104f19190613ed0565b6116b0565b005b6105006116d0565b60405161050d919061417a565b60405180910390f35b61051e6116f7565b60405161052b9190613f1f565b60405180910390f35b61054e60048036038101906105499190614195565b611709565b005b61056a600480360381019061056591906141e8565b611bb1565b604051610577919061417a565b60405180910390f35b61059a6004803603810190610595919061401a565b611be0565b6040516105a79190613d6f565b60405180910390f35b6105b8611c4b565b6040516105c59190613e1a565b60405180910390f35b6105d6611cdd565b6040516105e39190613fff565b60405180910390f35b61060660048036038101906106019190613ed0565b611ce4565b6040516106139190613d6f565b60405180910390f35b61063660048036038101906106319190613ed0565b611d5b565b6040516106439190613d6f565b60405180910390f35b61066660048036038101906106619190614228565b611d98565b005b610670611f32565b60405161067d9190613fff565b60405180910390f35b6106a0600480360381019061069b9190614268565b611f56565b005b6106bc60048036038101906106b79190613fc3565b612095565b6040516106c99190613f1f565b60405180910390f35b6106ec60048036038101906106e79190614268565b6120b9565b005b6106f6612203565b6040516107039190613fff565b60405180910390f35b6107266004803603810190610721919061401a565b612227565b005b610742600480360381019061073d91906140fe565b612248565b60405161074f9190613f1f565b60405180910390f35b610772600480360381019061076d919061413e565b6122cf565b005b61078e60048036038101906107899190614403565b612402565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610803575061080282612443565b5b9050919050565b606060cc80546108199061448e565b80601f01602080910402602001604051908101604052809291908181526020018280546108459061448e565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b5050505050905090565b6000806108a76124bd565b90506108b48185856124c5565b600191505092915050565b600060cb54905090565b60006040517fb77a62390000000000000000000000000000000000000000000000000000000081526004016108fd90614531565b60405180910390fd5b600060656000838152602001908152602001600020600101549050919050565b7fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef81565b61095382610906565b61095c8161268e565b61096683836126a2565b505050565b60006012905090565b61097c6124bd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e0906145c3565b60405180910390fd5b6109f382826126d6565b5050565b806040518060400160405280601f81526020017f52657369546f6b656e3a20494e56414c49442055534552204144445245535300815250600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158190610aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a989190613e1a565b60405180910390fd5b50837fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d811480610af057507fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef81145b80610b1a57507f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b32081145b610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b509061462f565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b838161268e565b610b8b61270a565b610b9586866126d6565b8473ffffffffffffffffffffffffffffffffffffffff167f9078ef423f25fc1620bc801975005baea187d61a87d2dc9e56e8d8d84e39860c87604051610bdb9190613fff565b60405180910390a2505050505050565b600080610bf66124bd565b9050610c17818585610c088589612248565b610c12919061467e565b6124c5565b600191505092915050565b610c2a612754565b610c33816127a5565b60006101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ae202c1846040518263ffffffff1660e01b8152600401610c919190613f1f565b602060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd291906146c7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90614740565b60405180910390fd5b60018173ffffffffffffffffffffffffffffffffffffffff166370a08231610d696124bd565b6040518263ffffffff1660e01b8152600401610d85919061417a565b602060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190614775565b14610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd906147ee565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff166370a08231610e2c6124bd565b6040518263ffffffff1660e01b8152600401610e48919061417a565b602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190614775565b90506101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391f871168583610ed46124bd565b6040518463ffffffff1660e01b8152600401610ef29392919061480e565b600060405180830381600087803b158015610f0c57600080fd5b505af1158015610f20573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663b4bc6cac610f486124bd565b836040518363ffffffff1660e01b8152600401610f66929190614845565b600060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b5050505061103b610fa36124bd565b6101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9c3381b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611011573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103591906146c7565b836128d9565b6110436124bd565b73ffffffffffffffffffffffffffffffffffffffff167fbe0b6e5b3195df91f2e6b2b20501f84b085714f9e38073f499073c8305651009828660405161108a92919061486e565b60405180910390a2505061109c612b52565b5050565b6110b16110ab6124bd565b82612b5d565b50565b60008060019054906101000a900460ff161590508080156110e55750600160008054906101000a900460ff1660ff16105b8061111257506110f430612d2c565b1580156111115750600160008054906101000a900460ff1660ff16145b5b611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114890614909565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561118e576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f490614975565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361126c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611263906149e1565b60405180910390fd5b611274612d4f565b61127c612da0565b611284612df1565b6112f86040518060400160405280600981526020017f52657369546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f5245534900000000000000000000000000000000000000000000000000000000815250612e4b565b611300612ebe565b611308612f0f565b61133d7fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d6101c4612f6090919063ffffffff16565b506113737fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef6101c4612f6090919063ffffffff16565b506113a97f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b3206101c4612f6090919063ffffffff16565b506113db7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756113d66124bd565b6126a2565b6114057fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9846126a2565b61142f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177580612f77565b6114797fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612f77565b6114c37fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612f77565b61150d7f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b3207fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612f77565b816101c360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f0e474375f00439aaa979b958831081dcafa64837b226c4e5224cef141618df2460405160405180910390a380156116025760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516115f99190614a46565b60405180910390a15b505050565b600061012d60009054906101000a900460ff16905090565b7f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b32081565b600060c960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6116c2826116bc6124bd565b83612fd3565b6116cc8282612b5d565b5050565b6101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006117046101c461305f565b905090565b826040518060400160405280602081526020017f52657369546f6b656e3a20494e56414c49442052454345495645522041444452815250600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141581906117b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117aa9190613e1a565b60405180910390fd5b507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756117de8161268e565b6117e6612754565b6117f08587611be0565b61182f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182690614ad3565b60405180910390fd5b60006101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dafda8dd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561189f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c391906146c7565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401611900919061417a565b602060405180830381865afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119419190614775565b036119b4578073ffffffffffffffffffffffffffffffffffffffff166332443e5f88886040518363ffffffff1660e01b8152600401611981929190614af3565b600060405180830381600087803b15801561199b57600080fd5b505af11580156119af573d6000803e3d6000fd5b505050505b6119be8786613074565b60006101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663be71e4266040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a529190614775565b90508173ffffffffffffffffffffffffffffffffffffffff16634a8a4c2889886040518363ffffffff1660e01b8152600401611a8f929190614845565b600060405180830381600087803b158015611aa957600080fd5b505af1158015611abd573d6000803e3d6000fd5b505050506101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7f7dbef82886040518363ffffffff1660e01b8152600401611b1f92919061486e565b600060405180830381600087803b158015611b3957600080fd5b505af1158015611b4d573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff167f82eec8c85b596ee9b1fefe3a9e6cb9b2155e5cfc629bd7c2dfefa71ea1c0b09787604051611b979190613f1f565b60405180910390a25050611ba9612b52565b505050505050565b6000611bd882609760008681526020019081526020016000206131cb90919063ffffffff16565b905092915050565b60006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060cd8054611c5a9061448e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c869061448e565b8015611cd35780601f10611ca857610100808354040283529160200191611cd3565b820191906000526020600020905b815481529060010190602001808311611cb657829003601f168201915b5050505050905090565b6000801b81565b600080611cef6124bd565b90506000611cfd8286612248565b905083811015611d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3990614b8e565b60405180910390fd5b611d4f82868684036124c5565b60019250505092915050565b60006040517fa7447199000000000000000000000000000000000000000000000000000000008152600401611d8f90614bfa565b60405180910390fd5b611dc97fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9611dc46124bd565b611be0565b80611e015750611e007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611dfb6124bd565b611be0565b5b611e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e379061462f565b60405180910390fd5b611e49826110a0565b6101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350733a3982846040518363ffffffff1660e01b8152600401611ea792919061486e565b600060405180830381600087803b158015611ec157600080fd5b505af1158015611ed5573d6000803e3d6000fd5b50505050611ee16124bd565b73ffffffffffffffffffffffffffffffffffffffff167fcd77a98f47b9043b6dcb101dd1dc2a1291c2927d20ccc70399c3bc1b579522aa83604051611f269190613f1f565b60405180910390a25050565b7fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d81565b82604051806060016040528060228152602001615a3460229139600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158190611fe3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fda9190613e1a565b60405180910390fd5b507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561200e8161268e565b61201661270a565b61202085856131e5565b61204a7fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef876126a2565b8573ffffffffffffffffffffffffffffffffffffffff167f84e4291c73be57d74c52194b30c8ef1cd3f9fad6ee09e9f92a1e10fe132ad87360405160405180910390a2505050505050565b60006120b2609760008481526020019081526020016000206132f2565b9050919050565b82604051806060016040528060218152602001615a1360219139600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158190612146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213d9190613e1a565b60405180910390fd5b507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756121718161268e565b61217961270a565b61218385856131e5565b6121ad7fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d876126a2565b8573ffffffffffffffffffffffffffffffffffffffff167f3f529d264d8e06eb7e49eba4cbb9f873004164a7e2912722c44a493b9d11d111856040516121f39190613fff565b60405180910390a2505050505050565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca981565b61223082610906565b6122398161268e565b61224383836126d6565b505050565b600060ca60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b80604051806060016040528060228152602001615a3460229139600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415819061235c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123539190613e1a565b60405180910390fd5b507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756123878161268e565b61238f61270a565b6123b97f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b320856126a2565b8373ffffffffffffffffffffffffffffffffffffffff167f30dcfef07a52bb9c35eb0d03af05a579a69fbff969aa12c97277fb8d78832cf960405160405180910390a250505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561242c8161268e565b61243461270a565b61243e8383613307565b505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806124b657506124b5826134eb565b5b9050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252b90614c8c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036125a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259a90614d1e565b60405180910390fd5b8060ca60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516126819190613f1f565b60405180910390a3505050565b61269f8161269a6124bd565b613555565b50565b6126ac82826135da565b6126d181609760008581526020019081526020016000206136bb90919063ffffffff16565b505050565b6126e082826136eb565b61270581609760008581526020019081526020016000206137cd90919063ffffffff16565b505050565b612712611607565b15612752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274990614d8a565b60405180910390fd5b565b6002610191540361279a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279190614df6565b60405180910390fd5b600261019181905550565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca981141580156127f557507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758114155b612834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282b90614e62565b60405180910390fd5b612845816128406124bd565b611be0565b612884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287b90614ad3565b60405180910390fd5b60006128966128916124bd565b611643565b116128d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128cd90614ef4565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293f90614f86565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036129b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ae90615018565b60405180910390fd5b6129c28383836137fd565b600060c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a40906150aa565b60405180910390fd5b81810360c960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612b399190613f1f565b60405180910390a3612b4c84848461380d565b50505050565b600161019181905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc39061513c565b60405180910390fd5b612bd8826000836137fd565b600060c960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612c5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c56906151ce565b60405180910390fd5b81810360c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160cb60008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612d139190613f1f565b60405180910390a3612d278360008461380d565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9590615260565b60405180910390fd5b565b600060019054906101000a900460ff16612def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de690615260565b60405180910390fd5b565b600060019054906101000a900460ff16612e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3790615260565b60405180910390fd5b600161019181905550565b600060019054906101000a900460ff16612e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9190615260565b60405180910390fd5b8160cc9081612ea99190615422565b508060cd9081612eb99190615422565b505050565b600060019054906101000a900460ff16612f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0490615260565b60405180910390fd5b565b600060019054906101000a900460ff16612f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5590615260565b60405180910390fd5b565b6000612f6f8360000183613812565b905092915050565b6000612f8283610906565b90508160656000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6000612fdf8484612248565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114613059578181101561304b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304290615540565b60405180910390fd5b61305884848484036124c5565b5b50505050565b600061306d82600001613882565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036130e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130da906155ac565b60405180910390fd5b6130ef600083836137fd565b8060cb6000828254613101919061467e565b925050819055508060c960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516131b39190613f1f565b60405180910390a36131c76000838361380d565b5050565b60006131da8360000183613893565b60001c905092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561320f8161268e565b6101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634407220684846040518363ffffffff1660e01b815260040161326d9291906155cc565b602060405180830381865afa15801561328a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ae9190615621565b6132ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132e4906156c0565b60405180910390fd5b505050565b600061330082600001613882565b9050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756133318161268e565b827fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d81148061337f57507fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef81145b806133a957507f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b32081145b6133e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133df9061462f565b60405180910390fd5b6133f061270a565b60005b83518160ff1610156134e457600073ffffffffffffffffffffffffffffffffffffffff16848260ff168151811061342d5761342c6156e0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036134aa57838160ff1681518110613466576134656156e0565b5b60200260200101516040517f8e4c8aa60000000000000000000000000000000000000000000000000000000081526004016134a1919061417a565b60405180910390fd5b6134d185858360ff16815181106134c4576134c36156e0565b5b60200260200101516126a2565b80806134dc9061570f565b9150506133f3565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61355f8282611be0565b6135d65761356c816138be565b61357a8360001c60206138eb565b60405160200161358b92919061580c565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135cd9190613e1a565b60405180910390fd5b5050565b6135e48282611be0565b6136b75760016065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061365c6124bd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006136e3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613812565b905092915050565b6136f58282611be0565b156137c95760006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061376e6124bd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006137f5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613b27565b905092915050565b613808838383613c3b565b505050565b505050565b600061381e8383613c93565b61387757826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061387c565b600090505b92915050565b600081600001805490509050919050565b60008260000182815481106138ab576138aa6156e0565b5b9060005260206000200154905092915050565b60606138e48273ffffffffffffffffffffffffffffffffffffffff16601460ff166138eb565b9050919050565b6060600060028360026138fe9190615846565b613908919061467e565b67ffffffffffffffff811115613921576139206142c0565b5b6040519080825280601f01601f1916602001820160405280156139535781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061398b5761398a6156e0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106139ef576139ee6156e0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002613a2f9190615846565b613a39919061467e565b90505b6001811115613ad9577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613a7b57613a7a6156e0565b5b1a60f81b828281518110613a9257613a916156e0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613ad290615888565b9050613a3c565b5060008414613b1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b14906158fd565b60405180910390fd5b8091505092915050565b60008083600101600084815260200190815260200160002054905060008114613c2f576000600182613b59919061591d565b9050600060018660000180549050613b71919061591d565b9050818114613be0576000866000018281548110613b9257613b916156e0565b5b9060005260206000200154905080876000018481548110613bb657613bb56156e0565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613bf457613bf3615951565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613c35565b60009150505b92915050565b613c46838383613cb6565b613c4e611607565b15613c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c85906159f2565b60405180910390fd5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613d0481613ccf565b8114613d0f57600080fd5b50565b600081359050613d2181613cfb565b92915050565b600060208284031215613d3d57613d3c613cc5565b5b6000613d4b84828501613d12565b91505092915050565b60008115159050919050565b613d6981613d54565b82525050565b6000602082019050613d846000830184613d60565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613dc4578082015181840152602081019050613da9565b60008484015250505050565b6000601f19601f8301169050919050565b6000613dec82613d8a565b613df68185613d95565b9350613e06818560208601613da6565b613e0f81613dd0565b840191505092915050565b60006020820190508181036000830152613e348184613de1565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613e6782613e3c565b9050919050565b613e7781613e5c565b8114613e8257600080fd5b50565b600081359050613e9481613e6e565b92915050565b6000819050919050565b613ead81613e9a565b8114613eb857600080fd5b50565b600081359050613eca81613ea4565b92915050565b60008060408385031215613ee757613ee6613cc5565b5b6000613ef585828601613e85565b9250506020613f0685828601613ebb565b9150509250929050565b613f1981613e9a565b82525050565b6000602082019050613f346000830184613f10565b92915050565b600080600060608486031215613f5357613f52613cc5565b5b6000613f6186828701613e85565b9350506020613f7286828701613e85565b9250506040613f8386828701613ebb565b9150509250925092565b6000819050919050565b613fa081613f8d565b8114613fab57600080fd5b50565b600081359050613fbd81613f97565b92915050565b600060208284031215613fd957613fd8613cc5565b5b6000613fe784828501613fae565b91505092915050565b613ff981613f8d565b82525050565b60006020820190506140146000830184613ff0565b92915050565b6000806040838503121561403157614030613cc5565b5b600061403f85828601613fae565b925050602061405085828601613e85565b9150509250929050565b600060ff82169050919050565b6140708161405a565b82525050565b600060208201905061408b6000830184614067565b92915050565b600080604083850312156140a8576140a7613cc5565b5b60006140b685828601613ebb565b92505060206140c785828601613fae565b9150509250929050565b6000602082840312156140e7576140e6613cc5565b5b60006140f584828501613ebb565b91505092915050565b6000806040838503121561411557614114613cc5565b5b600061412385828601613e85565b925050602061413485828601613e85565b9150509250929050565b60006020828403121561415457614153613cc5565b5b600061416284828501613e85565b91505092915050565b61417481613e5c565b82525050565b600060208201905061418f600083018461416b565b92915050565b6000806000606084860312156141ae576141ad613cc5565b5b60006141bc86828701613e85565b93505060206141cd86828701613fae565b92505060406141de86828701613ebb565b9150509250925092565b600080604083850312156141ff576141fe613cc5565b5b600061420d85828601613fae565b925050602061421e85828601613ebb565b9150509250929050565b6000806040838503121561423f5761423e613cc5565b5b600061424d85828601613ebb565b925050602061425e85828601613ebb565b9150509250929050565b60008060006060848603121561428157614280613cc5565b5b600061428f86828701613e85565b93505060206142a086828701613ebb565b92505060406142b186828701613fae565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6142f882613dd0565b810181811067ffffffffffffffff82111715614317576143166142c0565b5b80604052505050565b600061432a613cbb565b905061433682826142ef565b919050565b600067ffffffffffffffff821115614356576143556142c0565b5b602082029050602081019050919050565b600080fd5b600061437f61437a8461433b565b614320565b905080838252602082019050602084028301858111156143a2576143a1614367565b5b835b818110156143cb57806143b78882613e85565b8452602084019350506020810190506143a4565b5050509392505050565b600082601f8301126143ea576143e96142bb565b5b81356143fa84826020860161436c565b91505092915050565b6000806040838503121561441a57614419613cc5565b5b600061442885828601613fae565b925050602083013567ffffffffffffffff81111561444957614448613cca565b5b614455858286016143d5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806144a657607f821691505b6020821081036144b9576144b861445f565b5b50919050565b7f52455349546f6b656e3a204e4f205452414e534645522046524f4d20414c4c4f60008201527f5745440000000000000000000000000000000000000000000000000000000000602082015250565b600061451b602383613d95565b9150614526826144bf565b604082019050919050565b6000602082019050818103600083015261454a8161450e565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006145ad602f83613d95565b91506145b882614551565b604082019050919050565b600060208201905081810360008301526145dc816145a0565b9050919050565b7f52657369546f6b656e3a20494e56414c494420524f4c45000000000000000000600082015250565b6000614619601783613d95565b9150614624826145e3565b602082019050919050565b600060208201905081810360008301526146488161460c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061468982613e9a565b915061469483613e9a565b92508282019050808211156146ac576146ab61464f565b5b92915050565b6000815190506146c181613e6e565b92915050565b6000602082840312156146dd576146dc613cc5565b5b60006146eb848285016146b2565b91505092915050565b7f52657369546f6b656e3a204e4f20534254205345524945205345540000000000600082015250565b600061472a601b83613d95565b9150614735826146f4565b602082019050919050565b600060208201905081810360008301526147598161471d565b9050919050565b60008151905061476f81613ea4565b92915050565b60006020828403121561478b5761478a613cc5565b5b600061479984828501614760565b91505092915050565b7f52657369546f6b656e3a205553455220484153204e4f20534254000000000000600082015250565b60006147d8601a83613d95565b91506147e3826147a2565b602082019050919050565b60006020820190508181036000830152614807816147cb565b9050919050565b60006060820190506148236000830186613f10565b6148306020830185613f10565b61483d604083018461416b565b949350505050565b600060408201905061485a600083018561416b565b6148676020830184613f10565b9392505050565b60006040820190506148836000830185613f10565b6148906020830184613f10565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006148f3602e83613d95565b91506148fe82614897565b604082019050919050565b60006020820190508181036000830152614922816148e6565b9050919050565b7f494e56414c494420545245415355525920414444524553530000000000000000600082015250565b600061495f601883613d95565b915061496a82614929565b602082019050919050565b6000602082019050818103600083015261498e81614952565b9050919050565b7f494e56414c494420524547495354525920414444524553530000000000000000600082015250565b60006149cb601883613d95565b91506149d682614995565b602082019050919050565b600060208201905081810360008301526149fa816149be565b9050919050565b6000819050919050565b6000819050919050565b6000614a30614a2b614a2684614a01565b614a0b565b61405a565b9050919050565b614a4081614a15565b82525050565b6000602082019050614a5b6000830184614a37565b92915050565b7f52657369546f6b656e3a204143434f554e5420484153204e4f542056414c494460008201527f20524f4c45000000000000000000000000000000000000000000000000000000602082015250565b6000614abd602583613d95565b9150614ac882614a61565b604082019050919050565b60006020820190508181036000830152614aec81614ab0565b9050919050565b6000604082019050614b08600083018561416b565b614b156020830184613ff0565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000614b78602583613d95565b9150614b8382614b1c565b604082019050919050565b60006020820190508181036000830152614ba781614b6b565b9050919050565b7f52455349546f6b656e3a204e4f205452414e5346455220414c4c4f5745440000600082015250565b6000614be4601e83613d95565b9150614bef82614bae565b602082019050919050565b60006020820190508181036000830152614c1381614bd7565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614c76602483613d95565b9150614c8182614c1a565b604082019050919050565b60006020820190508181036000830152614ca581614c69565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000614d08602283613d95565b9150614d1382614cac565b604082019050919050565b60006020820190508181036000830152614d3781614cfb565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614d74601083613d95565b9150614d7f82614d3e565b602082019050919050565b60006020820190508181036000830152614da381614d67565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614de0601f83613d95565b9150614deb82614daa565b602082019050919050565b60006020820190508181036000830152614e0f81614dd3565b9050919050565b7f52657369546f6b656e3a20494e56414c494420414354494f4e00000000000000600082015250565b6000614e4c601983613d95565b9150614e5782614e16565b602082019050919050565b60006020820190508181036000830152614e7b81614e3f565b9050919050565b7f52657369546f6b656e3a205573657220484153204e4f2046554e445320544f2060008201527f4558495400000000000000000000000000000000000000000000000000000000602082015250565b6000614ede602483613d95565b9150614ee982614e82565b604082019050919050565b60006020820190508181036000830152614f0d81614ed1565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614f70602583613d95565b9150614f7b82614f14565b604082019050919050565b60006020820190508181036000830152614f9f81614f63565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000615002602383613d95565b915061500d82614fa6565b604082019050919050565b6000602082019050818103600083015261503181614ff5565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000615094602683613d95565b915061509f82615038565b604082019050919050565b600060208201905081810360008301526150c381615087565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615126602183613d95565b9150615131826150ca565b604082019050919050565b6000602082019050818103600083015261515581615119565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006151b8602283613d95565b91506151c38261515c565b604082019050919050565b600060208201905081810360008301526151e7816151ab565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061524a602b83613d95565b9150615255826151ee565b604082019050919050565b600060208201905081810360008301526152798161523d565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026152e27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826152a5565b6152ec86836152a5565b95508019841693508086168417925050509392505050565b600061531f61531a61531584613e9a565b614a0b565b613e9a565b9050919050565b6000819050919050565b61533983615304565b61534d61534582615326565b8484546152b2565b825550505050565b600090565b615362615355565b61536d818484615330565b505050565b5b818110156153915761538660008261535a565b600181019050615373565b5050565b601f8211156153d6576153a781615280565b6153b084615295565b810160208510156153bf578190505b6153d36153cb85615295565b830182615372565b50505b505050565b600082821c905092915050565b60006153f9600019846008026153db565b1980831691505092915050565b600061541283836153e8565b9150826002028217905092915050565b61542b82613d8a565b67ffffffffffffffff811115615444576154436142c0565b5b61544e825461448e565b615459828285615395565b600060209050601f83116001811461548c576000841561547a578287015190505b6154848582615406565b8655506154ec565b601f19841661549a86615280565b60005b828110156154c25784890151825560018201915060208501945060208101905061549d565b868310156154df57848901516154db601f8916826153e8565b8355505b6001600288020188555050505b505050505050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061552a601d83613d95565b9150615535826154f4565b602082019050919050565b600060208201905081810360008301526155598161551d565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000615596601f83613d95565b91506155a182615560565b602082019050919050565b600060208201905081810360008301526155c581615589565b9050919050565b60006040820190506155e16000830185613f10565b6155ee6020830184613ff0565b9392505050565b6155fe81613d54565b811461560957600080fd5b50565b60008151905061561b816155f5565b92915050565b60006020828403121561563757615636613cc5565b5b60006156458482850161560c565b91505092915050565b7f52657369546f6b656e3a20494e56414c4944204f5220494e414354495645205360008201527f45524945204f522050524f4a4543540000000000000000000000000000000000602082015250565b60006156aa602f83613d95565b91506156b58261564e565b604082019050919050565b600060208201905081810360008301526156d98161569d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061571a8261405a565b915060ff820361572d5761572c61464f565b5b600182019050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615779601783615738565b915061578482615743565b601782019050919050565b600061579a82613d8a565b6157a48185615738565b93506157b4818560208601613da6565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006157f6601183615738565b9150615801826157c0565b601182019050919050565b60006158178261576c565b9150615823828561578f565b915061582e826157e9565b915061583a828461578f565b91508190509392505050565b600061585182613e9a565b915061585c83613e9a565b925082820261586a81613e9a565b915082820484148315176158815761588061464f565b5b5092915050565b600061589382613e9a565b9150600082036158a6576158a561464f565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006158e7602083613d95565b91506158f2826158b1565b602082019050919050565b60006020820190508181036000830152615916816158da565b9050919050565b600061592882613e9a565b915061593383613e9a565b925082820390508181111561594b5761594a61464f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f45524332305061757361626c653a20746f6b656e207472616e7366657220776860008201527f696c652070617573656400000000000000000000000000000000000000000000602082015250565b60006159dc602a83613d95565b91506159e782615980565b604082019050919050565b60006020820190508181036000830152615a0b816159cf565b905091905056fe52657369546f6b656e3a20494e56414c4944204d454e544f52204144445245535352657369546f6b656e3a20494e56414c4944204255494c4445522041444452455353a2646970667358221220ae46fb45ecd8c0446304a37e85a70579972c5c5926a5ed49af1b6b5a88ee562064736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c806379cc67901161013b578063b390c0ab116100b8578063d11a57ec1161007c578063d11a57ec146106ee578063d547741f1461070c578063dd62ed3e14610728578063f0771d9d14610758578063f81eeb6e146107745761023d565b8063b390c0ab1461064c578063bde5590714610668578063c4dde20d14610686578063ca15c873146106a2578063cc4afdc0146106d25761023d565b806391d14854116100ff57806391d148541461058057806395d89b41146105b0578063a217fddf146105ce578063a457c2d7146105ec578063a9059cbb1461061c5761023d565b806379cc6790146104dc5780637b9c8169146104f857806383d33319146105165780638536d834146105345780639010d07c146105505761023d565b806336568abe116101c9578063485cc9551161018d578063485cc955146104365780635c975abb146104525780636ce158dd1461047057806370a082311461048e57806375b238fc146104be5761023d565b806336568abe1461039657806338bcf016146103b257806339509351146103ce5780633eaee76f146103fe57806342966c681461041a5761023d565b806323b872dd1161021057806323b872dd146102de578063248a9ca31461030e57806329e534d81461033e5780632f2ff15d1461035c578063313ce567146103785761023d565b806301ffc9a71461024257806306fdde0314610272578063095ea7b31461029057806318160ddd146102c0575b600080fd5b61025c60048036038101906102579190613d27565b610790565b6040516102699190613d6f565b60405180910390f35b61027a61080a565b6040516102879190613e1a565b60405180910390f35b6102aa60048036038101906102a59190613ed0565b61089c565b6040516102b79190613d6f565b60405180910390f35b6102c86108bf565b6040516102d59190613f1f565b60405180910390f35b6102f860048036038101906102f39190613f3a565b6108c9565b6040516103059190613d6f565b60405180910390f35b61032860048036038101906103239190613fc3565b610906565b6040516103359190613fff565b60405180910390f35b610346610926565b6040516103539190613fff565b60405180910390f35b6103766004803603810190610371919061401a565b61094a565b005b61038061096b565b60405161038d9190614076565b60405180910390f35b6103b060048036038101906103ab919061401a565b610974565b005b6103cc60048036038101906103c7919061401a565b6109f7565b005b6103e860048036038101906103e39190613ed0565b610beb565b6040516103f59190613d6f565b60405180910390f35b61041860048036038101906104139190614091565b610c22565b005b610434600480360381019061042f91906140d1565b6110a0565b005b610450600480360381019061044b91906140fe565b6110b4565b005b61045a611607565b6040516104679190613d6f565b60405180910390f35b61047861161f565b6040516104859190613fff565b60405180910390f35b6104a860048036038101906104a3919061413e565b611643565b6040516104b59190613f1f565b60405180910390f35b6104c661168c565b6040516104d39190613fff565b60405180910390f35b6104f660048036038101906104f19190613ed0565b6116b0565b005b6105006116d0565b60405161050d919061417a565b60405180910390f35b61051e6116f7565b60405161052b9190613f1f565b60405180910390f35b61054e60048036038101906105499190614195565b611709565b005b61056a600480360381019061056591906141e8565b611bb1565b604051610577919061417a565b60405180910390f35b61059a6004803603810190610595919061401a565b611be0565b6040516105a79190613d6f565b60405180910390f35b6105b8611c4b565b6040516105c59190613e1a565b60405180910390f35b6105d6611cdd565b6040516105e39190613fff565b60405180910390f35b61060660048036038101906106019190613ed0565b611ce4565b6040516106139190613d6f565b60405180910390f35b61063660048036038101906106319190613ed0565b611d5b565b6040516106439190613d6f565b60405180910390f35b61066660048036038101906106619190614228565b611d98565b005b610670611f32565b60405161067d9190613fff565b60405180910390f35b6106a0600480360381019061069b9190614268565b611f56565b005b6106bc60048036038101906106b79190613fc3565b612095565b6040516106c99190613f1f565b60405180910390f35b6106ec60048036038101906106e79190614268565b6120b9565b005b6106f6612203565b6040516107039190613fff565b60405180910390f35b6107266004803603810190610721919061401a565b612227565b005b610742600480360381019061073d91906140fe565b612248565b60405161074f9190613f1f565b60405180910390f35b610772600480360381019061076d919061413e565b6122cf565b005b61078e60048036038101906107899190614403565b612402565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610803575061080282612443565b5b9050919050565b606060cc80546108199061448e565b80601f01602080910402602001604051908101604052809291908181526020018280546108459061448e565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b5050505050905090565b6000806108a76124bd565b90506108b48185856124c5565b600191505092915050565b600060cb54905090565b60006040517fb77a62390000000000000000000000000000000000000000000000000000000081526004016108fd90614531565b60405180910390fd5b600060656000838152602001908152602001600020600101549050919050565b7fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef81565b61095382610906565b61095c8161268e565b61096683836126a2565b505050565b60006012905090565b61097c6124bd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e0906145c3565b60405180910390fd5b6109f382826126d6565b5050565b806040518060400160405280601f81526020017f52657369546f6b656e3a20494e56414c49442055534552204144445245535300815250600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158190610aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a989190613e1a565b60405180910390fd5b50837fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d811480610af057507fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef81145b80610b1a57507f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b32081145b610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b509061462f565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b838161268e565b610b8b61270a565b610b9586866126d6565b8473ffffffffffffffffffffffffffffffffffffffff167f9078ef423f25fc1620bc801975005baea187d61a87d2dc9e56e8d8d84e39860c87604051610bdb9190613fff565b60405180910390a2505050505050565b600080610bf66124bd565b9050610c17818585610c088589612248565b610c12919061467e565b6124c5565b600191505092915050565b610c2a612754565b610c33816127a5565b60006101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ae202c1846040518263ffffffff1660e01b8152600401610c919190613f1f565b602060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd291906146c7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90614740565b60405180910390fd5b60018173ffffffffffffffffffffffffffffffffffffffff166370a08231610d696124bd565b6040518263ffffffff1660e01b8152600401610d85919061417a565b602060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190614775565b14610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd906147ee565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff166370a08231610e2c6124bd565b6040518263ffffffff1660e01b8152600401610e48919061417a565b602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190614775565b90506101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391f871168583610ed46124bd565b6040518463ffffffff1660e01b8152600401610ef29392919061480e565b600060405180830381600087803b158015610f0c57600080fd5b505af1158015610f20573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663b4bc6cac610f486124bd565b836040518363ffffffff1660e01b8152600401610f66929190614845565b600060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b5050505061103b610fa36124bd565b6101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9c3381b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611011573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103591906146c7565b836128d9565b6110436124bd565b73ffffffffffffffffffffffffffffffffffffffff167fbe0b6e5b3195df91f2e6b2b20501f84b085714f9e38073f499073c8305651009828660405161108a92919061486e565b60405180910390a2505061109c612b52565b5050565b6110b16110ab6124bd565b82612b5d565b50565b60008060019054906101000a900460ff161590508080156110e55750600160008054906101000a900460ff1660ff16105b8061111257506110f430612d2c565b1580156111115750600160008054906101000a900460ff1660ff16145b5b611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114890614909565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561118e576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f490614975565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361126c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611263906149e1565b60405180910390fd5b611274612d4f565b61127c612da0565b611284612df1565b6112f86040518060400160405280600981526020017f52657369546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f5245534900000000000000000000000000000000000000000000000000000000815250612e4b565b611300612ebe565b611308612f0f565b61133d7fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d6101c4612f6090919063ffffffff16565b506113737fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef6101c4612f6090919063ffffffff16565b506113a97f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b3206101c4612f6090919063ffffffff16565b506113db7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756113d66124bd565b6126a2565b6114057fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9846126a2565b61142f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177580612f77565b6114797fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612f77565b6114c37fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612f77565b61150d7f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b3207fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612f77565b816101c360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f0e474375f00439aaa979b958831081dcafa64837b226c4e5224cef141618df2460405160405180910390a380156116025760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516115f99190614a46565b60405180910390a15b505050565b600061012d60009054906101000a900460ff16905090565b7f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b32081565b600060c960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6116c2826116bc6124bd565b83612fd3565b6116cc8282612b5d565b5050565b6101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006117046101c461305f565b905090565b826040518060400160405280602081526020017f52657369546f6b656e3a20494e56414c49442052454345495645522041444452815250600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141581906117b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117aa9190613e1a565b60405180910390fd5b507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756117de8161268e565b6117e6612754565b6117f08587611be0565b61182f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182690614ad3565b60405180910390fd5b60006101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dafda8dd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561189f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c391906146c7565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401611900919061417a565b602060405180830381865afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119419190614775565b036119b4578073ffffffffffffffffffffffffffffffffffffffff166332443e5f88886040518363ffffffff1660e01b8152600401611981929190614af3565b600060405180830381600087803b15801561199b57600080fd5b505af11580156119af573d6000803e3d6000fd5b505050505b6119be8786613074565b60006101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663be71e4266040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a529190614775565b90508173ffffffffffffffffffffffffffffffffffffffff16634a8a4c2889886040518363ffffffff1660e01b8152600401611a8f929190614845565b600060405180830381600087803b158015611aa957600080fd5b505af1158015611abd573d6000803e3d6000fd5b505050506101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7f7dbef82886040518363ffffffff1660e01b8152600401611b1f92919061486e565b600060405180830381600087803b158015611b3957600080fd5b505af1158015611b4d573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff167f82eec8c85b596ee9b1fefe3a9e6cb9b2155e5cfc629bd7c2dfefa71ea1c0b09787604051611b979190613f1f565b60405180910390a25050611ba9612b52565b505050505050565b6000611bd882609760008681526020019081526020016000206131cb90919063ffffffff16565b905092915050565b60006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060cd8054611c5a9061448e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c869061448e565b8015611cd35780601f10611ca857610100808354040283529160200191611cd3565b820191906000526020600020905b815481529060010190602001808311611cb657829003601f168201915b5050505050905090565b6000801b81565b600080611cef6124bd565b90506000611cfd8286612248565b905083811015611d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3990614b8e565b60405180910390fd5b611d4f82868684036124c5565b60019250505092915050565b60006040517fa7447199000000000000000000000000000000000000000000000000000000008152600401611d8f90614bfa565b60405180910390fd5b611dc97fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9611dc46124bd565b611be0565b80611e015750611e007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611dfb6124bd565b611be0565b5b611e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e379061462f565b60405180910390fd5b611e49826110a0565b6101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350733a3982846040518363ffffffff1660e01b8152600401611ea792919061486e565b600060405180830381600087803b158015611ec157600080fd5b505af1158015611ed5573d6000803e3d6000fd5b50505050611ee16124bd565b73ffffffffffffffffffffffffffffffffffffffff167fcd77a98f47b9043b6dcb101dd1dc2a1291c2927d20ccc70399c3bc1b579522aa83604051611f269190613f1f565b60405180910390a25050565b7fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d81565b82604051806060016040528060228152602001615a3460229139600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158190611fe3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fda9190613e1a565b60405180910390fd5b507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561200e8161268e565b61201661270a565b61202085856131e5565b61204a7fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef876126a2565b8573ffffffffffffffffffffffffffffffffffffffff167f84e4291c73be57d74c52194b30c8ef1cd3f9fad6ee09e9f92a1e10fe132ad87360405160405180910390a2505050505050565b60006120b2609760008481526020019081526020016000206132f2565b9050919050565b82604051806060016040528060218152602001615a1360219139600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158190612146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213d9190613e1a565b60405180910390fd5b507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756121718161268e565b61217961270a565b61218385856131e5565b6121ad7fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d876126a2565b8573ffffffffffffffffffffffffffffffffffffffff167f3f529d264d8e06eb7e49eba4cbb9f873004164a7e2912722c44a493b9d11d111856040516121f39190613fff565b60405180910390a2505050505050565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca981565b61223082610906565b6122398161268e565b61224383836126d6565b505050565b600060ca60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b80604051806060016040528060228152602001615a3460229139600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415819061235c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123539190613e1a565b60405180910390fd5b507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756123878161268e565b61238f61270a565b6123b97f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b320856126a2565b8373ffffffffffffffffffffffffffffffffffffffff167f30dcfef07a52bb9c35eb0d03af05a579a69fbff969aa12c97277fb8d78832cf960405160405180910390a250505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561242c8161268e565b61243461270a565b61243e8383613307565b505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806124b657506124b5826134eb565b5b9050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252b90614c8c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036125a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259a90614d1e565b60405180910390fd5b8060ca60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516126819190613f1f565b60405180910390a3505050565b61269f8161269a6124bd565b613555565b50565b6126ac82826135da565b6126d181609760008581526020019081526020016000206136bb90919063ffffffff16565b505050565b6126e082826136eb565b61270581609760008581526020019081526020016000206137cd90919063ffffffff16565b505050565b612712611607565b15612752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274990614d8a565b60405180910390fd5b565b6002610191540361279a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279190614df6565b60405180910390fd5b600261019181905550565b7fe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca981141580156127f557507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758114155b612834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282b90614e62565b60405180910390fd5b612845816128406124bd565b611be0565b612884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287b90614ad3565b60405180910390fd5b60006128966128916124bd565b611643565b116128d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128cd90614ef4565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293f90614f86565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036129b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ae90615018565b60405180910390fd5b6129c28383836137fd565b600060c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a40906150aa565b60405180910390fd5b81810360c960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612b399190613f1f565b60405180910390a3612b4c84848461380d565b50505050565b600161019181905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc39061513c565b60405180910390fd5b612bd8826000836137fd565b600060c960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612c5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c56906151ce565b60405180910390fd5b81810360c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160cb60008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612d139190613f1f565b60405180910390a3612d278360008461380d565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9590615260565b60405180910390fd5b565b600060019054906101000a900460ff16612def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de690615260565b60405180910390fd5b565b600060019054906101000a900460ff16612e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3790615260565b60405180910390fd5b600161019181905550565b600060019054906101000a900460ff16612e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9190615260565b60405180910390fd5b8160cc9081612ea99190615422565b508060cd9081612eb99190615422565b505050565b600060019054906101000a900460ff16612f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0490615260565b60405180910390fd5b565b600060019054906101000a900460ff16612f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5590615260565b60405180910390fd5b565b6000612f6f8360000183613812565b905092915050565b6000612f8283610906565b90508160656000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6000612fdf8484612248565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114613059578181101561304b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304290615540565b60405180910390fd5b61305884848484036124c5565b5b50505050565b600061306d82600001613882565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036130e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130da906155ac565b60405180910390fd5b6130ef600083836137fd565b8060cb6000828254613101919061467e565b925050819055508060c960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516131b39190613f1f565b60405180910390a36131c76000838361380d565b5050565b60006131da8360000183613893565b60001c905092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561320f8161268e565b6101c360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634407220684846040518363ffffffff1660e01b815260040161326d9291906155cc565b602060405180830381865afa15801561328a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ae9190615621565b6132ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132e4906156c0565b60405180910390fd5b505050565b600061330082600001613882565b9050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756133318161268e565b827fbc89434ca2514fee8e4f1c01e12ea3f98386861885da7e20823bb874ad54a49d81148061337f57507fe4bd89038d9c0807976fffd21940a131656c4bbb6d2ed823353b579168c0d4ef81145b806133a957507f699ac1e5cfdbc8c928b2c79f6b19694117e156140dadd5181e71e79b5e80b32081145b6133e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133df9061462f565b60405180910390fd5b6133f061270a565b60005b83518160ff1610156134e457600073ffffffffffffffffffffffffffffffffffffffff16848260ff168151811061342d5761342c6156e0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036134aa57838160ff1681518110613466576134656156e0565b5b60200260200101516040517f8e4c8aa60000000000000000000000000000000000000000000000000000000081526004016134a1919061417a565b60405180910390fd5b6134d185858360ff16815181106134c4576134c36156e0565b5b60200260200101516126a2565b80806134dc9061570f565b9150506133f3565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61355f8282611be0565b6135d65761356c816138be565b61357a8360001c60206138eb565b60405160200161358b92919061580c565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135cd9190613e1a565b60405180910390fd5b5050565b6135e48282611be0565b6136b75760016065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061365c6124bd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006136e3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613812565b905092915050565b6136f58282611be0565b156137c95760006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061376e6124bd565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006137f5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613b27565b905092915050565b613808838383613c3b565b505050565b505050565b600061381e8383613c93565b61387757826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061387c565b600090505b92915050565b600081600001805490509050919050565b60008260000182815481106138ab576138aa6156e0565b5b9060005260206000200154905092915050565b60606138e48273ffffffffffffffffffffffffffffffffffffffff16601460ff166138eb565b9050919050565b6060600060028360026138fe9190615846565b613908919061467e565b67ffffffffffffffff811115613921576139206142c0565b5b6040519080825280601f01601f1916602001820160405280156139535781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061398b5761398a6156e0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106139ef576139ee6156e0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002613a2f9190615846565b613a39919061467e565b90505b6001811115613ad9577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613a7b57613a7a6156e0565b5b1a60f81b828281518110613a9257613a916156e0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613ad290615888565b9050613a3c565b5060008414613b1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b14906158fd565b60405180910390fd5b8091505092915050565b60008083600101600084815260200190815260200160002054905060008114613c2f576000600182613b59919061591d565b9050600060018660000180549050613b71919061591d565b9050818114613be0576000866000018281548110613b9257613b916156e0565b5b9060005260206000200154905080876000018481548110613bb657613bb56156e0565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613bf457613bf3615951565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613c35565b60009150505b92915050565b613c46838383613cb6565b613c4e611607565b15613c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c85906159f2565b60405180910390fd5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613d0481613ccf565b8114613d0f57600080fd5b50565b600081359050613d2181613cfb565b92915050565b600060208284031215613d3d57613d3c613cc5565b5b6000613d4b84828501613d12565b91505092915050565b60008115159050919050565b613d6981613d54565b82525050565b6000602082019050613d846000830184613d60565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613dc4578082015181840152602081019050613da9565b60008484015250505050565b6000601f19601f8301169050919050565b6000613dec82613d8a565b613df68185613d95565b9350613e06818560208601613da6565b613e0f81613dd0565b840191505092915050565b60006020820190508181036000830152613e348184613de1565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613e6782613e3c565b9050919050565b613e7781613e5c565b8114613e8257600080fd5b50565b600081359050613e9481613e6e565b92915050565b6000819050919050565b613ead81613e9a565b8114613eb857600080fd5b50565b600081359050613eca81613ea4565b92915050565b60008060408385031215613ee757613ee6613cc5565b5b6000613ef585828601613e85565b9250506020613f0685828601613ebb565b9150509250929050565b613f1981613e9a565b82525050565b6000602082019050613f346000830184613f10565b92915050565b600080600060608486031215613f5357613f52613cc5565b5b6000613f6186828701613e85565b9350506020613f7286828701613e85565b9250506040613f8386828701613ebb565b9150509250925092565b6000819050919050565b613fa081613f8d565b8114613fab57600080fd5b50565b600081359050613fbd81613f97565b92915050565b600060208284031215613fd957613fd8613cc5565b5b6000613fe784828501613fae565b91505092915050565b613ff981613f8d565b82525050565b60006020820190506140146000830184613ff0565b92915050565b6000806040838503121561403157614030613cc5565b5b600061403f85828601613fae565b925050602061405085828601613e85565b9150509250929050565b600060ff82169050919050565b6140708161405a565b82525050565b600060208201905061408b6000830184614067565b92915050565b600080604083850312156140a8576140a7613cc5565b5b60006140b685828601613ebb565b92505060206140c785828601613fae565b9150509250929050565b6000602082840312156140e7576140e6613cc5565b5b60006140f584828501613ebb565b91505092915050565b6000806040838503121561411557614114613cc5565b5b600061412385828601613e85565b925050602061413485828601613e85565b9150509250929050565b60006020828403121561415457614153613cc5565b5b600061416284828501613e85565b91505092915050565b61417481613e5c565b82525050565b600060208201905061418f600083018461416b565b92915050565b6000806000606084860312156141ae576141ad613cc5565b5b60006141bc86828701613e85565b93505060206141cd86828701613fae565b92505060406141de86828701613ebb565b9150509250925092565b600080604083850312156141ff576141fe613cc5565b5b600061420d85828601613fae565b925050602061421e85828601613ebb565b9150509250929050565b6000806040838503121561423f5761423e613cc5565b5b600061424d85828601613ebb565b925050602061425e85828601613ebb565b9150509250929050565b60008060006060848603121561428157614280613cc5565b5b600061428f86828701613e85565b93505060206142a086828701613ebb565b92505060406142b186828701613fae565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6142f882613dd0565b810181811067ffffffffffffffff82111715614317576143166142c0565b5b80604052505050565b600061432a613cbb565b905061433682826142ef565b919050565b600067ffffffffffffffff821115614356576143556142c0565b5b602082029050602081019050919050565b600080fd5b600061437f61437a8461433b565b614320565b905080838252602082019050602084028301858111156143a2576143a1614367565b5b835b818110156143cb57806143b78882613e85565b8452602084019350506020810190506143a4565b5050509392505050565b600082601f8301126143ea576143e96142bb565b5b81356143fa84826020860161436c565b91505092915050565b6000806040838503121561441a57614419613cc5565b5b600061442885828601613fae565b925050602083013567ffffffffffffffff81111561444957614448613cca565b5b614455858286016143d5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806144a657607f821691505b6020821081036144b9576144b861445f565b5b50919050565b7f52455349546f6b656e3a204e4f205452414e534645522046524f4d20414c4c4f60008201527f5745440000000000000000000000000000000000000000000000000000000000602082015250565b600061451b602383613d95565b9150614526826144bf565b604082019050919050565b6000602082019050818103600083015261454a8161450e565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006145ad602f83613d95565b91506145b882614551565b604082019050919050565b600060208201905081810360008301526145dc816145a0565b9050919050565b7f52657369546f6b656e3a20494e56414c494420524f4c45000000000000000000600082015250565b6000614619601783613d95565b9150614624826145e3565b602082019050919050565b600060208201905081810360008301526146488161460c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061468982613e9a565b915061469483613e9a565b92508282019050808211156146ac576146ab61464f565b5b92915050565b6000815190506146c181613e6e565b92915050565b6000602082840312156146dd576146dc613cc5565b5b60006146eb848285016146b2565b91505092915050565b7f52657369546f6b656e3a204e4f20534254205345524945205345540000000000600082015250565b600061472a601b83613d95565b9150614735826146f4565b602082019050919050565b600060208201905081810360008301526147598161471d565b9050919050565b60008151905061476f81613ea4565b92915050565b60006020828403121561478b5761478a613cc5565b5b600061479984828501614760565b91505092915050565b7f52657369546f6b656e3a205553455220484153204e4f20534254000000000000600082015250565b60006147d8601a83613d95565b91506147e3826147a2565b602082019050919050565b60006020820190508181036000830152614807816147cb565b9050919050565b60006060820190506148236000830186613f10565b6148306020830185613f10565b61483d604083018461416b565b949350505050565b600060408201905061485a600083018561416b565b6148676020830184613f10565b9392505050565b60006040820190506148836000830185613f10565b6148906020830184613f10565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006148f3602e83613d95565b91506148fe82614897565b604082019050919050565b60006020820190508181036000830152614922816148e6565b9050919050565b7f494e56414c494420545245415355525920414444524553530000000000000000600082015250565b600061495f601883613d95565b915061496a82614929565b602082019050919050565b6000602082019050818103600083015261498e81614952565b9050919050565b7f494e56414c494420524547495354525920414444524553530000000000000000600082015250565b60006149cb601883613d95565b91506149d682614995565b602082019050919050565b600060208201905081810360008301526149fa816149be565b9050919050565b6000819050919050565b6000819050919050565b6000614a30614a2b614a2684614a01565b614a0b565b61405a565b9050919050565b614a4081614a15565b82525050565b6000602082019050614a5b6000830184614a37565b92915050565b7f52657369546f6b656e3a204143434f554e5420484153204e4f542056414c494460008201527f20524f4c45000000000000000000000000000000000000000000000000000000602082015250565b6000614abd602583613d95565b9150614ac882614a61565b604082019050919050565b60006020820190508181036000830152614aec81614ab0565b9050919050565b6000604082019050614b08600083018561416b565b614b156020830184613ff0565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000614b78602583613d95565b9150614b8382614b1c565b604082019050919050565b60006020820190508181036000830152614ba781614b6b565b9050919050565b7f52455349546f6b656e3a204e4f205452414e5346455220414c4c4f5745440000600082015250565b6000614be4601e83613d95565b9150614bef82614bae565b602082019050919050565b60006020820190508181036000830152614c1381614bd7565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614c76602483613d95565b9150614c8182614c1a565b604082019050919050565b60006020820190508181036000830152614ca581614c69565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000614d08602283613d95565b9150614d1382614cac565b604082019050919050565b60006020820190508181036000830152614d3781614cfb565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614d74601083613d95565b9150614d7f82614d3e565b602082019050919050565b60006020820190508181036000830152614da381614d67565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614de0601f83613d95565b9150614deb82614daa565b602082019050919050565b60006020820190508181036000830152614e0f81614dd3565b9050919050565b7f52657369546f6b656e3a20494e56414c494420414354494f4e00000000000000600082015250565b6000614e4c601983613d95565b9150614e5782614e16565b602082019050919050565b60006020820190508181036000830152614e7b81614e3f565b9050919050565b7f52657369546f6b656e3a205573657220484153204e4f2046554e445320544f2060008201527f4558495400000000000000000000000000000000000000000000000000000000602082015250565b6000614ede602483613d95565b9150614ee982614e82565b604082019050919050565b60006020820190508181036000830152614f0d81614ed1565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614f70602583613d95565b9150614f7b82614f14565b604082019050919050565b60006020820190508181036000830152614f9f81614f63565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000615002602383613d95565b915061500d82614fa6565b604082019050919050565b6000602082019050818103600083015261503181614ff5565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000615094602683613d95565b915061509f82615038565b604082019050919050565b600060208201905081810360008301526150c381615087565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615126602183613d95565b9150615131826150ca565b604082019050919050565b6000602082019050818103600083015261515581615119565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006151b8602283613d95565b91506151c38261515c565b604082019050919050565b600060208201905081810360008301526151e7816151ab565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061524a602b83613d95565b9150615255826151ee565b604082019050919050565b600060208201905081810360008301526152798161523d565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026152e27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826152a5565b6152ec86836152a5565b95508019841693508086168417925050509392505050565b600061531f61531a61531584613e9a565b614a0b565b613e9a565b9050919050565b6000819050919050565b61533983615304565b61534d61534582615326565b8484546152b2565b825550505050565b600090565b615362615355565b61536d818484615330565b505050565b5b818110156153915761538660008261535a565b600181019050615373565b5050565b601f8211156153d6576153a781615280565b6153b084615295565b810160208510156153bf578190505b6153d36153cb85615295565b830182615372565b50505b505050565b600082821c905092915050565b60006153f9600019846008026153db565b1980831691505092915050565b600061541283836153e8565b9150826002028217905092915050565b61542b82613d8a565b67ffffffffffffffff811115615444576154436142c0565b5b61544e825461448e565b615459828285615395565b600060209050601f83116001811461548c576000841561547a578287015190505b6154848582615406565b8655506154ec565b601f19841661549a86615280565b60005b828110156154c25784890151825560018201915060208501945060208101905061549d565b868310156154df57848901516154db601f8916826153e8565b8355505b6001600288020188555050505b505050505050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061552a601d83613d95565b9150615535826154f4565b602082019050919050565b600060208201905081810360008301526155598161551d565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000615596601f83613d95565b91506155a182615560565b602082019050919050565b600060208201905081810360008301526155c581615589565b9050919050565b60006040820190506155e16000830185613f10565b6155ee6020830184613ff0565b9392505050565b6155fe81613d54565b811461560957600080fd5b50565b60008151905061561b816155f5565b92915050565b60006020828403121561563757615636613cc5565b5b60006156458482850161560c565b91505092915050565b7f52657369546f6b656e3a20494e56414c4944204f5220494e414354495645205360008201527f45524945204f522050524f4a4543540000000000000000000000000000000000602082015250565b60006156aa602f83613d95565b91506156b58261564e565b604082019050919050565b600060208201905081810360008301526156d98161569d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061571a8261405a565b915060ff820361572d5761572c61464f565b5b600182019050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615779601783615738565b915061578482615743565b601782019050919050565b600061579a82613d8a565b6157a48185615738565b93506157b4818560208601613da6565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006157f6601183615738565b9150615801826157c0565b601182019050919050565b60006158178261576c565b9150615823828561578f565b915061582e826157e9565b915061583a828461578f565b91508190509392505050565b600061585182613e9a565b915061585c83613e9a565b925082820261586a81613e9a565b915082820484148315176158815761588061464f565b5b5092915050565b600061589382613e9a565b9150600082036158a6576158a561464f565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006158e7602083613d95565b91506158f2826158b1565b602082019050919050565b60006020820190508181036000830152615916816158da565b9050919050565b600061592882613e9a565b915061593383613e9a565b925082820390508181111561594b5761594a61464f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f45524332305061757361626c653a20746f6b656e207472616e7366657220776860008201527f696c652070617573656400000000000000000000000000000000000000000000602082015250565b60006159dc602a83613d95565b91506159e782615980565b604082019050919050565b60006020820190508181036000830152615a0b816159cf565b905091905056fe52657369546f6b656e3a20494e56414c4944204d454e544f52204144445245535352657369546f6b656e3a20494e56414c4944204255494c4445522041444452455353a2646970667358221220ae46fb45ecd8c0446304a37e85a70579972c5c5926a5ed49af1b6b5a88ee562064736f6c63430008120033",
  "devdoc": {
    "author": "Alejo Lovallo",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addMentor(address,uint256,bytes32)": {
        "details": "assign MENTOR ROLE to user for specific project",
        "params": {
          "_mentor": "user address",
          "_project": "project name",
          "_serieId": "serie id"
        }
      },
      "addProjectBuilder(address,uint256,bytes32)": {
        "details": "assign PROJECT BUILDER role to a user for specific project",
        "params": {
          "_builder": "user address",
          "_project": "project name",
          "_serieId": "serie id"
        }
      },
      "addResiBuilder(address)": {
        "details": "assign RESI BUILDER role to user",
        "params": {
          "_builder": "user address"
        }
      },
      "addRolesBatch(bytes32,address[])": {
        "details": "assign specific role to more than one user",
        "params": {
          "_addresses": "users array",
          "_role": "role to assign"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "award(address,bytes32,uint256)": {
        "details": "Award user with ResiTokens",
        "params": {
          "_account": "user to award",
          "_amount": "amount to award",
          "_role": "user role"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burn(uint256,uint256)": {
        "details": "burn Resi Token",
        "params": {
          "_amount": "amount to burn"
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "exit(uint256,bytes32)": {
        "details": "Perform exit to receive serie funds",
        "params": {
          "_role": "user role",
          "_serieId": "serie id"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleCount()": {
        "details": "Get amount of roles",
        "returns": {
          "_0": "amount of roles"
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeUserRole(bytes32,address)": {
        "details": "unassign role for user",
        "params": {
          "_role": "role",
          "_user": "user address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "It is not allowed to transfer resi token"
      },
      "transferFrom(address,address,uint256)": {
        "details": "It is not allowed to transfer resi token"
      }
    },
    "stateVariables": {
      "ADMIN_ROLE": {
        "details": "ADMIN ROLE"
      },
      "MENTOR_ROLE": {
        "details": "MENTOR ROLE"
      },
      "PROJECT_BUILDER_ROLE": {
        "details": "PROJECT BUILDER ROLE"
      },
      "RESI_BUILDER_ROLE": {
        "details": "RESI BUILDER ROLE"
      },
      "RESI_REGISTRY": {
        "details": "Resi Registry contract"
      },
      "TREASURY_ROLE": {
        "details": "TREASURY ROLE"
      }
    },
    "title": "Resi Token Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "ERC20 Resi Token",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 720,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3501,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3720,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4924_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1098,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1104,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1106,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 1108,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_name",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 1110,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 1690,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1832,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 900,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_paused",
        "offset": 0,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 1005,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1892,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1020,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_status",
        "offset": 0,
        "slot": "401",
        "type": "t_uint256"
      },
      {
        "astId": 1078,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "__gap",
        "offset": 0,
        "slot": "402",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8396,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "RESI_REGISTRY",
        "offset": 0,
        "slot": "451",
        "type": "t_address"
      },
      {
        "astId": 8403,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_rolesSet",
        "offset": 0,
        "slot": "452",
        "type": "t_struct(Bytes32Set)4803_storage"
      },
      {
        "astId": 9107,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "upgradeGap",
        "offset": 0,
        "slot": "454",
        "type": "t_array(t_uint256)20_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4924_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4924_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4924_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4923,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4609_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)4803_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Bytes32Set",
        "members": [
          {
            "astId": 4802,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4609_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4609_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4604,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4608,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}