{
  "address": "0x3c811E4166d11F842643F84abb2A30264EAD4589",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "TransferForbidden",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "contractUri",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseResiBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldUri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "DefaultRoleUriUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseResiBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MintSBT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nickname",
          "type": "bytes32"
        }
      ],
      "name": "NicknameUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_resiToken",
          "type": "address"
        }
      ],
      "name": "ResiSBTInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "SBTMintedByResiToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RESI_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESI_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SERIE_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseResiTokenBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseResiTokenBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "isSBTReceiver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_to",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "mintBatchByRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "mintByResiToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "resiTokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractUri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setDefaultRoleUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nickname",
          "type": "bytes32"
        }
      ],
      "name": "setNickName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNickNames",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3bad56cc77709266d93e758764097b737eda96517c63e0d4db9a15f4405c14e",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0x3c811E4166d11F842643F84abb2A30264EAD4589",
    "transactionIndex": 24,
    "gasUsed": "4667413",
    "logsBloom": "0x
    "blockHash": "0xcfb37cb8f79ec33388e9501612b448aa3f01e233ef9d3bae48817fee5801620d",
    "transactionHash": "0xa3bad56cc77709266d93e758764097b737eda96517c63e0d4db9a15f4405c14e",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 36820385,
        "transactionHash": "0xa3bad56cc77709266d93e758764097b737eda96517c63e0d4db9a15f4405c14e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000153073310327caa6abb76f735d115e5c8ba1617b",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000018df7b22fc414700000000000000000000000000000000000000000000000015907d33c2ad2c6d000000000000000000000000000000000000000000000aeee5205488f168e4d900000000000000000000000000000000000000000000000015779db89fb0eb26000000000000000000000000000000000000000000000aeee539340414652620",
        "logIndex": 103,
        "blockHash": "0xcfb37cb8f79ec33388e9501612b448aa3f01e233ef9d3bae48817fee5801620d"
      }
    ],
    "blockNumber": 36820385,
    "cumulativeGasUsed": "8541979",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1ed97a85cf6c1ab129aa00613e7abdf1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TransferForbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractUri\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecreaseResiBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"DefaultRoleUriUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseResiBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MintSBT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nickname\",\"type\":\"bytes32\"}],\"name\":\"NicknameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_resiToken\",\"type\":\"address\"}],\"name\":\"ResiSBTInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"SBTMintedByResiToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RESI_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESI_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERIE_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseResiTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseResiTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"isSBTReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"mintBatchByRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"mintByResiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"resiTokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setDefaultRoleUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nickname\",\"type\":\"bytes32\"}],\"name\":\"setNickName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNickNames\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alejo Lovallo\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Locked(uint256)\":{\"details\":\"If a token is minted and the status is locked, this event should be emitted.\",\"params\":{\"tokenId\":\"The identifier for a token.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unlocked(uint256)\":{\"details\":\"If a token is minted and the status is unlocked, this event should be emitted.\",\"params\":{\"tokenId\":\"The identifier for a token.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"locked(uint256)\":{\"details\":\"Know if a sbt is locked\",\"params\":{\"tokenId\":\"sbt token id\"},\"returns\":{\"_0\":\"is sbt locked\"}},\"mint(address,bytes32,string)\":{\"details\":\"Mint SBT to user with specific role and uri.\",\"params\":{\"_role\":\"role name from Resi registry\",\"_to\":\"user\",\"_uri\":\"uri\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"params\":{\"_contractUri\":\"contractUri\"}},\"setDefaultRoleUri(bytes32,string)\":{\"details\":\"Set default Resi Token Role URI\",\"params\":{\"_role\":\"role name\",\"_uri\":\"default uri\"}},\"setRegistry(address)\":{\"details\":\"Set Resi Registry\",\"params\":{\"_registry\":\"registry address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"custom:experimental\":\"The following function is override required by Solidity.\",\"details\":\"Retrieve token uri from id\",\"params\":{\"tokenId\":\"token id to retrieve uri\"},\"returns\":{\"_0\":\"uri\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"RESI_REGISTRY\":{\"details\":\"Resi Registry contract\"},\"RESI_TOKEN\":{\"details\":\"Resi ERC20 token contract\"},\"SERIE_ID\":{\"details\":\"Serie id\"},\"_tokenIdCounter\":{\"details\":\"Private counter to make internal security checks\"},\"contractUri\":{\"details\":\"Token ContractUri\"},\"defaultRoleUris\":{\"details\":\"role => uri\"},\"lockedSBTs\":{\"details\":\"tokenId => isLocked\"},\"resiTokenBalances\":{\"details\":\"user => resi erc20 balances\"},\"upgradeGap\":{\"details\":\"Leave a gap betweeen inherited contracts variables in orderto be able to add more variables in them later.\"},\"userNickNames\":{\"details\":\"user => nickname\"}},\"title\":\"Resi SBT Contract\",\"version\":1},\"userdoc\":{\"events\":{\"Locked(uint256)\":{\"notice\":\"Emitted when the locking status is changed to locked.\"},\"Unlocked(uint256)\":{\"notice\":\"Emitted when the locking status is changed to unlocked.\"}},\"kind\":\"user\",\"methods\":{\"setContractURI(string)\":{\"notice\":\"Modify contractUri for NFT collection\"}},\"notice\":\"SBT token linked to a Serie\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ResiSBT.sol\":\"ResiSBT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2170f806b104c046093a129e9fde0b97a02482cb3ab9ea12a195906e6ca428b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/ResiSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./interfaces/IResiSBT.sol\\\";\\nimport \\\"./interfaces/IResiRegistry.sol\\\";\\nimport \\\"./interfaces/IResiToken.sol\\\";\\nimport \\\"./interfaces/IERC5192.sol\\\";\\n\\n/// @title Resi SBT Contract\\n/// @author Alejo Lovallo\\n/// @notice SBT token linked to a Serie\\ncontract ResiSBT is IResiSBT, IERC5192, OwnableUpgradeable, ERC721URIStorageUpgradeable, ReentrancyGuardUpgradeable {\\n    using Counters for Counters.Counter;\\n    /// @dev Private counter to make internal security checks\\n    Counters.Counter private _tokenIdCounter;\\n\\n    /// @dev Token ContractUri\\n    string public contractUri;\\n    /// @dev Serie id\\n    uint256 public SERIE_ID;\\n    /// @dev Resi ERC20 token contract\\n    address public RESI_TOKEN;\\n    /// @dev Resi Registry contract\\n    address public RESI_REGISTRY;\\n\\n    /// @dev user => nickname\\n    mapping(address => bytes32) public userNickNames;\\n    /// @dev user => resi erc20 balances\\n    mapping(address => uint256) public resiTokenBalances;\\n    /// @dev tokenId => isLocked\\n    mapping(uint256 => bool) private lockedSBTs;\\n    /// @dev role => uri\\n    mapping(bytes32 => string) private defaultRoleUris;\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _contractUri,\\n        uint256 _serieId,\\n        address _registry,\\n        address _token\\n    ) external initializer {\\n        require(_registry != address(0), \\\"INVALID REGISTRY ADDRESS\\\");\\n        require(_token != address(0), \\\"INVALID RESI TOKEN ADDRESS\\\");\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __ERC721_init_unchained(_name, _symbol);\\n        __ERC721URIStorage_init_unchained();\\n\\n        RESI_REGISTRY = _registry;\\n        RESI_TOKEN = _token;\\n        SERIE_ID = _serieId;\\n        contractUri = _contractUri;\\n\\n        emit ResiSBTInitialized(_name, _symbol, _serieId, _registry, _token);\\n    }\\n\\n    /**************************** GETTERS  ****************************/\\n    /**\\n     * @dev Retrieve token uri from id\\n     * @param tokenId token id to retrieve uri\\n     * @return uri\\n     * @custom:experimental The following function is override required by Solidity.\\n     */\\n    function tokenURI(uint256 tokenId) public view override(ERC721URIStorageUpgradeable) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Know if a sbt is locked\\n     * @param tokenId sbt token id\\n     * @return is sbt locked\\n     */\\n    function locked(uint256 tokenId) external view returns (bool) {\\n        return lockedSBTs[tokenId];\\n    }\\n\\n    function isSBTReceiver(address _account, bytes32 _role, uint256 _serieId) public view returns (bool) {\\n        if (\\n            IAccessControlUpgradeable(RESI_TOKEN).hasRole(_role, _account) &&\\n            IResiRegistry(RESI_REGISTRY).activeSerie() == _serieId\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**************************** INTERFACE  ****************************/\\n\\n    function setNickName(bytes32 _nickname) external {\\n        require(balanceOf(_msgSender()) == 1, \\\"ResiSBT: NOT AN SBT OWNER\\\");\\n        require(_nickname != bytes32(0), \\\"ResiSBT: INVALID NICKNAME\\\");\\n        userNickNames[_msgSender()] = _nickname;\\n        emit NicknameUpdated(_msgSender(), _nickname);\\n    }\\n\\n    /// @notice Modify contractUri for NFT collection\\n    /// @param _contractUri contractUri\\n    function setContractURI(string memory _contractUri) external onlyOwner {\\n        contractUri = _contractUri;\\n        emit ContractURIUpdated(contractUri);\\n    }\\n\\n    /**\\n     * @dev Set Resi Registry\\n     * @param _registry registry address\\n     */\\n    function setRegistry(address _registry) external onlyOwner {\\n        require(_registry != address(0), \\\"INVALID REGISTRY ADDRESS\\\");\\n        RESI_REGISTRY = _registry;\\n        emit RegistrySet(_registry);\\n    }\\n\\n    /**\\n     * @dev Set default Resi Token Role URI\\n     * @param _role role name\\n     * @param _uri default uri\\n     */\\n    function setDefaultRoleUri(bytes32 _role, string calldata _uri) external onlyOwner {\\n        require(_role != bytes32(0), \\\"ResiSBT: INVALID ROLE\\\");\\n        require(bytes(_uri).length > 0, \\\"ResiSBT: Empty URI\\\");\\n        string memory oldUri = defaultRoleUris[_role];\\n        defaultRoleUris[_role] = _uri;\\n        emit DefaultRoleUriUpdated(oldUri, _uri);\\n    }\\n\\n    /**\\n     * @dev Mint SBT to user with specific role and uri.\\n     * @param _to user\\n     * @param _role role name from Resi registry\\n     * @param _uri uri\\n     */\\n    function mint(address _to, bytes32 _role, string memory _uri) external onlyOwner returns (uint256) {\\n        uint256 tokenId = _mintSBT(_to, _role, _uri);\\n        emit MintSBT(_to, _role, tokenId);\\n        return tokenId;\\n    }\\n\\n    function mintBatchByRole(address[] memory _to, string memory _uri, bytes32 _role) external onlyOwner {\\n        for (uint256 i = 0; i < _to.length; i++) {\\n            _checkMint(_to[i], _role, _uri);\\n            _mintSBT(_to[i], _role, _uri);\\n        }\\n    }\\n\\n    function mintByResiToken(address _to, bytes32 _role) external onlyResiToken nonReentrant {\\n        _mintByResiToken(_to, _role);\\n    }\\n\\n    function increaseResiTokenBalance(address _to, uint256 _amount) external onlyResiToken nonReentrant {\\n        _increaseResiTokenBalance(_to, _amount);\\n    }\\n\\n    function decreaseResiTokenBalance(address _to, uint256 _amount) external onlyResiToken nonReentrant {\\n        _decreaseResiTokenBalance(_to, _amount);\\n    }\\n\\n    /**************************** INTERNALS  ****************************/\\n\\n    function _mintSBT(address _to, bytes32 _role, string memory _uri) internal returns (uint256) {\\n        require(_msgSender() == owner() || _msgSender() == RESI_TOKEN, \\\"ResiSBT: ONLY OWNER OR RESI TOKEN\\\");\\n        _checkMint(_to, _role, _uri);\\n        uint256 _tokenId = _tokenIdCounter.current();\\n\\n        //mint sbt\\n        lockedSBTs[_tokenId] = true;\\n        _safeMint(_to, _tokenId);\\n        super._setTokenURI(_tokenId, _uri);\\n\\n        _tokenIdCounter.increment();\\n\\n        emit Locked(_tokenId);\\n        return _tokenId;\\n    }\\n\\n    function _mintByResiToken(address _to, bytes32 _role) private {\\n        string memory defaultUri = defaultRoleUris[_role];\\n        require(bytes(defaultUri).length > 0, \\\"ResiSBT: Default Role Uri not set\\\");\\n        uint256 tokenId = _mintSBT(_to, _role, defaultUri);\\n        emit SBTMintedByResiToken(_to, _role, tokenId);\\n    }\\n\\n    function _increaseResiTokenBalance(address _to, uint256 _amount) private {\\n        require(balanceOf(_to) == 1, \\\"ResiSBT: User has no SBT\\\");\\n        require(_amount > 0, \\\"ResiSBT: Invalid amount\\\");\\n        resiTokenBalances[_to] += _amount;\\n        emit IncreaseResiBalance(_to, _amount);\\n    }\\n\\n    function _decreaseResiTokenBalance(address _to, uint256 _amount) private {\\n        require(balanceOf(_to) == 1, \\\"ResiSBT: User has no SBT\\\");\\n        require(_amount > 0, \\\"ResiSBT: Invalid amount\\\");\\n        resiTokenBalances[_to] -= _amount;\\n        emit DecreaseResiBalance(_to, _amount);\\n    }\\n\\n    function _checkMint(address _to, bytes32 _role, string memory uri) internal view {\\n        require(_msgSender() == owner() || _msgSender() == RESI_TOKEN, \\\"ResiSBT: ONLY OWNER OR RESI TOKEN\\\");\\n        require(_to != address(0), \\\"ResiSBT: INVALID TO ADDRESS\\\");\\n        require(balanceOf(_to) == 0, \\\"ResiSBT: USER ALREADY HAS SBT\\\");\\n        require(bytes(uri).length > 0, \\\"ResiSBT: EMPTY URI\\\");\\n        require(isSBTReceiver(_to, _role, SERIE_ID), \\\"ResiSBT: INVALID SBT RECEIVER\\\");\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    function transferFrom(address, address, uint256) public pure override {\\n        revert TransferForbidden(\\\"ResiSBT: NO TRANSFER FROM ALLOWED\\\");\\n    }\\n\\n    function safeTransferFrom(address, address, uint256) public pure override {\\n        revert TransferForbidden(\\\"ResiSBT: NO TRANSFER FROM ALLOWED\\\");\\n    }\\n\\n    function safeTransferFrom(address, address, uint256, bytes memory) public pure override {\\n        revert TransferForbidden(\\\"ResiSBT: NO TRANSFER FROM ALLOWED\\\");\\n    }\\n\\n    modifier onlyResiToken() {\\n        require(_msgSender() == RESI_TOKEN, \\\"ResiSBT: INVALID RESI TOKEN ADDRESS\\\");\\n        _;\\n    }\\n\\n    /// @dev Leave a gap betweeen inherited contracts variables in order\\n    /// @dev to be able to add more variables in them later.\\n    uint256[20] private upgradeGap;\\n}\\n\",\"keccak256\":\"0xffa0187dd962751f5bbbac18ecd44d19bef1085aef834b9d6b0aa0af914e47d7\",\"license\":\"MIT\"},\"contracts/interfaces/IERC5192.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IERC5192 {\\n    /// @notice Emitted when the locking status is changed to locked.\\n    /// @dev If a token is minted and the status is locked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Locked(uint256 tokenId);\\n\\n    /// @notice Emitted when the locking status is changed to unlocked.\\n    /// @dev If a token is minted and the status is unlocked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Unlocked(uint256 tokenId);\\n\\n    /// @notice Returns the locking status of an Soulbound Token\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    /// about them do throw.\\n    /// @param tokenId The identifier for an SBT.\\n    function locked(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7467c7cf1fd1c1bd5cfe85224a553ca600b0a58ed0cc7d13dcc8c6a83317147f\",\"license\":\"CC0-1.0\"},\"contracts/interfaces/IResiRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiRegistry {\\n    struct Serie {\\n        bool active;\\n        bool created;\\n        uint256 id;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 currentProjects;\\n        uint256 numberOfProjects;\\n        uint256 currentSupply;\\n        uint256 maxSupply;\\n        address vault;\\n    }\\n\\n    struct Project {\\n        uint256 serie;\\n        bool active;\\n    }\\n\\n    function createSerie(\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address _vault\\n    ) external;\\n\\n    function addProject(bytes32 _name) external;\\n\\n    function addProjects(bytes32[] memory names) external;\\n\\n    function disableProject(bytes32 _name) external;\\n\\n    function increaseSerieSupply(uint256 _serieId, uint256 _amount) external;\\n\\n    function decreaseSerieSupply(uint256 _serieId, uint256 _amount) external;\\n\\n    function closeSerie() external;\\n\\n    function activeSerie() external view returns (uint256 id);\\n\\n    function isValidProject(uint256 _serie, bytes32 _project) external view returns (bool);\\n\\n    function isValidProject(bytes32 _project) external view returns (bool);\\n\\n    function getSBTSerie() external view returns (address);\\n\\n    function getSerieState(uint256 _serieId) external view returns (bool, uint256);\\n\\n    function getSerieSupply(uint256 _serieId) external view returns (uint256);\\n\\n    function getSBTSerie(uint256 _serieId) external view returns (address);\\n\\n    function getTreasuryVault() external view returns (address);\\n\\n    function withdrawFromVault(uint256 _serieId, uint256 _amount, address _to) external;\\n\\n    /// @notice Emitted when the Registry is initialized.\\n    event RegistryInitialized();\\n\\n    /// @notice Emitted when Resi Token Contract is set on Contract\\n    /// @param _resiToken Resi Token address\\n    event ResiTokenSet(address indexed _resiToken);\\n\\n    /// @notice Emitted when Treasury Vault address is set on Contract\\n    /// @param _treasuryVault Treasury Vault address\\n    event TreasuryVaultSet(address indexed _treasuryVault);\\n\\n    event SerieSBTSet(uint256 activeSerieId, address indexed _sbt);\\n\\n    event SerieCreated(\\n        uint256 _id,\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _numberOfProjects,\\n        uint256 _maxSupply,\\n        address indexed _vault\\n    );\\n\\n    event SerieSupplyUpdated(uint256 oldSupply, uint256 newSupply);\\n\\n    event SerieClosed(uint256 _id);\\n\\n    event ProjectAdded(bytes32 _name, uint256 serieId);\\n\\n    event ProjectDisabled(bytes32 _name);\\n\\n    event WithdrawFromVault(uint256 _serieId, uint256 _amount, address indexed _to);\\n}\\n\",\"keccak256\":\"0x6660a3032d41f2b28a0256ef1d7bc5fa469766fb0490d33e6b9c976e8fe7baea\",\"license\":\"MIT\"},\"contracts/interfaces/IResiSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiSBT {\\n    event ResiSBTInitialized(\\n        string _name,\\n        string _symbol,\\n        uint256 _serieId,\\n        address indexed _registry,\\n        address indexed _resiToken\\n    );\\n\\n    function mintByResiToken(address _to, bytes32 _role) external;\\n\\n    function isSBTReceiver(address _account, bytes32 _role, uint256 _serieId) external view returns (bool);\\n\\n    function increaseResiTokenBalance(address _to, uint256 _amount) external;\\n\\n    function decreaseResiTokenBalance(address _to, uint256 _amount) external;\\n\\n    event RegistrySet(address indexed _registry);\\n    event ContractURIUpdated(string contractUri);\\n    event MintSBT(address indexed _to, bytes32 _role, uint256 _tokenId);\\n    event DefaultRoleUriUpdated(string oldUri, string newUri);\\n    event SBTMintedByResiToken(address indexed _to, bytes32 _role, uint256 _tokenId);\\n    event IncreaseResiBalance(address indexed to, uint256 amount);\\n    event DecreaseResiBalance(address indexed to, uint256 amount);\\n    event NicknameUpdated(address indexed user, bytes32 nickname);\\n\\n    error TransferForbidden(string message);\\n}\\n\",\"keccak256\":\"0x5ecbbdf93104989f33456f49af7b2a92d6e9f129a402d57a33a6f37b9900f43d\",\"license\":\"MIT\"},\"contracts/interfaces/IResiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IResiToken {\\n    function addMentor(address _mentor, uint256 _serieId, bytes32 _project) external;\\n\\n    function addProjectBuilder(address _builder, uint256 _serieId, bytes32 _project) external;\\n\\n    function addResiBuilder(address _builder) external;\\n\\n    function removeUserRole(bytes32 _role, address _user) external;\\n\\n    function getRoleCount() external view returns (uint256);\\n\\n    event TokenInitialized(address indexed treasury, address indexed registry);\\n    event MentorAdded(address indexed mentor, bytes32 project);\\n    event ProjectBuilderAdded(address indexed projectBuilder);\\n    event ResiBuilderAdded(address indexed resiBuilder);\\n    event ResiRoleRemoved(bytes32 _role, address indexed _user);\\n    event ResiMinted(address indexed account, uint256 amount);\\n    event ResiBurnt(address indexed account, uint256 amount);\\n    event Exit(address indexed account, uint256 _amount, uint256 _serieId);\\n\\n    error InvalidAddress(address);\\n    error TransferForbidden(string message);\\n    error TransferFromForbidden(string message);\\n}\\n\",\"keccak256\":\"0x1e280673e11caa316b371c2060b8d6a500eeca72fc77ef76324eac89047fe7e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506153e3806100206000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80637b9c81691161011a578063b45a3c0e116100ad578063c3b9e8ad1161007c578063c3b9e8ad146105bf578063c87b56dd146105ef578063d1c935991461061f578063e985e9c51461064f578063f2fde38b1461067f57610206565b8063b45a3c0e14610539578063b4bc6cac14610569578063b88d4fde14610585578063c0e24d5e146105a157610206565b8063938e3d7b116100e9578063938e3d7b146104c757806395d89b41146104e3578063a22cb46514610501578063a91ee0dc1461051d57610206565b80637b9c81691461043d5780637e8625fd1461045b5780637eb8d1f1146104795780638da5cb5b146104a957610206565b806346fad2a31161019d5780636352211e1161016c5780636352211e14610399578063687a2b1e146103c957806370a08231146103e7578063715018a6146104175780637930a65b1461042157610206565b806346fad2a3146103155780634a8a4c2814610331578063517e75141461034d57806362246c411461037d57610206565b806323b872dd116101d957806323b872dd146102a55780632671c49e146102c157806332443e5f146102dd57806342842e0e146102f957610206565b806301ffc9a71461020b57806306fdde031461023b578063081812fc14610259578063095ea7b314610289575b600080fd5b610225600480360381019061022091906131c4565b61069b565b604051610232919061320c565b60405180910390f35b61024361077d565b60405161025091906132b7565b60405180910390f35b610273600480360381019061026e919061330f565b61080f565b604051610280919061337d565b60405180910390f35b6102a3600480360381019061029e91906133c4565b610855565b005b6102bf60048036038101906102ba9190613404565b61096c565b005b6102db60048036038101906102d691906134f2565b6109a7565b005b6102f760048036038101906102f29190613552565b610b40565b005b610313600480360381019061030e9190613404565b610bf6565b005b61032f600480360381019061032a9190613785565b610c31565b005b61034b600480360381019061034691906133c4565b610ca9565b005b61036760048036038101906103629190613810565b610d5f565b604051610374919061388e565b60405180910390f35b610397600480360381019061039291906138a9565b610dd3565b005b6103b360048036038101906103ae919061330f565b610f0e565b6040516103c0919061337d565b60405180910390f35b6103d1610f94565b6040516103de919061388e565b60405180910390f35b61040160048036038101906103fc91906138d6565b610f9b565b60405161040e919061388e565b60405180910390f35b61041f611052565b005b61043b60048036038101906104369190613903565b611066565b005b6104456113b0565b604051610452919061337d565b60405180910390f35b6104636113d7565b604051610470919061337d565b60405180910390f35b610493600480360381019061048e91906139e4565b6113fe565b6040516104a0919061320c565b60405180910390f35b6104b1611555565b6040516104be919061337d565b60405180910390f35b6104e160048036038101906104dc9190613a37565b61157f565b005b6104eb6115d4565b6040516104f891906132b7565b60405180910390f35b61051b60048036038101906105169190613aac565b611666565b005b610537600480360381019061053291906138d6565b61167c565b005b610553600480360381019061054e919061330f565b61177b565b604051610560919061320c565b60405180910390f35b610583600480360381019061057e91906133c4565b6117a6565b005b61059f600480360381019061059a9190613b8d565b61185c565b005b6105a9611897565b6040516105b691906132b7565b60405180910390f35b6105d960048036038101906105d491906138d6565b611926565b6040516105e69190613c1f565b60405180910390f35b6106096004803603810190610604919061330f565b61193f565b60405161061691906132b7565b60405180910390f35b610639600480360381019061063491906138d6565b611951565b604051610646919061388e565b60405180910390f35b61066960048036038101906106649190613c3a565b61196a565b604051610676919061320c565b60405180910390f35b610699600480360381019061069491906138d6565b6119fe565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061076657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610776575061077582611a81565b5b9050919050565b60606097805461078c90613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546107b890613ca9565b80156108055780601f106107da57610100808354040283529160200191610805565b820191906000526020600020905b8154815290600101906020018083116107e857829003601f168201915b5050505050905090565b600061081a82611aeb565b609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061086082610f0e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c790613d4c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108ef611b36565b73ffffffffffffffffffffffffffffffffffffffff16148061091e575061091d81610918611b36565b61196a565b5b61095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490613dde565b60405180910390fd5b6109678383611b3e565b505050565b6040517fa744719900000000000000000000000000000000000000000000000000000000815260040161099e90613e70565b60405180910390fd5b6109af611bf7565b6000801b83036109f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109eb90613edc565b60405180910390fd5b60008282905011610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3190613f48565b60405180910390fd5b600061013560008581526020019081526020016000208054610a5b90613ca9565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8790613ca9565b8015610ad45780601f10610aa957610100808354040283529160200191610ad4565b820191906000526020600020905b815481529060010190602001808311610ab757829003601f168201915b50505050509050828261013560008781526020019081526020016000209182610afe92919061411f565b507fb4882a9c218e6fe0486c301941b80c68720a5bc8091eb24a0b0f6278eed05f06818484604051610b329392919061421c565b60405180910390a150505050565b61013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b82611b36565b73ffffffffffffffffffffffffffffffffffffffff1614610bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcf906142c7565b60405180910390fd5b610be0611c75565b610bea8282611cc4565b610bf2611e0e565b5050565b6040517fa7447199000000000000000000000000000000000000000000000000000000008152600401610c2890613e70565b60405180910390fd5b610c39611bf7565b60005b8351811015610ca357610c6a848281518110610c5b57610c5a6142e7565b5b60200260200101518385611e18565b610c8f848281518110610c8057610c7f6142e7565b5b60200260200101518385612044565b508080610c9b90614345565b915050610c3c565b50505050565b61013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610ceb611b36565b73ffffffffffffffffffffffffffffffffffffffff1614610d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d38906142c7565b60405180910390fd5b610d49611c75565b610d5382826121ca565b610d5b611e0e565b5050565b6000610d69611bf7565b6000610d76858585612044565b90508473ffffffffffffffffffffffffffffffffffffffff167f794d7f3def354a526e1441e5795ceed82fda62994c9c013a927cbcf2934cb92f8583604051610dc092919061438d565b60405180910390a2809150509392505050565b6001610de5610de0611b36565b610f9b565b14610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c90614402565b60405180910390fd5b6000801b8103610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e619061446e565b60405180910390fd5b806101326000610e78611b36565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ebe611b36565b73ffffffffffffffffffffffffffffffffffffffff167f99f6108bddea6b753194dfcbc58f782b8bdf56daeb68d6e3a1584a2e25e54bbc82604051610f039190613c1f565b60405180910390a250565b600080610f1a83612301565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f82906144da565b60405180910390fd5b80915050919050565b61012f5481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361100b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110029061456c565b60405180910390fd5b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61105a611bf7565b611064600061233e565b565b60008060019054906101000a900460ff161590508080156110975750600160008054906101000a900460ff1660ff16105b806110c457506110a630612404565b1580156110c35750600160008054906101000a900460ff1660ff16145b5b611103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fa906145fe565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611140576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a69061466a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361121e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611215906146d6565b60405180910390fd5b611226612427565b61122e612478565b6112366124d9565b6112408787612532565b6112486125a5565b8261013160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508161013060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508361012f819055508461012e90816112e491906146f6565b508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fb971b0bf8639f3fb4af088317172a98b054b3584c29da1ec8d5f77e1231c0fdf898988604051611346939291906147c8565b60405180910390a380156113a75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161139e9190614855565b60405180910390a15b50505050505050565b61013160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484866040518363ffffffff1660e01b815260040161145e929190614870565b602060405180830381865afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f91906148ae565b801561153b57508161013160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663be71e4266040518163ffffffff1660e01b8152600401602060405180830381865afa158015611515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153991906148f0565b145b15611549576001905061154e565b600090505b9392505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611587611bf7565b8061012e908161159791906146f6565b507f905d981207a7d0b6c62cc46ab0be2a076d0298e4a86d0ab79882dbd01ac3737861012e6040516115c991906149a1565b60405180910390a150565b6060609880546115e390613ca9565b80601f016020809104026020016040519081016040528092919081815260200182805461160f90613ca9565b801561165c5780601f106116315761010080835404028352916020019161165c565b820191906000526020600020905b81548152906001019060200180831161163f57829003601f168201915b5050505050905090565b611678611671611b36565b83836125f6565b5050565b611684611bf7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ea9061466a565b60405180910390fd5b8061013160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b60405160405180910390a250565b6000610134600083815260200190815260200160002060009054906101000a900460ff169050919050565b61013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166117e8611b36565b73ffffffffffffffffffffffffffffffffffffffff161461183e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611835906142c7565b60405180910390fd5b611846611c75565b6118508282612762565b611858611e0e565b5050565b6040517fa744719900000000000000000000000000000000000000000000000000000000815260040161188e90613e70565b60405180910390fd5b61012e80546118a590613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546118d190613ca9565b801561191e5780601f106118f35761010080835404028352916020019161191e565b820191906000526020600020905b81548152906001019060200180831161190157829003601f168201915b505050505081565b6101326020528060005260406000206000915090505481565b606061194a82612899565b9050919050565b6101336020528060005260406000206000915090505481565b6000609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611a06611bf7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6c90614a35565b60405180910390fd5b611a7e8161233e565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611af4816129ab565b611b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2a906144da565b60405180910390fd5b50565b600033905090565b81609b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611bb183610f0e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611bff611b36565b73ffffffffffffffffffffffffffffffffffffffff16611c1d611555565b73ffffffffffffffffffffffffffffffffffffffff1614611c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6a90614aa1565b60405180910390fd5b565b600260fb5403611cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb190614b0d565b60405180910390fd5b600260fb81905550565b600061013560008381526020019081526020016000208054611ce590613ca9565b80601f0160208091040260200160405190810160405280929190818152602001828054611d1190613ca9565b8015611d5e5780601f10611d3357610100808354040283529160200191611d5e565b820191906000526020600020905b815481529060010190602001808311611d4157829003601f168201915b505050505090506000815111611da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da090614b9f565b60405180910390fd5b6000611db6848484612044565b90508373ffffffffffffffffffffffffffffffffffffffff167f59fbbd4726c1a26d6867c26553838746080aeca0d39c4decb94778fff62fe4568483604051611e0092919061438d565b60405180910390a250505050565b600160fb81905550565b611e20611555565b73ffffffffffffffffffffffffffffffffffffffff16611e3e611b36565b73ffffffffffffffffffffffffffffffffffffffff161480611eb5575061013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611e9d611b36565b73ffffffffffffffffffffffffffffffffffffffff16145b611ef4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eeb90614c31565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611f63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5a90614c9d565b60405180910390fd5b6000611f6e84610f9b565b14611fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa590614d09565b60405180910390fd5b6000815111611ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe990614d75565b60405180910390fd5b612000838361012f546113fe565b61203f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203690614de1565b60405180910390fd5b505050565b600061204e611555565b73ffffffffffffffffffffffffffffffffffffffff1661206c611b36565b73ffffffffffffffffffffffffffffffffffffffff1614806120e3575061013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166120cb611b36565b73ffffffffffffffffffffffffffffffffffffffff16145b612122576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211990614c31565b60405180910390fd5b61212d848484611e18565b600061213a61012d6129ec565b90506001610134600083815260200190815260200160002060006101000a81548160ff02191690831515021790555061217385826129fa565b61217d8184612a18565b61218861012d612a85565b7f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611816040516121b7919061388e565b60405180910390a1809150509392505050565b60016121d583610f9b565b14612215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220c90614e4d565b60405180910390fd5b60008111612258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224f90614eb9565b60405180910390fd5b8061013360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122a89190614ed9565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f048df227c951e9e741c27ac8f28f3fe2bd8ac24c3d08a5e102170a8620d41370826040516122f5919061388e565b60405180910390a25050565b60006099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246d90614f7f565b60405180910390fd5b565b600060019054906101000a900460ff166124c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124be90614f7f565b60405180910390fd5b6124d76124d2611b36565b61233e565b565b600060019054906101000a900460ff16612528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251f90614f7f565b60405180910390fd5b600160fb81905550565b600060019054906101000a900460ff16612581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257890614f7f565b60405180910390fd5b816097908161259091906146f6565b5080609890816125a091906146f6565b505050565b600060019054906101000a900460ff166125f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125eb90614f7f565b60405180910390fd5b565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265b90614feb565b60405180910390fd5b80609c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612755919061320c565b60405180910390a3505050565b600161276d83610f9b565b146127ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a490614e4d565b60405180910390fd5b600081116127f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e790614eb9565b60405180910390fd5b8061013360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612840919061500b565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fa27aa968488cb3ab8260cb4821ad0340658816c0015b6669bf71d3adcb80b1e08260405161288d919061388e565b60405180910390a25050565b60606128a482611aeb565b600060c9600084815260200190815260200160002080546128c490613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546128f090613ca9565b801561293d5780601f106129125761010080835404028352916020019161293d565b820191906000526020600020905b81548152906001019060200180831161292057829003601f168201915b50505050509050600061294e612a9b565b905060008151036129635781925050506129a6565b60008251111561299857808260405160200161298092919061507b565b604051602081830303815290604052925050506129a6565b6129a184612ab2565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166129cd83612301565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600081600001549050919050565b612a14828260405180602001604052806000815250612b1a565b5050565b612a21826129ab565b612a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5790615111565b60405180910390fd5b8060c960008481526020019081526020016000209081612a8091906146f6565b505050565b6001816000016000828254019250508190555050565b606060405180602001604052806000815250905090565b6060612abd82611aeb565b6000612ac7612a9b565b90506000815111612ae75760405180602001604052806000815250612b12565b80612af184612b75565b604051602001612b0292919061507b565b6040516020818303038152906040525b915050919050565b612b248383612c43565b612b316000848484612e60565b612b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b67906151a3565b60405180910390fd5b505050565b606060006001612b8484612fe7565b01905060008167ffffffffffffffff811115612ba357612ba2613592565b5b6040519080825280601f01601f191660200182016040528015612bd55781602001600182028036833780820191505090505b509050600082602001820190505b600115612c38578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612c2c57612c2b6151c3565b5b04945060008503612be3575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ca99061523e565b60405180910390fd5b612cbb816129ab565b15612cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf2906152aa565b60405180910390fd5b612d0960008383600161313a565b612d12816129ab565b15612d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d49906152aa565b60405180910390fd5b6001609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612e5c60008383600161314c565b5050565b6000612e818473ffffffffffffffffffffffffffffffffffffffff16612404565b15612fda578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612eaa611b36565b8786866040518563ffffffff1660e01b8152600401612ecc949392919061531f565b6020604051808303816000875af1925050508015612f0857506040513d601f19601f82011682018060405250810190612f059190615380565b60015b612f8a573d8060008114612f38576040519150601f19603f3d011682016040523d82523d6000602084013e612f3d565b606091505b506000815103612f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f79906151a3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612fdf565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613045577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161303b5761303a6151c3565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613082576d04ee2d6d415b85acef81000000008381613078576130776151c3565b5b0492506020810190505b662386f26fc1000083106130b157662386f26fc1000083816130a7576130a66151c3565b5b0492506010810190505b6305f5e10083106130da576305f5e10083816130d0576130cf6151c3565b5b0492506008810190505b61271083106130ff5761271083816130f5576130f46151c3565b5b0492506004810190505b606483106131225760648381613118576131176151c3565b5b0492506002810190505b600a8310613131576001810190505b80915050919050565b61314684848484613152565b50505050565b50505050565b50505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131a18161316c565b81146131ac57600080fd5b50565b6000813590506131be81613198565b92915050565b6000602082840312156131da576131d9613162565b5b60006131e8848285016131af565b91505092915050565b60008115159050919050565b613206816131f1565b82525050565b600060208201905061322160008301846131fd565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613261578082015181840152602081019050613246565b60008484015250505050565b6000601f19601f8301169050919050565b600061328982613227565b6132938185613232565b93506132a3818560208601613243565b6132ac8161326d565b840191505092915050565b600060208201905081810360008301526132d1818461327e565b905092915050565b6000819050919050565b6132ec816132d9565b81146132f757600080fd5b50565b600081359050613309816132e3565b92915050565b60006020828403121561332557613324613162565b5b6000613333848285016132fa565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133678261333c565b9050919050565b6133778161335c565b82525050565b6000602082019050613392600083018461336e565b92915050565b6133a18161335c565b81146133ac57600080fd5b50565b6000813590506133be81613398565b92915050565b600080604083850312156133db576133da613162565b5b60006133e9858286016133af565b92505060206133fa858286016132fa565b9150509250929050565b60008060006060848603121561341d5761341c613162565b5b600061342b868287016133af565b935050602061343c868287016133af565b925050604061344d868287016132fa565b9150509250925092565b6000819050919050565b61346a81613457565b811461347557600080fd5b50565b60008135905061348781613461565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126134b2576134b161348d565b5b8235905067ffffffffffffffff8111156134cf576134ce613492565b5b6020830191508360018202830111156134eb576134ea613497565b5b9250929050565b60008060006040848603121561350b5761350a613162565b5b600061351986828701613478565b935050602084013567ffffffffffffffff81111561353a57613539613167565b5b6135468682870161349c565b92509250509250925092565b6000806040838503121561356957613568613162565b5b6000613577858286016133af565b925050602061358885828601613478565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135ca8261326d565b810181811067ffffffffffffffff821117156135e9576135e8613592565b5b80604052505050565b60006135fc613158565b905061360882826135c1565b919050565b600067ffffffffffffffff82111561362857613627613592565b5b602082029050602081019050919050565b600061364c6136478461360d565b6135f2565b9050808382526020820190506020840283018581111561366f5761366e613497565b5b835b81811015613698578061368488826133af565b845260208401935050602081019050613671565b5050509392505050565b600082601f8301126136b7576136b661348d565b5b81356136c7848260208601613639565b91505092915050565b600080fd5b600067ffffffffffffffff8211156136f0576136ef613592565b5b6136f98261326d565b9050602081019050919050565b82818337600083830152505050565b6000613728613723846136d5565b6135f2565b905082815260208101848484011115613744576137436136d0565b5b61374f848285613706565b509392505050565b600082601f83011261376c5761376b61348d565b5b813561377c848260208601613715565b91505092915050565b60008060006060848603121561379e5761379d613162565b5b600084013567ffffffffffffffff8111156137bc576137bb613167565b5b6137c8868287016136a2565b935050602084013567ffffffffffffffff8111156137e9576137e8613167565b5b6137f586828701613757565b925050604061380686828701613478565b9150509250925092565b60008060006060848603121561382957613828613162565b5b6000613837868287016133af565b935050602061384886828701613478565b925050604084013567ffffffffffffffff81111561386957613868613167565b5b61387586828701613757565b9150509250925092565b613888816132d9565b82525050565b60006020820190506138a3600083018461387f565b92915050565b6000602082840312156138bf576138be613162565b5b60006138cd84828501613478565b91505092915050565b6000602082840312156138ec576138eb613162565b5b60006138fa848285016133af565b91505092915050565b60008060008060008060c087890312156139205761391f613162565b5b600087013567ffffffffffffffff81111561393e5761393d613167565b5b61394a89828a01613757565b965050602087013567ffffffffffffffff81111561396b5761396a613167565b5b61397789828a01613757565b955050604087013567ffffffffffffffff81111561399857613997613167565b5b6139a489828a01613757565b94505060606139b589828a016132fa565b93505060806139c689828a016133af565b92505060a06139d789828a016133af565b9150509295509295509295565b6000806000606084860312156139fd576139fc613162565b5b6000613a0b868287016133af565b9350506020613a1c86828701613478565b9250506040613a2d868287016132fa565b9150509250925092565b600060208284031215613a4d57613a4c613162565b5b600082013567ffffffffffffffff811115613a6b57613a6a613167565b5b613a7784828501613757565b91505092915050565b613a89816131f1565b8114613a9457600080fd5b50565b600081359050613aa681613a80565b92915050565b60008060408385031215613ac357613ac2613162565b5b6000613ad1858286016133af565b9250506020613ae285828601613a97565b9150509250929050565b600067ffffffffffffffff821115613b0757613b06613592565b5b613b108261326d565b9050602081019050919050565b6000613b30613b2b84613aec565b6135f2565b905082815260208101848484011115613b4c57613b4b6136d0565b5b613b57848285613706565b509392505050565b600082601f830112613b7457613b7361348d565b5b8135613b84848260208601613b1d565b91505092915050565b60008060008060808587031215613ba757613ba6613162565b5b6000613bb5878288016133af565b9450506020613bc6878288016133af565b9350506040613bd7878288016132fa565b925050606085013567ffffffffffffffff811115613bf857613bf7613167565b5b613c0487828801613b5f565b91505092959194509250565b613c1981613457565b82525050565b6000602082019050613c346000830184613c10565b92915050565b60008060408385031215613c5157613c50613162565b5b6000613c5f858286016133af565b9250506020613c70858286016133af565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613cc157607f821691505b602082108103613cd457613cd3613c7a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613d36602183613232565b9150613d4182613cda565b604082019050919050565b60006020820190508181036000830152613d6581613d29565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613dc8603d83613232565b9150613dd382613d6c565b604082019050919050565b60006020820190508181036000830152613df781613dbb565b9050919050565b7f526573695342543a204e4f205452414e534645522046524f4d20414c4c4f574560008201527f4400000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e5a602183613232565b9150613e6582613dfe565b604082019050919050565b60006020820190508181036000830152613e8981613e4d565b9050919050565b7f526573695342543a20494e56414c494420524f4c450000000000000000000000600082015250565b6000613ec6601583613232565b9150613ed182613e90565b602082019050919050565b60006020820190508181036000830152613ef581613eb9565b9050919050565b7f526573695342543a20456d707479205552490000000000000000000000000000600082015250565b6000613f32601283613232565b9150613f3d82613efc565b602082019050919050565b60006020820190508181036000830152613f6181613f25565b9050919050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613fd57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f98565b613fdf8683613f98565b95508019841693508086168417925050509392505050565b6000819050919050565b600061401c614017614012846132d9565b613ff7565b6132d9565b9050919050565b6000819050919050565b61403683614001565b61404a61404282614023565b848454613fa5565b825550505050565b600090565b61405f614052565b61406a81848461402d565b505050565b5b8181101561408e57614083600082614057565b600181019050614070565b5050565b601f8211156140d3576140a481613f73565b6140ad84613f88565b810160208510156140bc578190505b6140d06140c885613f88565b83018261406f565b50505b505050565b600082821c905092915050565b60006140f6600019846008026140d8565b1980831691505092915050565b600061410f83836140e5565b9150826002028217905092915050565b6141298383613f68565b67ffffffffffffffff81111561414257614141613592565b5b61414c8254613ca9565b614157828285614092565b6000601f8311600181146141865760008415614174578287013590505b61417e8582614103565b8655506141e6565b601f19841661419486613f73565b60005b828110156141bc57848901358255600182019150602085019450602081019050614197565b868310156141d957848901356141d5601f8916826140e5565b8355505b6001600288020188555050505b50505050505050565b60006141fb8385613232565b9350614208838584613706565b6142118361326d565b840190509392505050565b60006040820190508181036000830152614236818661327e565b9050818103602083015261424b8184866141ef565b9050949350505050565b7f526573695342543a20494e56414c4944205245534920544f4b454e204144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b60006142b1602383613232565b91506142bc82614255565b604082019050919050565b600060208201905081810360008301526142e0816142a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614350826132d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361438257614381614316565b5b600182019050919050565b60006040820190506143a26000830185613c10565b6143af602083018461387f565b9392505050565b7f526573695342543a204e4f5420414e20534254204f574e455200000000000000600082015250565b60006143ec601983613232565b91506143f7826143b6565b602082019050919050565b6000602082019050818103600083015261441b816143df565b9050919050565b7f526573695342543a20494e56414c4944204e49434b4e414d4500000000000000600082015250565b6000614458601983613232565b915061446382614422565b602082019050919050565b600060208201905081810360008301526144878161444b565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006144c4601883613232565b91506144cf8261448e565b602082019050919050565b600060208201905081810360008301526144f3816144b7565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614556602983613232565b9150614561826144fa565b604082019050919050565b6000602082019050818103600083015261458581614549565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006145e8602e83613232565b91506145f38261458c565b604082019050919050565b60006020820190508181036000830152614617816145db565b9050919050565b7f494e56414c494420524547495354525920414444524553530000000000000000600082015250565b6000614654601883613232565b915061465f8261461e565b602082019050919050565b6000602082019050818103600083015261468381614647565b9050919050565b7f494e56414c4944205245534920544f4b454e2041444452455353000000000000600082015250565b60006146c0601a83613232565b91506146cb8261468a565b602082019050919050565b600060208201905081810360008301526146ef816146b3565b9050919050565b6146ff82613227565b67ffffffffffffffff81111561471857614717613592565b5b6147228254613ca9565b61472d828285614092565b600060209050601f831160018114614760576000841561474e578287015190505b6147588582614103565b8655506147c0565b601f19841661476e86613f73565b60005b8281101561479657848901518255600182019150602085019450602081019050614771565b868310156147b357848901516147af601f8916826140e5565b8355505b6001600288020188555050505b505050505050565b600060608201905081810360008301526147e2818661327e565b905081810360208301526147f6818561327e565b9050614805604083018461387f565b949350505050565b6000819050919050565b600060ff82169050919050565b600061483f61483a6148358461480d565b613ff7565b614817565b9050919050565b61484f81614824565b82525050565b600060208201905061486a6000830184614846565b92915050565b60006040820190506148856000830185613c10565b614892602083018461336e565b9392505050565b6000815190506148a881613a80565b92915050565b6000602082840312156148c4576148c3613162565b5b60006148d284828501614899565b91505092915050565b6000815190506148ea816132e3565b92915050565b60006020828403121561490657614905613162565b5b6000614914848285016148db565b91505092915050565b6000815461492a81613ca9565b6149348186613232565b9450600182166000811461494f576001811461496557614998565b60ff198316865281151560200286019350614998565b61496e85613f73565b60005b8381101561499057815481890152600182019150602081019050614971565b808801955050505b50505092915050565b600060208201905081810360008301526149bb818461491d565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614a1f602683613232565b9150614a2a826149c3565b604082019050919050565b60006020820190508181036000830152614a4e81614a12565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614a8b602083613232565b9150614a9682614a55565b602082019050919050565b60006020820190508181036000830152614aba81614a7e565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614af7601f83613232565b9150614b0282614ac1565b602082019050919050565b60006020820190508181036000830152614b2681614aea565b9050919050565b7f526573695342543a2044656661756c7420526f6c6520557269206e6f7420736560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000614b89602183613232565b9150614b9482614b2d565b604082019050919050565b60006020820190508181036000830152614bb881614b7c565b9050919050565b7f526573695342543a204f4e4c59204f574e4552204f52205245534920544f4b4560008201527f4e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000614c1b602183613232565b9150614c2682614bbf565b604082019050919050565b60006020820190508181036000830152614c4a81614c0e565b9050919050565b7f526573695342543a20494e56414c494420544f20414444524553530000000000600082015250565b6000614c87601b83613232565b9150614c9282614c51565b602082019050919050565b60006020820190508181036000830152614cb681614c7a565b9050919050565b7f526573695342543a205553455220414c52454144592048415320534254000000600082015250565b6000614cf3601d83613232565b9150614cfe82614cbd565b602082019050919050565b60006020820190508181036000830152614d2281614ce6565b9050919050565b7f526573695342543a20454d505459205552490000000000000000000000000000600082015250565b6000614d5f601283613232565b9150614d6a82614d29565b602082019050919050565b60006020820190508181036000830152614d8e81614d52565b9050919050565b7f526573695342543a20494e56414c494420534254205245434549564552000000600082015250565b6000614dcb601d83613232565b9150614dd682614d95565b602082019050919050565b60006020820190508181036000830152614dfa81614dbe565b9050919050565b7f526573695342543a205573657220686173206e6f205342540000000000000000600082015250565b6000614e37601883613232565b9150614e4282614e01565b602082019050919050565b60006020820190508181036000830152614e6681614e2a565b9050919050565b7f526573695342543a20496e76616c696420616d6f756e74000000000000000000600082015250565b6000614ea3601783613232565b9150614eae82614e6d565b602082019050919050565b60006020820190508181036000830152614ed281614e96565b9050919050565b6000614ee4826132d9565b9150614eef836132d9565b9250828201905080821115614f0757614f06614316565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614f69602b83613232565b9150614f7482614f0d565b604082019050919050565b60006020820190508181036000830152614f9881614f5c565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614fd5601983613232565b9150614fe082614f9f565b602082019050919050565b6000602082019050818103600083015261500481614fc8565b9050919050565b6000615016826132d9565b9150615021836132d9565b925082820390508181111561503957615038614316565b5b92915050565b600081905092915050565b600061505582613227565b61505f818561503f565b935061506f818560208601613243565b80840191505092915050565b6000615087828561504a565b9150615093828461504a565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006150fb602e83613232565b91506151068261509f565b604082019050919050565b6000602082019050818103600083015261512a816150ee565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061518d603283613232565b915061519882615131565b604082019050919050565b600060208201905081810360008301526151bc81615180565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615228602083613232565b9150615233826151f2565b602082019050919050565b600060208201905081810360008301526152578161521b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615294601c83613232565b915061529f8261525e565b602082019050919050565b600060208201905081810360008301526152c381615287565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006152f1826152ca565b6152fb81856152d5565b935061530b818560208601613243565b6153148161326d565b840191505092915050565b6000608082019050615334600083018761336e565b615341602083018661336e565b61534e604083018561387f565b818103606083015261536081846152e6565b905095945050505050565b60008151905061537a81613198565b92915050565b60006020828403121561539657615395613162565b5b60006153a48482850161536b565b9150509291505056fea2646970667358221220a05725ba69b1bd84ebd3271d67d0341fe1b29fd147f8e10581955a642d5ba53f64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c80637b9c81691161011a578063b45a3c0e116100ad578063c3b9e8ad1161007c578063c3b9e8ad146105bf578063c87b56dd146105ef578063d1c935991461061f578063e985e9c51461064f578063f2fde38b1461067f57610206565b8063b45a3c0e14610539578063b4bc6cac14610569578063b88d4fde14610585578063c0e24d5e146105a157610206565b8063938e3d7b116100e9578063938e3d7b146104c757806395d89b41146104e3578063a22cb46514610501578063a91ee0dc1461051d57610206565b80637b9c81691461043d5780637e8625fd1461045b5780637eb8d1f1146104795780638da5cb5b146104a957610206565b806346fad2a31161019d5780636352211e1161016c5780636352211e14610399578063687a2b1e146103c957806370a08231146103e7578063715018a6146104175780637930a65b1461042157610206565b806346fad2a3146103155780634a8a4c2814610331578063517e75141461034d57806362246c411461037d57610206565b806323b872dd116101d957806323b872dd146102a55780632671c49e146102c157806332443e5f146102dd57806342842e0e146102f957610206565b806301ffc9a71461020b57806306fdde031461023b578063081812fc14610259578063095ea7b314610289575b600080fd5b610225600480360381019061022091906131c4565b61069b565b604051610232919061320c565b60405180910390f35b61024361077d565b60405161025091906132b7565b60405180910390f35b610273600480360381019061026e919061330f565b61080f565b604051610280919061337d565b60405180910390f35b6102a3600480360381019061029e91906133c4565b610855565b005b6102bf60048036038101906102ba9190613404565b61096c565b005b6102db60048036038101906102d691906134f2565b6109a7565b005b6102f760048036038101906102f29190613552565b610b40565b005b610313600480360381019061030e9190613404565b610bf6565b005b61032f600480360381019061032a9190613785565b610c31565b005b61034b600480360381019061034691906133c4565b610ca9565b005b61036760048036038101906103629190613810565b610d5f565b604051610374919061388e565b60405180910390f35b610397600480360381019061039291906138a9565b610dd3565b005b6103b360048036038101906103ae919061330f565b610f0e565b6040516103c0919061337d565b60405180910390f35b6103d1610f94565b6040516103de919061388e565b60405180910390f35b61040160048036038101906103fc91906138d6565b610f9b565b60405161040e919061388e565b60405180910390f35b61041f611052565b005b61043b60048036038101906104369190613903565b611066565b005b6104456113b0565b604051610452919061337d565b60405180910390f35b6104636113d7565b604051610470919061337d565b60405180910390f35b610493600480360381019061048e91906139e4565b6113fe565b6040516104a0919061320c565b60405180910390f35b6104b1611555565b6040516104be919061337d565b60405180910390f35b6104e160048036038101906104dc9190613a37565b61157f565b005b6104eb6115d4565b6040516104f891906132b7565b60405180910390f35b61051b60048036038101906105169190613aac565b611666565b005b610537600480360381019061053291906138d6565b61167c565b005b610553600480360381019061054e919061330f565b61177b565b604051610560919061320c565b60405180910390f35b610583600480360381019061057e91906133c4565b6117a6565b005b61059f600480360381019061059a9190613b8d565b61185c565b005b6105a9611897565b6040516105b691906132b7565b60405180910390f35b6105d960048036038101906105d491906138d6565b611926565b6040516105e69190613c1f565b60405180910390f35b6106096004803603810190610604919061330f565b61193f565b60405161061691906132b7565b60405180910390f35b610639600480360381019061063491906138d6565b611951565b604051610646919061388e565b60405180910390f35b61066960048036038101906106649190613c3a565b61196a565b604051610676919061320c565b60405180910390f35b610699600480360381019061069491906138d6565b6119fe565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061076657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610776575061077582611a81565b5b9050919050565b60606097805461078c90613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546107b890613ca9565b80156108055780601f106107da57610100808354040283529160200191610805565b820191906000526020600020905b8154815290600101906020018083116107e857829003601f168201915b5050505050905090565b600061081a82611aeb565b609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061086082610f0e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c790613d4c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108ef611b36565b73ffffffffffffffffffffffffffffffffffffffff16148061091e575061091d81610918611b36565b61196a565b5b61095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490613dde565b60405180910390fd5b6109678383611b3e565b505050565b6040517fa744719900000000000000000000000000000000000000000000000000000000815260040161099e90613e70565b60405180910390fd5b6109af611bf7565b6000801b83036109f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109eb90613edc565b60405180910390fd5b60008282905011610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3190613f48565b60405180910390fd5b600061013560008581526020019081526020016000208054610a5b90613ca9565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8790613ca9565b8015610ad45780601f10610aa957610100808354040283529160200191610ad4565b820191906000526020600020905b815481529060010190602001808311610ab757829003601f168201915b50505050509050828261013560008781526020019081526020016000209182610afe92919061411f565b507fb4882a9c218e6fe0486c301941b80c68720a5bc8091eb24a0b0f6278eed05f06818484604051610b329392919061421c565b60405180910390a150505050565b61013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b82611b36565b73ffffffffffffffffffffffffffffffffffffffff1614610bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcf906142c7565b60405180910390fd5b610be0611c75565b610bea8282611cc4565b610bf2611e0e565b5050565b6040517fa7447199000000000000000000000000000000000000000000000000000000008152600401610c2890613e70565b60405180910390fd5b610c39611bf7565b60005b8351811015610ca357610c6a848281518110610c5b57610c5a6142e7565b5b60200260200101518385611e18565b610c8f848281518110610c8057610c7f6142e7565b5b60200260200101518385612044565b508080610c9b90614345565b915050610c3c565b50505050565b61013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610ceb611b36565b73ffffffffffffffffffffffffffffffffffffffff1614610d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d38906142c7565b60405180910390fd5b610d49611c75565b610d5382826121ca565b610d5b611e0e565b5050565b6000610d69611bf7565b6000610d76858585612044565b90508473ffffffffffffffffffffffffffffffffffffffff167f794d7f3def354a526e1441e5795ceed82fda62994c9c013a927cbcf2934cb92f8583604051610dc092919061438d565b60405180910390a2809150509392505050565b6001610de5610de0611b36565b610f9b565b14610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c90614402565b60405180910390fd5b6000801b8103610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e619061446e565b60405180910390fd5b806101326000610e78611b36565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ebe611b36565b73ffffffffffffffffffffffffffffffffffffffff167f99f6108bddea6b753194dfcbc58f782b8bdf56daeb68d6e3a1584a2e25e54bbc82604051610f039190613c1f565b60405180910390a250565b600080610f1a83612301565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f82906144da565b60405180910390fd5b80915050919050565b61012f5481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361100b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110029061456c565b60405180910390fd5b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61105a611bf7565b611064600061233e565b565b60008060019054906101000a900460ff161590508080156110975750600160008054906101000a900460ff1660ff16105b806110c457506110a630612404565b1580156110c35750600160008054906101000a900460ff1660ff16145b5b611103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fa906145fe565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611140576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a69061466a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361121e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611215906146d6565b60405180910390fd5b611226612427565b61122e612478565b6112366124d9565b6112408787612532565b6112486125a5565b8261013160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508161013060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508361012f819055508461012e90816112e491906146f6565b508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fb971b0bf8639f3fb4af088317172a98b054b3584c29da1ec8d5f77e1231c0fdf898988604051611346939291906147c8565b60405180910390a380156113a75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161139e9190614855565b60405180910390a15b50505050505050565b61013160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484866040518363ffffffff1660e01b815260040161145e929190614870565b602060405180830381865afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f91906148ae565b801561153b57508161013160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663be71e4266040518163ffffffff1660e01b8152600401602060405180830381865afa158015611515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153991906148f0565b145b15611549576001905061154e565b600090505b9392505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611587611bf7565b8061012e908161159791906146f6565b507f905d981207a7d0b6c62cc46ab0be2a076d0298e4a86d0ab79882dbd01ac3737861012e6040516115c991906149a1565b60405180910390a150565b6060609880546115e390613ca9565b80601f016020809104026020016040519081016040528092919081815260200182805461160f90613ca9565b801561165c5780601f106116315761010080835404028352916020019161165c565b820191906000526020600020905b81548152906001019060200180831161163f57829003601f168201915b5050505050905090565b611678611671611b36565b83836125f6565b5050565b611684611bf7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ea9061466a565b60405180910390fd5b8061013160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b60405160405180910390a250565b6000610134600083815260200190815260200160002060009054906101000a900460ff169050919050565b61013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166117e8611b36565b73ffffffffffffffffffffffffffffffffffffffff161461183e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611835906142c7565b60405180910390fd5b611846611c75565b6118508282612762565b611858611e0e565b5050565b6040517fa744719900000000000000000000000000000000000000000000000000000000815260040161188e90613e70565b60405180910390fd5b61012e80546118a590613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546118d190613ca9565b801561191e5780601f106118f35761010080835404028352916020019161191e565b820191906000526020600020905b81548152906001019060200180831161190157829003601f168201915b505050505081565b6101326020528060005260406000206000915090505481565b606061194a82612899565b9050919050565b6101336020528060005260406000206000915090505481565b6000609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611a06611bf7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6c90614a35565b60405180910390fd5b611a7e8161233e565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611af4816129ab565b611b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2a906144da565b60405180910390fd5b50565b600033905090565b81609b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611bb183610f0e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611bff611b36565b73ffffffffffffffffffffffffffffffffffffffff16611c1d611555565b73ffffffffffffffffffffffffffffffffffffffff1614611c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6a90614aa1565b60405180910390fd5b565b600260fb5403611cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb190614b0d565b60405180910390fd5b600260fb81905550565b600061013560008381526020019081526020016000208054611ce590613ca9565b80601f0160208091040260200160405190810160405280929190818152602001828054611d1190613ca9565b8015611d5e5780601f10611d3357610100808354040283529160200191611d5e565b820191906000526020600020905b815481529060010190602001808311611d4157829003601f168201915b505050505090506000815111611da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da090614b9f565b60405180910390fd5b6000611db6848484612044565b90508373ffffffffffffffffffffffffffffffffffffffff167f59fbbd4726c1a26d6867c26553838746080aeca0d39c4decb94778fff62fe4568483604051611e0092919061438d565b60405180910390a250505050565b600160fb81905550565b611e20611555565b73ffffffffffffffffffffffffffffffffffffffff16611e3e611b36565b73ffffffffffffffffffffffffffffffffffffffff161480611eb5575061013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611e9d611b36565b73ffffffffffffffffffffffffffffffffffffffff16145b611ef4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eeb90614c31565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611f63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5a90614c9d565b60405180910390fd5b6000611f6e84610f9b565b14611fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa590614d09565b60405180910390fd5b6000815111611ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe990614d75565b60405180910390fd5b612000838361012f546113fe565b61203f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203690614de1565b60405180910390fd5b505050565b600061204e611555565b73ffffffffffffffffffffffffffffffffffffffff1661206c611b36565b73ffffffffffffffffffffffffffffffffffffffff1614806120e3575061013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166120cb611b36565b73ffffffffffffffffffffffffffffffffffffffff16145b612122576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211990614c31565b60405180910390fd5b61212d848484611e18565b600061213a61012d6129ec565b90506001610134600083815260200190815260200160002060006101000a81548160ff02191690831515021790555061217385826129fa565b61217d8184612a18565b61218861012d612a85565b7f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611816040516121b7919061388e565b60405180910390a1809150509392505050565b60016121d583610f9b565b14612215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220c90614e4d565b60405180910390fd5b60008111612258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224f90614eb9565b60405180910390fd5b8061013360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122a89190614ed9565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f048df227c951e9e741c27ac8f28f3fe2bd8ac24c3d08a5e102170a8620d41370826040516122f5919061388e565b60405180910390a25050565b60006099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246d90614f7f565b60405180910390fd5b565b600060019054906101000a900460ff166124c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124be90614f7f565b60405180910390fd5b6124d76124d2611b36565b61233e565b565b600060019054906101000a900460ff16612528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251f90614f7f565b60405180910390fd5b600160fb81905550565b600060019054906101000a900460ff16612581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257890614f7f565b60405180910390fd5b816097908161259091906146f6565b5080609890816125a091906146f6565b505050565b600060019054906101000a900460ff166125f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125eb90614f7f565b60405180910390fd5b565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265b90614feb565b60405180910390fd5b80609c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612755919061320c565b60405180910390a3505050565b600161276d83610f9b565b146127ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a490614e4d565b60405180910390fd5b600081116127f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e790614eb9565b60405180910390fd5b8061013360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612840919061500b565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fa27aa968488cb3ab8260cb4821ad0340658816c0015b6669bf71d3adcb80b1e08260405161288d919061388e565b60405180910390a25050565b60606128a482611aeb565b600060c9600084815260200190815260200160002080546128c490613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546128f090613ca9565b801561293d5780601f106129125761010080835404028352916020019161293d565b820191906000526020600020905b81548152906001019060200180831161292057829003601f168201915b50505050509050600061294e612a9b565b905060008151036129635781925050506129a6565b60008251111561299857808260405160200161298092919061507b565b604051602081830303815290604052925050506129a6565b6129a184612ab2565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166129cd83612301565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600081600001549050919050565b612a14828260405180602001604052806000815250612b1a565b5050565b612a21826129ab565b612a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5790615111565b60405180910390fd5b8060c960008481526020019081526020016000209081612a8091906146f6565b505050565b6001816000016000828254019250508190555050565b606060405180602001604052806000815250905090565b6060612abd82611aeb565b6000612ac7612a9b565b90506000815111612ae75760405180602001604052806000815250612b12565b80612af184612b75565b604051602001612b0292919061507b565b6040516020818303038152906040525b915050919050565b612b248383612c43565b612b316000848484612e60565b612b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b67906151a3565b60405180910390fd5b505050565b606060006001612b8484612fe7565b01905060008167ffffffffffffffff811115612ba357612ba2613592565b5b6040519080825280601f01601f191660200182016040528015612bd55781602001600182028036833780820191505090505b509050600082602001820190505b600115612c38578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612c2c57612c2b6151c3565b5b04945060008503612be3575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ca99061523e565b60405180910390fd5b612cbb816129ab565b15612cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf2906152aa565b60405180910390fd5b612d0960008383600161313a565b612d12816129ab565b15612d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d49906152aa565b60405180910390fd5b6001609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612e5c60008383600161314c565b5050565b6000612e818473ffffffffffffffffffffffffffffffffffffffff16612404565b15612fda578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612eaa611b36565b8786866040518563ffffffff1660e01b8152600401612ecc949392919061531f565b6020604051808303816000875af1925050508015612f0857506040513d601f19601f82011682018060405250810190612f059190615380565b60015b612f8a573d8060008114612f38576040519150601f19603f3d011682016040523d82523d6000602084013e612f3d565b606091505b506000815103612f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f79906151a3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612fdf565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613045577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161303b5761303a6151c3565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613082576d04ee2d6d415b85acef81000000008381613078576130776151c3565b5b0492506020810190505b662386f26fc1000083106130b157662386f26fc1000083816130a7576130a66151c3565b5b0492506010810190505b6305f5e10083106130da576305f5e10083816130d0576130cf6151c3565b5b0492506008810190505b61271083106130ff5761271083816130f5576130f46151c3565b5b0492506004810190505b606483106131225760648381613118576131176151c3565b5b0492506002810190505b600a8310613131576001810190505b80915050919050565b61314684848484613152565b50505050565b50505050565b50505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131a18161316c565b81146131ac57600080fd5b50565b6000813590506131be81613198565b92915050565b6000602082840312156131da576131d9613162565b5b60006131e8848285016131af565b91505092915050565b60008115159050919050565b613206816131f1565b82525050565b600060208201905061322160008301846131fd565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613261578082015181840152602081019050613246565b60008484015250505050565b6000601f19601f8301169050919050565b600061328982613227565b6132938185613232565b93506132a3818560208601613243565b6132ac8161326d565b840191505092915050565b600060208201905081810360008301526132d1818461327e565b905092915050565b6000819050919050565b6132ec816132d9565b81146132f757600080fd5b50565b600081359050613309816132e3565b92915050565b60006020828403121561332557613324613162565b5b6000613333848285016132fa565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133678261333c565b9050919050565b6133778161335c565b82525050565b6000602082019050613392600083018461336e565b92915050565b6133a18161335c565b81146133ac57600080fd5b50565b6000813590506133be81613398565b92915050565b600080604083850312156133db576133da613162565b5b60006133e9858286016133af565b92505060206133fa858286016132fa565b9150509250929050565b60008060006060848603121561341d5761341c613162565b5b600061342b868287016133af565b935050602061343c868287016133af565b925050604061344d868287016132fa565b9150509250925092565b6000819050919050565b61346a81613457565b811461347557600080fd5b50565b60008135905061348781613461565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126134b2576134b161348d565b5b8235905067ffffffffffffffff8111156134cf576134ce613492565b5b6020830191508360018202830111156134eb576134ea613497565b5b9250929050565b60008060006040848603121561350b5761350a613162565b5b600061351986828701613478565b935050602084013567ffffffffffffffff81111561353a57613539613167565b5b6135468682870161349c565b92509250509250925092565b6000806040838503121561356957613568613162565b5b6000613577858286016133af565b925050602061358885828601613478565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135ca8261326d565b810181811067ffffffffffffffff821117156135e9576135e8613592565b5b80604052505050565b60006135fc613158565b905061360882826135c1565b919050565b600067ffffffffffffffff82111561362857613627613592565b5b602082029050602081019050919050565b600061364c6136478461360d565b6135f2565b9050808382526020820190506020840283018581111561366f5761366e613497565b5b835b81811015613698578061368488826133af565b845260208401935050602081019050613671565b5050509392505050565b600082601f8301126136b7576136b661348d565b5b81356136c7848260208601613639565b91505092915050565b600080fd5b600067ffffffffffffffff8211156136f0576136ef613592565b5b6136f98261326d565b9050602081019050919050565b82818337600083830152505050565b6000613728613723846136d5565b6135f2565b905082815260208101848484011115613744576137436136d0565b5b61374f848285613706565b509392505050565b600082601f83011261376c5761376b61348d565b5b813561377c848260208601613715565b91505092915050565b60008060006060848603121561379e5761379d613162565b5b600084013567ffffffffffffffff8111156137bc576137bb613167565b5b6137c8868287016136a2565b935050602084013567ffffffffffffffff8111156137e9576137e8613167565b5b6137f586828701613757565b925050604061380686828701613478565b9150509250925092565b60008060006060848603121561382957613828613162565b5b6000613837868287016133af565b935050602061384886828701613478565b925050604084013567ffffffffffffffff81111561386957613868613167565b5b61387586828701613757565b9150509250925092565b613888816132d9565b82525050565b60006020820190506138a3600083018461387f565b92915050565b6000602082840312156138bf576138be613162565b5b60006138cd84828501613478565b91505092915050565b6000602082840312156138ec576138eb613162565b5b60006138fa848285016133af565b91505092915050565b60008060008060008060c087890312156139205761391f613162565b5b600087013567ffffffffffffffff81111561393e5761393d613167565b5b61394a89828a01613757565b965050602087013567ffffffffffffffff81111561396b5761396a613167565b5b61397789828a01613757565b955050604087013567ffffffffffffffff81111561399857613997613167565b5b6139a489828a01613757565b94505060606139b589828a016132fa565b93505060806139c689828a016133af565b92505060a06139d789828a016133af565b9150509295509295509295565b6000806000606084860312156139fd576139fc613162565b5b6000613a0b868287016133af565b9350506020613a1c86828701613478565b9250506040613a2d868287016132fa565b9150509250925092565b600060208284031215613a4d57613a4c613162565b5b600082013567ffffffffffffffff811115613a6b57613a6a613167565b5b613a7784828501613757565b91505092915050565b613a89816131f1565b8114613a9457600080fd5b50565b600081359050613aa681613a80565b92915050565b60008060408385031215613ac357613ac2613162565b5b6000613ad1858286016133af565b9250506020613ae285828601613a97565b9150509250929050565b600067ffffffffffffffff821115613b0757613b06613592565b5b613b108261326d565b9050602081019050919050565b6000613b30613b2b84613aec565b6135f2565b905082815260208101848484011115613b4c57613b4b6136d0565b5b613b57848285613706565b509392505050565b600082601f830112613b7457613b7361348d565b5b8135613b84848260208601613b1d565b91505092915050565b60008060008060808587031215613ba757613ba6613162565b5b6000613bb5878288016133af565b9450506020613bc6878288016133af565b9350506040613bd7878288016132fa565b925050606085013567ffffffffffffffff811115613bf857613bf7613167565b5b613c0487828801613b5f565b91505092959194509250565b613c1981613457565b82525050565b6000602082019050613c346000830184613c10565b92915050565b60008060408385031215613c5157613c50613162565b5b6000613c5f858286016133af565b9250506020613c70858286016133af565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613cc157607f821691505b602082108103613cd457613cd3613c7a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613d36602183613232565b9150613d4182613cda565b604082019050919050565b60006020820190508181036000830152613d6581613d29565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613dc8603d83613232565b9150613dd382613d6c565b604082019050919050565b60006020820190508181036000830152613df781613dbb565b9050919050565b7f526573695342543a204e4f205452414e534645522046524f4d20414c4c4f574560008201527f4400000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e5a602183613232565b9150613e6582613dfe565b604082019050919050565b60006020820190508181036000830152613e8981613e4d565b9050919050565b7f526573695342543a20494e56414c494420524f4c450000000000000000000000600082015250565b6000613ec6601583613232565b9150613ed182613e90565b602082019050919050565b60006020820190508181036000830152613ef581613eb9565b9050919050565b7f526573695342543a20456d707479205552490000000000000000000000000000600082015250565b6000613f32601283613232565b9150613f3d82613efc565b602082019050919050565b60006020820190508181036000830152613f6181613f25565b9050919050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613fd57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f98565b613fdf8683613f98565b95508019841693508086168417925050509392505050565b6000819050919050565b600061401c614017614012846132d9565b613ff7565b6132d9565b9050919050565b6000819050919050565b61403683614001565b61404a61404282614023565b848454613fa5565b825550505050565b600090565b61405f614052565b61406a81848461402d565b505050565b5b8181101561408e57614083600082614057565b600181019050614070565b5050565b601f8211156140d3576140a481613f73565b6140ad84613f88565b810160208510156140bc578190505b6140d06140c885613f88565b83018261406f565b50505b505050565b600082821c905092915050565b60006140f6600019846008026140d8565b1980831691505092915050565b600061410f83836140e5565b9150826002028217905092915050565b6141298383613f68565b67ffffffffffffffff81111561414257614141613592565b5b61414c8254613ca9565b614157828285614092565b6000601f8311600181146141865760008415614174578287013590505b61417e8582614103565b8655506141e6565b601f19841661419486613f73565b60005b828110156141bc57848901358255600182019150602085019450602081019050614197565b868310156141d957848901356141d5601f8916826140e5565b8355505b6001600288020188555050505b50505050505050565b60006141fb8385613232565b9350614208838584613706565b6142118361326d565b840190509392505050565b60006040820190508181036000830152614236818661327e565b9050818103602083015261424b8184866141ef565b9050949350505050565b7f526573695342543a20494e56414c4944205245534920544f4b454e204144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b60006142b1602383613232565b91506142bc82614255565b604082019050919050565b600060208201905081810360008301526142e0816142a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614350826132d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361438257614381614316565b5b600182019050919050565b60006040820190506143a26000830185613c10565b6143af602083018461387f565b9392505050565b7f526573695342543a204e4f5420414e20534254204f574e455200000000000000600082015250565b60006143ec601983613232565b91506143f7826143b6565b602082019050919050565b6000602082019050818103600083015261441b816143df565b9050919050565b7f526573695342543a20494e56414c4944204e49434b4e414d4500000000000000600082015250565b6000614458601983613232565b915061446382614422565b602082019050919050565b600060208201905081810360008301526144878161444b565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006144c4601883613232565b91506144cf8261448e565b602082019050919050565b600060208201905081810360008301526144f3816144b7565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614556602983613232565b9150614561826144fa565b604082019050919050565b6000602082019050818103600083015261458581614549565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006145e8602e83613232565b91506145f38261458c565b604082019050919050565b60006020820190508181036000830152614617816145db565b9050919050565b7f494e56414c494420524547495354525920414444524553530000000000000000600082015250565b6000614654601883613232565b915061465f8261461e565b602082019050919050565b6000602082019050818103600083015261468381614647565b9050919050565b7f494e56414c4944205245534920544f4b454e2041444452455353000000000000600082015250565b60006146c0601a83613232565b91506146cb8261468a565b602082019050919050565b600060208201905081810360008301526146ef816146b3565b9050919050565b6146ff82613227565b67ffffffffffffffff81111561471857614717613592565b5b6147228254613ca9565b61472d828285614092565b600060209050601f831160018114614760576000841561474e578287015190505b6147588582614103565b8655506147c0565b601f19841661476e86613f73565b60005b8281101561479657848901518255600182019150602085019450602081019050614771565b868310156147b357848901516147af601f8916826140e5565b8355505b6001600288020188555050505b505050505050565b600060608201905081810360008301526147e2818661327e565b905081810360208301526147f6818561327e565b9050614805604083018461387f565b949350505050565b6000819050919050565b600060ff82169050919050565b600061483f61483a6148358461480d565b613ff7565b614817565b9050919050565b61484f81614824565b82525050565b600060208201905061486a6000830184614846565b92915050565b60006040820190506148856000830185613c10565b614892602083018461336e565b9392505050565b6000815190506148a881613a80565b92915050565b6000602082840312156148c4576148c3613162565b5b60006148d284828501614899565b91505092915050565b6000815190506148ea816132e3565b92915050565b60006020828403121561490657614905613162565b5b6000614914848285016148db565b91505092915050565b6000815461492a81613ca9565b6149348186613232565b9450600182166000811461494f576001811461496557614998565b60ff198316865281151560200286019350614998565b61496e85613f73565b60005b8381101561499057815481890152600182019150602081019050614971565b808801955050505b50505092915050565b600060208201905081810360008301526149bb818461491d565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614a1f602683613232565b9150614a2a826149c3565b604082019050919050565b60006020820190508181036000830152614a4e81614a12565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614a8b602083613232565b9150614a9682614a55565b602082019050919050565b60006020820190508181036000830152614aba81614a7e565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614af7601f83613232565b9150614b0282614ac1565b602082019050919050565b60006020820190508181036000830152614b2681614aea565b9050919050565b7f526573695342543a2044656661756c7420526f6c6520557269206e6f7420736560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000614b89602183613232565b9150614b9482614b2d565b604082019050919050565b60006020820190508181036000830152614bb881614b7c565b9050919050565b7f526573695342543a204f4e4c59204f574e4552204f52205245534920544f4b4560008201527f4e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000614c1b602183613232565b9150614c2682614bbf565b604082019050919050565b60006020820190508181036000830152614c4a81614c0e565b9050919050565b7f526573695342543a20494e56414c494420544f20414444524553530000000000600082015250565b6000614c87601b83613232565b9150614c9282614c51565b602082019050919050565b60006020820190508181036000830152614cb681614c7a565b9050919050565b7f526573695342543a205553455220414c52454144592048415320534254000000600082015250565b6000614cf3601d83613232565b9150614cfe82614cbd565b602082019050919050565b60006020820190508181036000830152614d2281614ce6565b9050919050565b7f526573695342543a20454d505459205552490000000000000000000000000000600082015250565b6000614d5f601283613232565b9150614d6a82614d29565b602082019050919050565b60006020820190508181036000830152614d8e81614d52565b9050919050565b7f526573695342543a20494e56414c494420534254205245434549564552000000600082015250565b6000614dcb601d83613232565b9150614dd682614d95565b602082019050919050565b60006020820190508181036000830152614dfa81614dbe565b9050919050565b7f526573695342543a205573657220686173206e6f205342540000000000000000600082015250565b6000614e37601883613232565b9150614e4282614e01565b602082019050919050565b60006020820190508181036000830152614e6681614e2a565b9050919050565b7f526573695342543a20496e76616c696420616d6f756e74000000000000000000600082015250565b6000614ea3601783613232565b9150614eae82614e6d565b602082019050919050565b60006020820190508181036000830152614ed281614e96565b9050919050565b6000614ee4826132d9565b9150614eef836132d9565b9250828201905080821115614f0757614f06614316565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614f69602b83613232565b9150614f7482614f0d565b604082019050919050565b60006020820190508181036000830152614f9881614f5c565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614fd5601983613232565b9150614fe082614f9f565b602082019050919050565b6000602082019050818103600083015261500481614fc8565b9050919050565b6000615016826132d9565b9150615021836132d9565b925082820390508181111561503957615038614316565b5b92915050565b600081905092915050565b600061505582613227565b61505f818561503f565b935061506f818560208601613243565b80840191505092915050565b6000615087828561504a565b9150615093828461504a565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006150fb602e83613232565b91506151068261509f565b604082019050919050565b6000602082019050818103600083015261512a816150ee565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061518d603283613232565b915061519882615131565b604082019050919050565b600060208201905081810360008301526151bc81615180565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615228602083613232565b9150615233826151f2565b602082019050919050565b600060208201905081810360008301526152578161521b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615294601c83613232565b915061529f8261525e565b602082019050919050565b600060208201905081810360008301526152c381615287565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006152f1826152ca565b6152fb81856152d5565b935061530b818560208601613243565b6153148161326d565b840191505092915050565b6000608082019050615334600083018761336e565b615341602083018661336e565b61534e604083018561387f565b818103606083015261536081846152e6565b905095945050505050565b60008151905061537a81613198565b92915050565b60006020828403121561539657615395613162565b5b60006153a48482850161536b565b9150509291505056fea2646970667358221220a05725ba69b1bd84ebd3271d67d0341fe1b29fd147f8e10581955a642d5ba53f64736f6c63430008120033",
  "devdoc": {
    "author": "Alejo Lovallo",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Locked(uint256)": {
        "details": "If a token is minted and the status is locked, this event should be emitted.",
        "params": {
          "tokenId": "The identifier for a token."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Unlocked(uint256)": {
        "details": "If a token is minted and the status is unlocked, this event should be emitted.",
        "params": {
          "tokenId": "The identifier for a token."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "locked(uint256)": {
        "details": "Know if a sbt is locked",
        "params": {
          "tokenId": "sbt token id"
        },
        "returns": {
          "_0": "is sbt locked"
        }
      },
      "mint(address,bytes32,string)": {
        "details": "Mint SBT to user with specific role and uri.",
        "params": {
          "_role": "role name from Resi registry",
          "_to": "user",
          "_uri": "uri"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setContractURI(string)": {
        "params": {
          "_contractUri": "contractUri"
        }
      },
      "setDefaultRoleUri(bytes32,string)": {
        "details": "Set default Resi Token Role URI",
        "params": {
          "_role": "role name",
          "_uri": "default uri"
        }
      },
      "setRegistry(address)": {
        "details": "Set Resi Registry",
        "params": {
          "_registry": "registry address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "custom:experimental": "The following function is override required by Solidity.",
        "details": "Retrieve token uri from id",
        "params": {
          "tokenId": "token id to retrieve uri"
        },
        "returns": {
          "_0": "uri"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "RESI_REGISTRY": {
        "details": "Resi Registry contract"
      },
      "RESI_TOKEN": {
        "details": "Resi ERC20 token contract"
      },
      "SERIE_ID": {
        "details": "Serie id"
      },
      "_tokenIdCounter": {
        "details": "Private counter to make internal security checks"
      },
      "contractUri": {
        "details": "Token ContractUri"
      },
      "defaultRoleUris": {
        "details": "role => uri"
      },
      "lockedSBTs": {
        "details": "tokenId => isLocked"
      },
      "resiTokenBalances": {
        "details": "user => resi erc20 balances"
      },
      "upgradeGap": {
        "details": "Leave a gap betweeen inherited contracts variables in orderto be able to add more variables in them later."
      },
      "userNickNames": {
        "details": "user => nickname"
      }
    },
    "title": "Resi SBT Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Locked(uint256)": {
        "notice": "Emitted when the locking status is changed to locked."
      },
      "Unlocked(uint256)": {
        "notice": "Emitted when the locking status is changed to unlocked."
      }
    },
    "kind": "user",
    "methods": {
      "setContractURI(string)": {
        "notice": "Modify contractUri for NFT collection"
      }
    },
    "notice": "SBT token linked to a Serie",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 720,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3501,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 589,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 709,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3720,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1947,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 1949,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 1953,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1957,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1961,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1967,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2869,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 3032,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3148,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1020,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 1078,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7556,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "301",
        "type": "t_struct(Counter)6576_storage"
      },
      {
        "astId": 7559,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "contractUri",
        "offset": 0,
        "slot": "302",
        "type": "t_string_storage"
      },
      {
        "astId": 7562,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "SERIE_ID",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 7565,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "RESI_TOKEN",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 7568,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "RESI_REGISTRY",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 7573,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "userNickNames",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 7578,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "resiTokenBalances",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7583,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "lockedSBTs",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 7588,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "defaultRoleUris",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 8311,
        "contract": "contracts/ResiSBT.sol:ResiSBT",
        "label": "upgradeGap",
        "offset": 0,
        "slot": "310",
        "type": "t_array(t_uint256)20_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)6576_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 6575,
            "contract": "contracts/ResiSBT.sol:ResiSBT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}